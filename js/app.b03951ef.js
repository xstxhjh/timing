!function(s){function a(a){for(var e,r,p=a[0],v=a[1],_=a[2],c=0,h=[];c<p.length;c++)r=p[c],n[r]&&h.push(n[r][0]),n[r]=0;for(e in v)Object.prototype.hasOwnProperty.call(v,e)&&(s[e]=v[e]);for(o&&o(a);h.length;)h.shift()();return l.push.apply(l,_||[]),t()}function t(){for(var s,a=0;a<l.length;a++){for(var t=l[a],e=!0,r=1;r<t.length;r++){var v=t[r];0!==n[v]&&(e=!1)}e&&(l.splice(a--,1),s=p(p.s=t[0]))}return s}var e={},r={app:0},n={app:0},l=[];function p(a){if(e[a])return e[a].exports;var t=e[a]={i:a,l:!1,exports:{}};return s[a].call(t.exports,t,t.exports,p),t.l=!0,t.exports}p.e=function(s){var a=[];r[s]?a.push(r[s]):0!==r[s]&&{"chunk-0baa453e":1,"chunk-5dfbcbb8":1,"chunk-6f792807":1,"chunk-802b7fc4":1,"chunk-f4babed2":1}[s]&&a.push(r[s]=new Promise(function(a,t){for(var e="css/"+({}[s]||s)+"."+{"chunk-0baa453e":"30ab2846","chunk-5dfbcbb8":"3bec7876","chunk-6f792807":"9eca22a2","chunk-802b7fc4":"51126109","chunk-f4babed2":"3904433e"}[s]+".css",n=p.p+e,l=document.getElementsByTagName("link"),v=0;v<l.length;v++){var _=(o=l[v]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(_===e||_===n))return a()}var c=document.getElementsByTagName("style");for(v=0;v<c.length;v++){var o;if((_=(o=c[v]).getAttribute("data-href"))===e||_===n)return a()}var h=document.createElement("link");h.rel="stylesheet",h.type="text/css",h.onload=a,h.onerror=function(a){var e=a&&a.target&&a.target.src||n,l=new Error("Loading CSS chunk "+s+" failed.\n("+e+")");l.code="CSS_CHUNK_LOAD_FAILED",l.request=e,delete r[s],h.parentNode.removeChild(h),t(l)},h.href=n,document.getElementsByTagName("head")[0].appendChild(h)}).then(function(){r[s]=0}));var t=n[s];if(0!==t)if(t)a.push(t[2]);else{var e=new Promise(function(a,e){t=n[s]=[a,e]});a.push(t[2]=e);var l,v=document.createElement("script");v.charset="utf-8",v.timeout=120,p.nc&&v.setAttribute("nonce",p.nc),v.src=function(s){return p.p+"js/"+({}[s]||s)+"."+{"chunk-0baa453e":"29123b24","chunk-5dfbcbb8":"d3cba58c","chunk-6f792807":"7bd8b1d6","chunk-802b7fc4":"34db80cd","chunk-f4babed2":"82a16e57"}[s]+".js"}(s),l=function(a){v.onerror=v.onload=null,clearTimeout(_);var t=n[s];if(0!==t){if(t){var e=a&&("load"===a.type?"missing":a.type),r=a&&a.target&&a.target.src,l=new Error("Loading chunk "+s+" failed.\n("+e+": "+r+")");l.type=e,l.request=r,t[1](l)}n[s]=void 0}};var _=setTimeout(function(){l({type:"timeout",target:v})},12e4);v.onerror=v.onload=l,document.head.appendChild(v)}return Promise.all(a)},p.m=s,p.c=e,p.d=function(s,a,t){p.o(s,a)||Object.defineProperty(s,a,{enumerable:!0,get:t})},p.r=function(s){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},p.t=function(s,a){if(1&a&&(s=p(s)),8&a)return s;if(4&a&&"object"==typeof s&&s&&s.__esModule)return s;var t=Object.create(null);if(p.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:s}),2&a&&"string"!=typeof s)for(var e in s)p.d(t,e,function(a){return s[a]}.bind(null,e));return t},p.n=function(s){var a=s&&s.__esModule?function(){return s.default}:function(){return s};return p.d(a,"a",a),a},p.o=function(s,a){return Object.prototype.hasOwnProperty.call(s,a)},p.p="",p.oe=function(s){throw s};var v=window.webpackJsonp=window.webpackJsonp||[],_=v.push.bind(v);v.push=a,v=v.slice();for(var c=0;c<v.length;c++)a(v[c]);var o=_;l.push([0,"vendors~app"]),t()}({0:function(s,a,t){s.exports=t("56d7")},"0a5e":function(s,a,t){"use strict";t.r(a);var e=t("e017"),r=t.n(e),n=t("21a1"),l=t.n(n),p=new r.a({id:"icon-antDesign",use:"icon-antDesign-usage",viewBox:"0 0 1024 1024",content:'<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="icon-antDesign"><defs><style type="text/css"></style></defs><path d="M716.3 313.8c19-18.9 19-49.7 0-68.6l-69.9-69.9 0.1 0.1c-18.5-18.5-50.3-50.3-95.3-95.2-21.2-20.7-55.5-20.5-76.5 0.5L80.9 474.2c-21.2 21.1-21.2 55.3 0 76.4L474.6 944c21.2 21.1 55.4 21.1 76.5 0l165.1-165c19-18.9 19-49.7 0-68.6-19-18.9-49.7-18.9-68.7 0l-125 125.2c-5.2 5.2-13.3 5.2-18.5 0L189.5 521.4c-5.2-5.2-5.2-13.3 0-18.5l314.4-314.2c0.4-0.4 0.9-0.7 1.3-1.1 5.2-4.1 12.4-3.7 17.2 1.1l125.2 125.1c19 19 49.8 19 68.7 0z" p-id="3406" fill="#f38181" data-spm-anchor-id="a313x.7781069.0.i0" class="" /><path d="M408.6 514.4a106.3 106.2 0 1 0 212.6 0 106.3 106.2 0 1 0-212.6 0Z" p-id="3407" fill="#ffaa64" data-spm-anchor-id="a313x.7781069.0.i3" class="" /><path d="M944.8 475.8L821.9 353.5c-19-18.9-49.8-18.9-68.7 0.1-19 18.9-19 49.7 0 68.6l83 82.9c5.2 5.2 5.2 13.3 0 18.5l-81.8 81.7c-19 18.9-19 49.7 0 68.6 19 18.9 49.7 18.9 68.7 0l121.8-121.7c21.1-21.1 21.1-55.2-0.1-76.4z" p-id="3408" fill="#e3fdfd" data-spm-anchor-id="a313x.7781069.0.i2" class="selected" /></symbol>'});l.a.add(p),a.default=p},1249:function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("Typescript")]),t("p",[s._v("TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，由 Microsoft 开发。")]),t("hr"),t("h1",[s._v("基础")]),t("h2",[s._v("原始数据类型")]),t("p",[s._v("原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol。")]),s._m(0),t("h2",[s._v("任意值")]),t("p",[s._v("任意值（Any）用来表示允许赋值为任意类型。")]),t("p",[s._v("在任意值上访问任何属性都是允许的：")]),s._m(1),t("h2",[s._v("类型推论")]),t("p",[s._v("如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。")]),t("p",[s._v("如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查。")]),s._m(2),t("h2",[s._v("联合类型")]),t("p",[s._v("联合类型（Union Types）表示取值可以为多种类型中的一种。")]),s._m(3),t("p",[s._v("当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。")]),t("h2",[s._v("对象的类型——接口")]),t("p",[s._v("在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。")]),t("p",[s._v("在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。")]),t("p",[s._v("定义的变量比接口多(少)一些属性是不允许的。")]),t("p",[s._v("接口一般首字母大写。有的编程语言中会建议接口的名称加上 I 前缀。")]),s._m(4),s._m(5),t("h2",[s._v("数组的类型")]),t("h3",[s._v("「类型 + 方括号」表示法")]),s._m(6),t("p",[s._v("数组的项中不允许出现其他的类型")]),s._m(7),t("p",[s._v("any 表示数组中允许出现任意类型")]),t("h3",[s._v("数组泛型")]),s._m(8),t("h3",[s._v("用接口表示数组")]),s._m(9),t("h3",[s._v("类数组")]),t("p",[s._v("常用的类数组都有自己的接口定义")]),s._m(10),t("h2",[s._v("函数的类型")]),t("h3",[s._v("函数声明")]),s._m(11),t("h3",[s._v("函数表达式")]),t("p",[s._v("通过赋值操作进行类型推论而推断出来")]),s._m(12),t("p",[s._v("手动添加类型")]),s._m(13),t("h3",[s._v("用接口定义函数的形状")]),s._m(14),t("h3",[s._v("可选参数")]),t("p",[s._v("可选参数后面不允许再出现必需参数了")]),t("p",[s._v("TypeScript 会将添加了默认值的参数识别为可选参数，此时就不受「可选参数必须接在必需参数后面」的限制了")]),s._m(15),t("h3",[s._v("剩余参数")]),t("p",[s._v("...rest 的方式获取函数中的剩余参数")]),s._m(16),t("h3",[s._v("重载")]),t("p",[s._v("重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。")]),s._m(17),t("h2",[s._v("类型断言")]),t("p",[s._v("类型断言可以用来手动指定一个值的类型。")]),s._m(18),s._m(19),t("p",[s._v("类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的。")]),t("h2",[s._v("声明文件")]),t("p",[s._v("declare var 声明全局变量\ndeclare function 声明全局方法\ndeclare class 声明全局类\ndeclare enum 声明全局枚举类型\ndeclare namespace 声明（含有子属性的）全局对象\ninterface 和 type 声明全局类型\nexport 导出变量\nexport namespace 导出（含有子属性的）对象\nexport default ES6 默认导出\nexport = commonjs 导出模块\nexport as namespace UMD 库声明全局变量\ndeclare global 扩展全局变量\ndeclare module 扩展模块\n/// "),t("reference",[s._v(" 三斜线指令")])],1),t("p",[s._v("通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中，这就是声明文件。")]),s._m(20),t("p",[s._v("使用 @types 统一管理第三方库的声明文件。")]),s._m(21),t("h3",[s._v("npm 包")]),s._m(22),t("p",[s._v("对应的导入和使用模块应该是这样：")]),s._m(23),t("h3",[s._v("UMD 库")]),s._m(24),t("p",[s._v("一般使用 export as namespace 时，都是先有了 npm 包的声明文件，再基于它添加一条 export as namespace 语句，即可将声明好的一个变量声明为全局变量。")]),s._m(25),t("h3",[s._v("自动生成声明文件")]),t("p",[s._v("如果库的源码本身就是由 ts 写的，那么在使用 tsc 脚本将 ts 编译为 js 的时候，添加 declaration 选项，就可以同时也生成 .d.ts 声明文件了。")]),s._m(26),t("h2",[s._v("内置对象")]),t("p",[s._v("内置对象是指根据标准在全局作用域上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。")]),t("p",[s._v("DOM 和 BOM 提供的内置对象有：\nDocument、HTMLElement、Event、NodeList 等。")]),s._m(27),t("hr"),t("h1",[s._v("进阶")]),t("h2",[s._v("类型别名")]),t("p",[s._v("类型别名用来给一个类型起个新名字。")]),s._m(28),t("h2",[s._v("字符串字面量类型")]),t("p",[s._v("字符串字面量类型用来约束取值只能是某几个字符串中的一个。")]),s._m(29),t("h2",[s._v("元组")]),t("p",[s._v("数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。\n元组起源于函数编程语言（如 F#），这些语言中会频繁使用元组。")]),s._m(30),t("p",[s._v("当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型。")]),t("h2",[s._v("枚举")]),t("p",[s._v("枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。")]),s._m(31),t("hr"),t("h1",[s._v("类")]),t("p",[s._v("类(Class)：定义了一件事物的抽象特点，包含它的属性和方法")]),t("p",[s._v("对象（Object）：类的实例，通过 new 生成")]),t("p",[s._v("面向对象（OOP）的三大特性：封装、继承、多态")]),s._m(32),t("p",[s._v("存取器（getter & setter）：用以改变属性的读取和赋值行为")]),t("p",[s._v("修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法")]),t("p",[s._v("抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现")]),t("p",[s._v("接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口")]),t("h2",[s._v("ES6 中类的用法")]),t("h3",[s._v("属性和方法")]),s._m(33),t("h3",[s._v("类的继承")]),t("p",[s._v("使用 extends 关键字实现继承，子类中使用 super 关键字来调用父类的构造函数和方法。")]),s._m(34),t("h3",[s._v("存取器")]),t("p",[s._v("使用 getter 和 setter 可以改变属性的赋值和读取行为：")]),s._m(35),t("h2",[s._v("ES7 中类的用法")]),t("h3",[s._v("静态方法")]),t("p",[s._v("使用 static 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：")]),s._m(36),t("h3",[s._v("实例属性")]),s._m(37),s._m(38),t("h3",[s._v("静态属性")]),t("p",[s._v("ES7 提案中，可以使用 static 定义一个静态属性：")]),s._m(39),t("h2",[s._v("TypeScript 中类的用法")]),t("p",[s._v("public 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 public 的\nprivate 修饰的属性或方法是私有的，不能在声明它的类的外部访问\nprotected 修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的")]),t("p",[s._v("readonly 只读属性关键字，只允许出现在属性声明或索引签名中。\n注意如果 readonly 和其他访问修饰符同时存在的话，需要写在其后面。")]),s._m(40),t("h3",[s._v("抽象类")]),t("p",[s._v("abstract 用于定义抽象类和其中的抽象方法。")]),t("p",[s._v("抽象类是不允许被实例化\n抽象类中的抽象方法必须被子类实现")]),s._m(41),t("h2",[s._v("类的类型")]),s._m(42),t("hr"),t("h1",[s._v("类与接口")]),t("p",[s._v("接口（Interfaces）可以用于对「对象的形状（Shape）」进行描述。")]),t("p",[s._v("另一用途，对类的一部分行为进行抽象。")]),t("h2",[s._v("类实现接口")]),t("p",[s._v("实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 implements 关键字来实现。这个特性大大提高了面向对象的灵活性。")]),s._m(43),t("h2",[s._v("接口继承接口")]),s._m(44),t("h2",[s._v("接口继承类")]),s._m(45),t("h2",[s._v("混合类型")]),t("p",[s._v("一个对象可以同时做为函数和对象使用，并带有额外的属性")]),s._m(46),t("hr"),t("h1",[s._v("泛型")]),t("p",[s._v("泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。")]),s._m(47),t("p",[s._v("上例中，我们在函数名后添加了 "),t("T",[s._v("，其中 T 用来指代任意输入的类型，在后面的输入 value: T 和输出 Array"),t("T",[s._v(" 中即可使用了。")])],1)],1),t("h2",[s._v("多个类型参数")]),s._m(48),t("h2",[s._v("泛型约束")]),t("p",[s._v("我们可以对泛型进行约束，只允许这个函数传入那些包含 length 属性的变量。")]),s._m(49),t("h2",[s._v("泛型接口")]),s._m(50),t("h2",[s._v("泛型类")]),s._m(51),t("h2",[s._v("泛型参数的默认类型")]),s._m(52),t("hr"),t("h1",[s._v("声明合并")]),t("p",[s._v("如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型。")]),t("h2",[s._v("函数的合并")]),t("p",[s._v("我们可以使用重载定义多个函数类型")]),s._m(53),t("h2",[s._v("接口的合并")]),t("p",[s._v("合并的属性的类型必须是唯一的")]),s._m(54),t("p",[s._v("接口中方法的合并，与函数的合并一样")]),s._m(55),t("h2",[s._v("类的合并")]),t("p",[s._v("类的合并与接口的合并规则一致。")])])},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 布尔值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" isDone: boolean = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 数值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" decLiteral: number = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" hexLiteral: number = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0xf00d")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES6 中的二进制表示法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" binaryLiteral: number = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0b1010")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES6 中的八进制表示法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" octalLiteral: number = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0o744")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" notANumber: number = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("NaN")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" infinityNumber: number = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("Infinity")]),s._v(";\n\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 字符串")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myName: string = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myAge: number = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("25")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 模板字符串")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" sentence: string = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`Hello, my name is "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${myName}")]),s._v(".\nI'll be "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${myAge + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("}")]),s._v(" years old next month.`")]),s._v(";\n\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 空值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// (只能将它赋值为 undefined 和 null)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("alertName")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("void")]),s._v(" ")]),s._v("{\n    alert("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'My name is Tom'")]),s._v(");\n}\n\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Null 和 Undefined")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// (是所有类型的子类型)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" u: "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" n: "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" anyThing: any = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(anyThing.myName);\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(anyThing.myName.firstName);\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myFavoriteNumber = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'seven'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等价于")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myFavoriteNumber: string = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'seven'")]),s._v(";\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myFavoriteNumber: string | number;\nmyFavoriteNumber = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'seven'")]),s._v(";\nmyFavoriteNumber = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("7")]),s._v(";\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" tom: Person = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("89757")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("gender")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'male'")]),s._v("\n};\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 可选属性")]),s._v("\ninterface Person {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": string;\n    age?: number;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 任意属性")]),s._v("\ninterface Person {\n    [propName: string]: any;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 只读属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候")]),s._v("\ninterface Person {\n    readonly id: number;\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fibonacci: number[] = ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("];\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" list: any[] = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'xcatliu'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("25")]),s._v(", { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("website")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://xcatliu.com'")]),s._v(" }];\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fibonacci: "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v("<number> = ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("];\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface NumberArray {\n    [index: number]: number;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fibonacci: NumberArray = ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("];\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("sum")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" args: IArguments = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(";\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("sum")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: number, y: number")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x + y;\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" mySum = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: number, y: number")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x + y;\n};\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" mySum: "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: number, y: number")]),s._v(") =>")]),s._v(" number = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: number, y: number")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x + y;\n};\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface SearchFunc {\n    (source: string, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("subString")]),s._v(": string): boolean;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" mySearch: SearchFunc;\nmySearch = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("source: string, subString: string")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" source.search(subString) !== "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(";\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("buildName")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("firstName?: string, lastName: string = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Cat'")])]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (lastName) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" firstName + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + lastName;\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" firstName;\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" tomcat = buildName("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Cat'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" tom = buildName("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v(");\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("push")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("array: any[], ...items: any[]")]),s._v(") ")]),s._v("{\n    items.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item")]),s._v(") ")]),s._v("{\n        array.push(item);\n    });\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = [];\npush(a, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(");\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("reverse")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: number")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("reverse")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: string")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("reverse")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: number | string")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v(" | "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" x === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'number'")]),s._v(") {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Number")]),s._v("(x.toString().split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(").reverse().join("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v("));\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" x === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'string'")]),s._v(") {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(").reverse().join("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(");\n    }\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("<类型>值\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 或者")]),s._v("\n值 "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" 类型\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getLength")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("something: string | number")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ((<string>something).length) {\n        return (<string>something).length;\n    } else {\n        return something.toString().length;\n    }\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// src/jQuery.d.ts")]),s._v("\ndeclare "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" jQuery: "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("selector: string")]),s._v(") =>")]),s._v(" any;\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// src/index.ts")]),s._v("\njQuery("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'#foo'")]),s._v(");\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":""}},[this._v("npm install @types/jquery --save-dev\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// types/foo/index.d.ts")]),s._v("\n\ndeclare "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" name: string;\ndeclare "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getName")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("declare")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(name: string);\n    sayHi(): string;\n}\ndeclare enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\ninterface Options {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": any;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" { name, getName, Animal, Directions, Options };\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// src/index.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { name, getName, Animal, Directions, Options } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(name);\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myName = getName();\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" cat = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Animal("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" options: Options = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v("\n    }\n};\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("p",[s._v("既可以通过 "),t("code",{pre:!0},[s._v("<script>")]),s._v(" 标签引入，又可以通过 import 导入的库，称为 UMD 库。")])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// types/foo/index.d.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" namespace foo;\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(" foo;\n\ndeclare "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("declare")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" bar: number;\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"compilerOptions"')]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"module"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"commonjs"')]),s._v(",\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"outDir"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"lib"')]),s._v(",\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"declaration"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n    }\n}\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/tree/master/src/lib%22"}},[this._v("TypeScript 核心库的定义文件")]),this._v(" 中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。")])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("type Name = string;\ntype NameResolver = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" string;\ntype NameOrResolver = Name | NameResolver;\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getName")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("n: NameOrResolver")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Name")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" n === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'string'")]),s._v(") {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" n;\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" n();\n    }\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("type EventNames = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'click'")]),s._v(" | "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'scroll'")]),s._v(" | "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'mousemove'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("handleEvent")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("ele: Element, event: EventNames")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// do something")]),s._v("\n}\n\nhandleEvent("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v("), "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'scroll'")]),s._v(");  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 没问题")]),s._v("\nhandleEvent("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world'")]),s._v("), "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'dbclick'")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错，event 不能为 'dbclick'")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" tom: [string, number];\ntom["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v(";\ntom["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("25")]),s._v(";\n\ntom["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("].slice("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\ntom["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("].toFixed("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n\ntom = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Jack'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("21")]),s._v("];\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("enum Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Days["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Sun"')]),s._v("] === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Days["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Mon"')]),s._v("] === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Days["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Tue"')]),s._v("] === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Days["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Sat"')]),s._v("] === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Days["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Sun"')]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Days["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Mon"')]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Days["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("] === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Tue"')]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Days["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v("] === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Sat"')]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ul",[t("li",[t("p",[s._v("封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据")])]),t("li",[t("p",[s._v("继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性")])]),t("li",[t("p",[s._v("多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 Cat 和 Dog 都继承自 Animal，但是分别实现了自己的 eat 方法。此时针对某一个实例，我们无需了解它是 Cat 还是 Dog，就可以直接调用 eat 方法，程序会自动判断出来应该如何执行 eat")])])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(name) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    }\n    sayHi() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`My name is "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name}")]),s._v("`")]),s._v(";\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Animal("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Jack'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a.sayHi()); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// My name is Jack")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Cat")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(name) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("super")]),s._v("(name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用父类的 constructor(name)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n    }\n    sayHi() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Meow, '")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("super")]),s._v(".sayHi(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用父类的 sayHi()")]),s._v("\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" c = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Cat("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Tom")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(c.sayHi()); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Meow, My name is Tom")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(name) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v(" name() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Jack'")]),s._v(";\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("set")]),s._v(" name(value) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'setter: '")]),s._v(" + value);\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Animal("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Kitty'")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// setter: Kitty")]),s._v("\na.name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// setter: Tom")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a.name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Jack")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("static")]),s._v(" isAnimal(a) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" Animal;\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Animal("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Jack'")]),s._v(");\nAnimal.isAnimal(a); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\na.isAnimal(a); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError: a.isAnimal is not a function")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("p",[s._v("ES6 中实例的属性只能通过构造函数中的 "),t("a",{attrs:{href:"http://this.xxx"}},[s._v("this.xxx")]),s._v(" 来定义，ES7 提案中可以直接在类里面定义：")])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Jack'")]),s._v(";\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Animal();\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a.name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Jack")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("static")]),s._v(" num = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(";\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Animal.num); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 42")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// public readonly name;")]),s._v("\n    public "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(public readonly name) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// this.name = name;")]),s._v("\n    }\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("abstract "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    public name;\n    public "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(name) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    }\n    public abstract sayHi();\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Cat")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    public sayHi() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`Meow, My name is "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name}")]),s._v("`")]),s._v(");\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" cat = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Cat("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tom'")]),s._v(");\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Animal")]),s._v(" ")]),s._v("{\n    name: string;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(name: string) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    }\n    sayHi(): string {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`My name is "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name}")]),s._v("`")]),s._v(";\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a: Animal = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Animal("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Jack'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a.sayHi()); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// My name is Jack")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface Alarm {\n    alert(): "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(";\n}\n\ninterface Light {\n    lightOn(): "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(";\n    lightOff(): "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(";\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Door")]),s._v(" ")]),s._v("{\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("SecurityDoor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Door")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Alarm")]),s._v(" ")]),s._v("{\n    alert() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'SecurityDoor alert'")]),s._v(");\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 一个类可以实现多个接口")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Car")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Alarm")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Light")]),s._v(" ")]),s._v("{\n    alert() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Car alert'")]),s._v(");\n    }\n    lightOn() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Car light on'")]),s._v(");\n    }\n    lightOff() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Car light off'")]),s._v(");\n    }\n}\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[this._v("interface Alarm {\n    alert();\n}\n\ninterface LightableAlarm extends Alarm {\n    lightOn();\n    lightOff();\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Point")]),s._v(" ")]),s._v("{\n    x: number;\n    y: number;\n}\n\ninterface Point3d extends Point {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("z")]),s._v(": number;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" point3d: Point3d = {"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("x")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("y")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("z")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("};\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface Counter {\n    (start: number): string;\n    interval: number;\n    reset(): "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(";\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getCounter")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Counter")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" counter = "),t("span",{pre:!0,attrs:{class:"xml"}},[t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("Counter")]),s._v(">")]),s._v("function (start: number) { };\n    counter.interval = 123;\n    counter.reset = function () { };\n    return counter;\n}\n\nlet c = getCounter();\nc(10);\nc.reset();\nc.interval = 5.0;\n")])])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("createArray")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v(">("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("length: number, value: T")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Array")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v("> ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" result: T[] = [];\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < length; i++) {\n        result[i] = value;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n}\n\ncreateArray<string>("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'x'")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['x', 'x', 'x']")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("swap")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("U")]),s._v(">("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("tuple: [T, U]")]),s._v("): ["),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("U")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v("] ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [tuple["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("], tuple["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]];\n}\n\nswap(["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("7")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'seven'")]),s._v("]); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['seven', 7]")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface Lengthwise {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": number;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("loggingIdentity")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Lengthwise")]),s._v(">("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("arg: T")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(arg.length);\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" arg;\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface CreateArrayFunc<T> {\n    (length: number, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": T): "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v("<T>;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" createArray: CreateArrayFunc<any>;\ncreateArray = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v(">("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("length: number, value: T")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Array")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v("> ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" result: T[] = [];\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < length; i++) {\n        result[i] = value;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n}\n\ncreateArray("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'x'")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['x', 'x', 'x']")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("GenericNumber")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v("> ")]),s._v("{\n    zeroValue: T;\n    add: "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: T, y: T")]),s._v(") =>")]),s._v(" T;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myGenericNumber = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" GenericNumber<number>();\nmyGenericNumber.zeroValue = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\nmyGenericNumber.add = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x, y")]),s._v(") ")]),s._v("{ "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x + y; };\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("createArray")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(">("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("length: number, value: T")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Array")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v("> ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" result: T[] = [];\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < length; i++) {\n        result[i] = value;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("reverse")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: number")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("reverse")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: string")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("reverse")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x: number | string")]),s._v("): "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v(" | "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" x === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'number'")]),s._v(") {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Number")]),s._v("(x.toString().split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(").reverse().join("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v("));\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" x === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'string'")]),s._v(") {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" x.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(").reverse().join("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(");\n    }\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface Alarm {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("price")]),s._v(": number;\n}\ninterface Alarm {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("weight")]),s._v(": number;\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("interface Alarm {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("price")]),s._v(": number;\n    alert(s: string): string;\n}\ninterface Alarm {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("weight")]),s._v(": number;\n    alert(s: string, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("n")]),s._v(": number): string;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 相当于")]),s._v("\n\ninterface Alarm {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("price")]),s._v(": number;\n    weight: number;\n    alert(s: string): string;\n    alert(s: string, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("n")]),s._v(": number): string;\n}\n")])])}],!1,null,null,null);a.default=r.exports},"166a":function(s,a,t){},"1bb5":function(s,a,t){},2033:function(s,a,t){"use strict";var e=t("166a");t.n(e).a},"4a58":function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("一、词法作用域是什么？")]),t("ul",[t("li",[t("strong",[s._v("词法作用域")]),s._v("就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里决定的。")])]),t("h1",[s._v("二、查找标识符")]),t("h2",[s._v("标识符")]),t("p",[t("strong",[s._v("标识符")]),s._v("（Identifier）就是一个名字，用来对变量、函数、属性、参数进行命名，或者用做某些循环语句中的跳转位置的标记。")]),t("ul",[t("li",[s._v("作用域气泡的结构和互相之间的位置关系给引擎提供了足够的位置信息，引擎用这些信息来查找标识符的位置。")])]),t("h2",[s._v("遮蔽效应")]),t("ul",[t("li",[t("p",[s._v("作用域查找会在找到第一个匹配的标识符时停止。在多层的嵌套作用域中可以定义同名的标识符，这叫作“"),t("strong",[s._v("遮蔽效应")]),s._v("”（内部的标识符“遮蔽”了外部的标识符）。抛开遮蔽效应，作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。")])]),t("li",[t("p",[s._v('内部的标识符"遮蔽"了外部的标识符。全局变量会自动成为全局对象（比如浏览器中 window 对象的属性），但非全局的变量如果被遮蔽了，是无论如何都无法被访问到的。')])])]),t("h1",[s._v("三、欺骗词法")]),t("p",[s._v("在运行时修改（欺骗）词法作用域。"),t("strong",[s._v("【欺骗词法作用域会导致性能下降】")])]),t("ul",[t("li",[t("p",[t("strong",[s._v("eval(..)函数")]),s._v("可以接受一个字符串参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。")]),t("p",[s._v("相似的 setTimeout(..)、setInterval(..)的第一个参数可以是字符串，字符串内容可以被解释为一段动态生成的函数。")]),t("p",[s._v("new Function(..)函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转为动态生成的函数 ( 前面的形参是这个新生成函数的形参 )")]),t("p",[s._v("在程序中动态生成代码的使用场景非常罕见，因为它所带来的好处无法抵消性能上的损失。")])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("str, a")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("eval")]),s._v("(str) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 欺骗词法")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a, b)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\nfoo("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'var b = 3;'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1 , 3")]),s._v("\n")])]),t("ul",[t("li",[t("p",[t("strong",[s._v("with")]),s._v("，JavaScript 中另一个难以掌握 ( 并且现在也不推荐使用 ) 的用来欺骗词法作用域的功能是 with 关键字。")]),t("p",[s._v("with 通常被当作重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。")]),t("p",[s._v("with 可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。")])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("c")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 单调乏味的重复obj")]),s._v("\nobj.a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\nobj.b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\nobj.c = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 简单的快捷方式")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("with")]),s._v(" (obj) {\n  a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n  b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n  c = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("with")]),s._v(" (obj) {\n    a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" o1 = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" o1 = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\nfoo(o1)\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(o1.a) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nfoo(o2)\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(o2.a) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefind")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2 ——不好，a被泄漏到全局作用域上了!")]),s._v("\n")])]),t("p",[s._v("注：eval(..)函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，而 with 声明实际上是根据你传递给它的对象凭空创建了一个全新的词法作用域。")]),t("hr"),t("ul",[t("li",[t("p",[t("strong",[s._v("catch")]),s._v("，除了 eval 与 with 之外，try-catch 语句中的 catch 子句同样可以修改执行环境的作用域链")]),t("p",[s._v("当 try 代码块内发生错误，执行流立即跳转到 catch 子句")]),t("p",[s._v("随后把异常对象推入一个可变对象并且放到作用域链最前面，这和 with 很像")]),t("p",[t("strong",[s._v("一旦 catch 子句执行完毕，作用域链就会恢复原样")])])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n} "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (a) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//ReferenceError: a is not defined")]),s._v("\n")])]),t("hr"),t("p",[s._v("JavaScript 引擎会在编译阶段进行数项的性能优化，其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到标识符。")]),t("p",[s._v("在运行时才对作用域进行出行，所以如果无法明确的知道会接收到什么代码，这些代码会如何对作用域进行修改，可能导致所有的优化都是无意义的，因此最简单的做法就是完全不做任何优化。（不要使用他们）")]),t("p",[t("strong",[s._v("词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定的(this 也是)。词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。")])])])}],!1,null,null,null);a.default=r.exports},"4ea0":function(s,a,t){"use strict";t.r(a);var e=t("e017"),r=t.n(e),n=t("21a1"),l=t.n(n),p=new r.a({id:"icon-blogroll",use:"icon-blogroll-usage",viewBox:"0 0 1024 1024",content:'<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" id="icon-blogroll"><path d="M912 700.2c0 39.2-13.9 72.4-41.6 99.5l-72.1 71.5C771.2 898.4 738 912 698.8 912c-39.6 0-72.9-13.9-100-41.6L497.9 768.9c-27.1-27.1-40.7-60.3-40.7-99.5 0-40.2 14.3-74.3 43.1-102.5l-43.1-43.1c-28.1 28.8-62.1 43.1-102 43.1-39.2 0-72.6-13.7-100-41.1l-102-102.1c-27.4-27.4-41.1-60.8-41.1-100s13.9-72.4 41.6-99.5l72.1-71.5c27.1-27.1 60.3-40.7 99.5-40.7 39.5 0 72.9 13.9 100 41.6L526.2 255c27.1 27.1 40.7 60.3 40.7 99.5 0 40.2-14.4 74.3-43.1 102.5l43.1 43.1C595 471.3 629 457 668.9 457c39.2 0 72.6 13.7 100 41.1l102 102c27.4 27.6 41.1 61 41.1 100.1zM473.2 354.7c0-13.1-4.5-24.2-13.7-33.3L358.6 219.9c-9.2-9.2-20.3-13.7-33.3-13.7-12.8 0-23.8 4.4-33.3 13.2L219.9 291c-9.2 9.2-13.7 20.1-13.7 32.9 0 13.1 4.5 24.2 13.7 33.3l102 102c8.9 8.9 19.9 13.2 33.3 13.2 13.7 0 25.5-5.1 35.3-15.2-1-1-4.1-4-9.3-9.1-5.3-5.1-8.8-8.6-10.5-10.5s-4.2-5.1-7.3-9.3c-3.1-4.2-5.3-8.5-6.4-12.5-1.1-4.1-1.8-8.6-1.8-13.5 0-13.1 4.5-24.2 13.7-33.3 9.2-9.2 20.3-13.7 33.3-13.7 4.9 0 9.4 0.6 13.5 1.8s8.2 3.3 12.5 6.4c4.2 3.1 7.3 5.6 9.3 7.3 2 1.8 5.5 5.4 10.5 10.5 5.1 5.3 8 8.4 9.1 9.3 10.8-10.2 16.1-22.2 16.1-35.9z m344.7 345.5c0-13.1-4.5-24.2-13.7-33.3l-102-102c-9.2-9.2-20.3-13.7-33.3-13.7-13.7 0-25.5 5.3-35.3 15.7 1 1 4.1 4 9.3 9.1 5.3 5.1 8.8 8.6 10.5 10.5 1.8 2 4.2 5.1 7.3 9.3 3.1 4.2 5.3 8.5 6.4 12.5 1.1 4.1 1.8 8.6 1.8 13.5 0 13.1-4.5 24.2-13.7 33.3-9.2 9.2-20.3 13.7-33.3 13.7-4.9 0-9.4-0.5-13.5-1.8-4.1-1.1-8.2-3.3-12.5-6.4-4.2-3.1-7.3-5.6-9.3-7.3s-5.5-5.3-10.5-10.5-8-8.4-9.1-9.3c-10.8 10.1-16.2 22.1-16.2 35.8 0 13.1 4.5 24.2 13.7 33.3L665.4 804c8.9 8.9 19.9 13.2 33.3 13.2 13.1 0 24.2-4.2 33.3-12.8l72.1-71.5c9.2-8.9 13.8-19.9 13.8-32.7z" p-id="4989" /></symbol>'});l.a.add(p),a.default=p},"56d7":function(s,a,t){"use strict";t.r(a),t("cadf"),t("551c"),t("f751"),t("097d");var e=t("8bbf"),r=t.n(e),n=(t("4917"),{name:"app",data:function(){return{}},created:function(){var s=this,a=JSON.parse('[{"fileName":"VueAndReact.md","routeName":"VueAndReact","fileContent":"[title]:#(Vue、React的异同)[date]:#(2020-05-08&nbsp;21:36:53)[categories]:#(VUE)[description]:#(思考及总结Vue和React编程方式上的一些差异)[image]:#(https://i.loli.net/2020/05/27/mNj9uaV3Z7rz5lC.jpg)","timeDate":"20200508213653","wordCount":2039},{"fileName":"Vue渲染器.md","routeName":"Vue渲染器","fileContent":"[title]:#(Vue渲染器)[date]:#(2020-03-05&nbsp;22:35:53)[categories]:#(VUE)[description]:#(前方总有一条路,只是有时平坦,有时泥泞。)[image]:#(https://i.loli.net/2020/04/01/PEpLVY64bvAurDq.jpg)","timeDate":"20200305223553","wordCount":61123},{"fileName":"Netstjs.md","routeName":"Netstjs","fileContent":"[title]:#(NestJS文档整理)[date]:#(2020-01-08&nbsp;19:22:05)[categories]:#(Typescript)[description]:#(NestJS是用于构建高效，可扩展的Node.js服务器端应用程序的框架。<br>渐进式JavaScript，内置并完全支持TypeScript。<br>结合了OOP（面向对象编程），FP（函数式编程）和FRP（函数响应式编程）。)[image]:#(https://i.loli.net/2020/04/10/YbNBVixDGlqoULe.png)","timeDate":"20200108192205","wordCount":47336},{"fileName":"Typescript.md","routeName":"Typescript","fileContent":"[title]:#(Typescript文档笔记)[date]:#(2019-10-13&nbsp;22:15:42)[categories]:#(Typescript)[description]:#(TypeScript是JavaScript的一个超集，主要提供了类型系统和对ES6的支持，由Microsoft开发。)[image]:#(https://i.loli.net/2020/04/10/hwr6LAyOuk3lXWS.png)","timeDate":"20191013221542","wordCount":16052},{"fileName":"amway.md","routeName":"amway","fileContent":"[title]:#(安利一些我收藏的网站)[date]:#(2019-06-06&nbsp;14:20:52)[categories]:#(安利)[description]:#(给大家推荐一些我收藏夹里的网站。<br>幸福，是拿来分享的。)[image]:#(https://i.loli.net/2019/08/20/nvE9VFbAgptoJmk.jpg)","timeDate":"20190606142052","wordCount":1226},{"fileName":"FlexBox.md","routeName":"FlexBox","fileContent":"[title]:#(了解Flexbox弹性盒子布局)[date]:#(2019-03-11&nbsp;12:21:59)[categories]:#(响应式布局)[description]:#(Flexbox布局（也叫Flex布局，弹性盒子布局）可以使元素对齐变得容易，适合小规模布局。<br>在所有的道别里，我还是最喜欢明天见。)[image]:#(https://i.loli.net/2019/09/04/bDKS9RvLfl4ken5.jpg)","timeDate":"20190311122159","wordCount":3037},{"fileName":"响应式布局.md","routeName":"响应式布局","fileContent":"[title]:#(响应式Web设计)[date]:#(2019-01-19&nbsp;19:44:07)[categories]:#(响应式布局)[description]:#(页面的设计与开发应当根据用户行为以及设备环境[系统平台、屏幕尺寸、屏幕定向等]进行相应的响应和调整。<br>那年乱世如麻,愿你们来世拥有锦绣年华)[image]:#(https://i.loli.net/2019/08/28/P7BAScxR6IKYv4H.jpg)","timeDate":"20190119194407","wordCount":2775},{"fileName":"Iterator.md","routeName":"Iterator","fileContent":"[title]:#(你需要学习的Iterator和for...of循环)[date]:#(2019-01-02&nbsp;10:01:52)[categories]:#(ES6+)[description]:#(2018我尝试过去改变别人，直到摔得鼻青脸肿，我才清醒过来。2019只想去改变自己！<br>遍历山河，人间值得)[image]:#(https://i.loli.net/2019/08/27/kpMGesmcE5dJFND.jpg)","timeDate":"20190102100152","wordCount":14495},{"fileName":"Async.md","routeName":"Async","fileContent":"[title]:#(你需要学习的Async函数)[date]:#(2018-12-28&nbsp;14:10:46)[categories]:#(ES6+)[description]:#(位卑未敢忘忧国)[image]:#(https://i.loli.net/2019/08/30/5D1RqguHyVrdW6w.jpg)","timeDate":"20181228141046","wordCount":3819},{"fileName":"Generator.md","routeName":"Generator","fileContent":"[title]:#(你需要学习的Generator函数)[date]:#(2018-12-26&nbsp;16:22:53)[categories]:#(ES6+)[description]:#(一个人至少拥有一个梦想，有一个理由去坚强。)[image]:#(https://i.loli.net/2020/04/01/OakCPpTlvBwRGAJ.jpg)","timeDate":"20181226162253","wordCount":15614},{"fileName":"Promise.md","routeName":"Promise","fileContent":"[title]:#(你需要学习的Promise对象)[date]:#(2018-12-21&nbsp;10:42:11)[categories]:#(ES6+)[description]:#(沉下心来，去做一件事情，这便是快乐的时光。)[image]:#(https://i.loli.net/2020/04/01/iSIp8K4BRExfjzw.jpg)","timeDate":"20181221104211","wordCount":3250},{"fileName":"词法作用域.md","routeName":"词法作用域","fileContent":"[title]:#(词法作用域)[date]:#(2018-12-12&nbsp;20:18:31)[categories]:#(词法作用域)[description]:#(累的时候，家是你最好的归宿。)[image]:#(https://i.loli.net/2019/09/10/mbXA1uYWaCFdi5O.jpg)","timeDate":"20181212201831","wordCount":2210},{"fileName":"作用域.md","routeName":"作用域","fileContent":"[title]:#(作用域)[date]:#(2018-12-11&nbsp;15:15:29)[categories]:#(词法作用域)[description]:#(是序，这也是开始。有开始，当然就会有结束；而结束，是下一段旅程的开始。)[image]:#(https://i.loli.net/2020/03/30/kbJmV4grw8iRx2t.jpg)","timeDate":"20181211151529","wordCount":1187}]'),t=[];a.map(function(a){var e=a.fileContent,r=e.match(/\[title\]:#\((.*?)\)/)[1],n=e.match(/\[date\]:#\((.*?)\)/)[1],l=e.match(/\[categories\]:#\((.*?)\)/)[1],p=e.match(/\[description\]:#\((.*?)\)/)[1],v=e.match(/\[image\]:#\((.*?)\)/)[1];t.push({title:r,date:n,categories:l,description:p,image:v,timeDate:a.timeDate,routeName:a.routeName,wordCount:a.wordCount}),s.$store.commit("setMarkdownAll",t)})},mounted:function(){},methods:{}}),l=(t("5c0b"),t("2877")),p=Object(l.a)(n,function(){var s=this.$createElement,a=this._self._c||s;return a("div",{attrs:{id:"app"}},[a("router-view")],1)},[],!1,null,null,null).exports,v=t("6389"),_=t.n(v),c=(t("7f7f"),t("5118"),{name:"layout",components:{},data:function(){return{navIconOpen:!0,currentRouteName:"",topValue:"0"}},watch:{$route:{handler:function(s){this.currentRouteName=s.name},immediate:!0},navIconOpen:{handler:function(s){s?(TweenMax.to(".box-left",.4,{width:"32rem",minWidth:"20rem"}),TweenMax.to(".avatar",.4,{opacity:1})):TweenMax.to(".box-left",.4,{width:"0",minWidth:"0"})},immediate:!0}},filters:{},computed:{},created:function(){},mounted:function(){window.addEventListener("scroll",this.handleScroll,!0)},beforeDestroy:function(){window.removeEventListener("scroll",this.handleScroll,!1)},methods:{backTop:function(){TweenMax.to(window,.4,{scrollTo:0})},handleScroll:function(){var s=this;if(!this.handleScroll.debounce){var a=document.body.clientHeight||document.documentElement.clientHeight,t=this.$refs.boxHeight.scrollHeight,e=document.body.scrollTop||document.documentElement.scrollTop||window.pageXOffset;this.$nextTick(function(){var r=Math.round(e/(t-a)*100);e+a==t&&(r=100),0==e&&(r=0),s.topValue=100<r?100:r}),this.handleScroll.debounce=!0,this.$nextTick(function(){s.handleScroll.debounce=!1})}},goToMain:function(s){document.title="Timing | ".concat(s),this.$router.push({name:s})},navIconChange:function(){this.navIconOpen=!this.navIconOpen}}}),o=(t("d700"),Object(l.a)(c,function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("div",{staticClass:"app-container"},[t("div",{staticClass:"box-left"},[t("div",{staticClass:"box-left-content"},[t("div",{directives:[{name:"show",rawName:"v-show",value:s.navIconOpen,expression:"navIconOpen"}],staticClass:"box-left-info"},[t("img",{staticClass:"avatar",attrs:{src:"https://i.loli.net/2019/08/05/Lo9nyjTO5ZUN6im.jpg"}}),t("router-link",{staticClass:"nickname",attrs:{to:"/about"}},[s._v("Chirenmeng")]),t("div",{staticClass:"sketch"},[s._v("前端的博客")]),t("a",{staticClass:"github",attrs:{target:"_blank",href:"https://github.com/xstxhjh"}},[t("svg-icon",{staticClass:"github-icon",attrs:{"icon-class":"github"}}),t("span",[s._v("GitHub")])],1),t("a",{staticClass:"cc-by-link",attrs:{target:"_blank",href:"https://creativecommons.org/licenses/by-nc-sa/4.0/"}},[t("svg-icon",{staticClass:"cc-by-icon",attrs:{"icon-class":"cc-by-nc-sa"}})],1),t("div",{staticClass:"blogroll"},[t("svg-icon",{staticClass:"blogroll-icon",attrs:{"icon-class":"blogroll"}}),t("span",[s._v("友情链接")])],1),t("a",{staticClass:"blogroll-link",attrs:{target:"_blank",href:"https://github.com/30-seconds/30-seconds-of-code"}},[s._v("30-seconds-of-code")]),t("a",{staticClass:"blogroll-link",attrs:{target:"_blank",href:"https://juejin.im/post/59097cd7a22b9d0065fb61d2"}},[s._v("手摸手，带你用vue撸后台")])],1),t("div",{class:["nav-icon",s.navIconOpen?"open":""],on:{click:s.navIconChange}},[t("span"),t("span"),t("span")])])]),t("div",{ref:"boxHeight",staticClass:"box-center"},[t("div",{staticClass:"nav-views"},[t("div",{class:["nav-views-item","home"==s.currentRouteName?"nav-views-item-active":""],on:{click:function(a){return s.goToMain("home")}}},[s._v("Home")]),t("div",{class:["nav-views-item","archives"==s.currentRouteName?"nav-views-item-active":""],on:{click:function(a){return s.goToMain("archives")}}},[s._v("Archives")]),t("div",{class:["nav-views-item","categories"==s.currentRouteName?"nav-views-item-active":""],on:{click:function(a){return s.goToMain("categories")}}},[s._v("Categories")]),t("div",{class:["nav-views-item","about"==s.currentRouteName?"nav-views-item-active":""],on:{click:function(a){return s.goToMain("about")}}},[s._v("About")])]),t("router-view",{staticClass:"layout-content"}),s._m(0),t("transition",{attrs:{name:"fade",mode:"out-in"}},[t("div",{directives:[{name:"show",rawName:"v-show",value:0<s.topValue,expression:"topValue>0"}],staticClass:"ProgressBar",on:{click:s.backTop}},[t("span",[s._v(s._s(s.topValue)+"%")]),t("span",[s._v("☂")])])])],1)])},[function(){var s=this.$createElement,a=this._self._c||s;return a("div",{staticClass:"layout-end"},[a("a",{staticClass:"end-trapezoid",attrs:{href:"https://github.com/xstxhjh",target:"_blank"}},[a("span",[this._v("Chirenmeng")])])])}],!1,null,"4d053ab9",null).exports),h=t("75fc"),i=(t("ac6a"),{name:"MarkdownView",data:function(){return{anchor:[],offsetTop:0}},watch:{"$parent.topValue":{immediate:!(hljs.highlightCode=function(){var s=document.querySelectorAll("pre code");[].forEach.call(s,hljs.highlightBlock)}),handler:function(s,a){var t=document.body.scrollTop||document.documentElement.scrollTop||window.pageXOffset;this.offsetTop=t+180}}},methods:{anchorTo:function(s){s-=60,TweenMax.to(window,0,{scrollTo:s})}},mounted:function(){var s=this;hljs.highlightCode(),setTimeout(function(){var a=document.getElementsByClassName("router-post-body")[0].children,t=[],e=!1;Object(h.a)(a).map(function(s){"h1"==s.localName?(t.push({title:s.innerText,offsetTop:s.offsetTop,children:[]}),e=t[t.length-1]):"h2"==s.localName&&e.children.push({title:s.innerText,offsetTop:s.offsetTop,children:[]})}),s.anchor=t},1e3)},activated:function(){},updated:function(){}}),j=(t("2033"),t("6a34"),Object(l.a)(i,function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("div",{staticClass:"post-box"},[t("router-view",{staticClass:"router-post-body"}),t("div",{staticClass:"right-anchor"},s._l(s.anchor,function(a,e){return t("div",{key:e,staticClass:"right-anchor-link",class:{"right-anchor-link-actived":a.offsetTop<=s.offsetTop&&s.offsetTop<(e+1==s.anchor.length?1/0:s.anchor[e+1].offsetTop)}},[t("a",{on:{click:function(t){return s.anchorTo(a.offsetTop)}}},[s._v(s._s(a.title))]),s._l(a.children,function(a,e){return t("div",{key:e,ref:"anchorChildren"+e,refInFor:!0,staticClass:"right-anchor-link"},[t("a",{on:{click:function(t){return s.anchorTo(a.offsetTop)}}},[s._v(s._s(a.title))])])})],2)}),0)],1)},[],!1,null,"56a76933",null).exports),d=(t("28a5"),t("d203")),m=d.keys(),u=[];m.map(function(s){var a=s.split("/")[1],e=s.split(/\/(\S*)\./)[1];u.push({name:e,path:e,component:function(){return t("a383")("./".concat(a))}})});var y={mdRouteArr:u}.mdRouteArr;r.a.use(_.a);var g=[{path:"/",name:"Layout",meta:{title:"Layout"},component:o,redirect:"/home",children:[{path:"home",name:"home",meta:{title:"首页"},component:function(){return t.e("chunk-5dfbcbb8").then(t.bind(null,"6511"))}},{path:"about",name:"about",meta:{title:"关于"},component:function(){return t.e("chunk-f4babed2").then(t.bind(null,"754b"))}},{path:"archives",name:"archives",meta:{title:"归档"},component:function(){return t.e("chunk-0baa453e").then(t.bind(null,"ed61"))}},{path:"categories",name:"categories",meta:{title:"分类"},component:function(){return t.e("chunk-802b7fc4").then(t.bind(null,"5f29"))}}]},{path:"/md",name:"md",component:o,redirect:"/md/posts/".concat(y[0].path),children:[{path:"posts",name:"posts",component:j,children:y}]},{path:"*",name:"/errors",meta:{title:"errors"},component:function(){return t.e("chunk-6f792807").then(t.bind(null,"9dd6"))}}],w=new _.a({mode:"hash",base:"/",routes:g}),k=t("5880"),f=t.n(k);r.a.use(f.a);var b=new f.a.Store({state:{markdownAll:[]},mutations:{setMarkdownAll:function(s,a){s.markdownAll=a}},actions:{}}),x=t("cebe"),N=t.n(x).a.create({baseURL:Object({NODE_ENV:"production",VUE_APP_MD_FILES:'[{"fileName":"VueAndReact.md","routeName":"VueAndReact","fileContent":"[title]:#(Vue、React的异同)[date]:#(2020-05-08&nbsp;21:36:53)[categories]:#(VUE)[description]:#(思考及总结Vue和React编程方式上的一些差异)[image]:#(https://i.loli.net/2020/05/27/mNj9uaV3Z7rz5lC.jpg)","timeDate":"20200508213653","wordCount":2039},{"fileName":"Vue渲染器.md","routeName":"Vue渲染器","fileContent":"[title]:#(Vue渲染器)[date]:#(2020-03-05&nbsp;22:35:53)[categories]:#(VUE)[description]:#(前方总有一条路,只是有时平坦,有时泥泞。)[image]:#(https://i.loli.net/2020/04/01/PEpLVY64bvAurDq.jpg)","timeDate":"20200305223553","wordCount":61123},{"fileName":"Netstjs.md","routeName":"Netstjs","fileContent":"[title]:#(NestJS文档整理)[date]:#(2020-01-08&nbsp;19:22:05)[categories]:#(Typescript)[description]:#(NestJS是用于构建高效，可扩展的Node.js服务器端应用程序的框架。<br>渐进式JavaScript，内置并完全支持TypeScript。<br>结合了OOP（面向对象编程），FP（函数式编程）和FRP（函数响应式编程）。)[image]:#(https://i.loli.net/2020/04/10/YbNBVixDGlqoULe.png)","timeDate":"20200108192205","wordCount":47336},{"fileName":"Typescript.md","routeName":"Typescript","fileContent":"[title]:#(Typescript文档笔记)[date]:#(2019-10-13&nbsp;22:15:42)[categories]:#(Typescript)[description]:#(TypeScript是JavaScript的一个超集，主要提供了类型系统和对ES6的支持，由Microsoft开发。)[image]:#(https://i.loli.net/2020/04/10/hwr6LAyOuk3lXWS.png)","timeDate":"20191013221542","wordCount":16052},{"fileName":"amway.md","routeName":"amway","fileContent":"[title]:#(安利一些我收藏的网站)[date]:#(2019-06-06&nbsp;14:20:52)[categories]:#(安利)[description]:#(给大家推荐一些我收藏夹里的网站。<br>幸福，是拿来分享的。)[image]:#(https://i.loli.net/2019/08/20/nvE9VFbAgptoJmk.jpg)","timeDate":"20190606142052","wordCount":1226},{"fileName":"FlexBox.md","routeName":"FlexBox","fileContent":"[title]:#(了解Flexbox弹性盒子布局)[date]:#(2019-03-11&nbsp;12:21:59)[categories]:#(响应式布局)[description]:#(Flexbox布局（也叫Flex布局，弹性盒子布局）可以使元素对齐变得容易，适合小规模布局。<br>在所有的道别里，我还是最喜欢明天见。)[image]:#(https://i.loli.net/2019/09/04/bDKS9RvLfl4ken5.jpg)","timeDate":"20190311122159","wordCount":3037},{"fileName":"响应式布局.md","routeName":"响应式布局","fileContent":"[title]:#(响应式Web设计)[date]:#(2019-01-19&nbsp;19:44:07)[categories]:#(响应式布局)[description]:#(页面的设计与开发应当根据用户行为以及设备环境[系统平台、屏幕尺寸、屏幕定向等]进行相应的响应和调整。<br>那年乱世如麻,愿你们来世拥有锦绣年华)[image]:#(https://i.loli.net/2019/08/28/P7BAScxR6IKYv4H.jpg)","timeDate":"20190119194407","wordCount":2775},{"fileName":"Iterator.md","routeName":"Iterator","fileContent":"[title]:#(你需要学习的Iterator和for...of循环)[date]:#(2019-01-02&nbsp;10:01:52)[categories]:#(ES6+)[description]:#(2018我尝试过去改变别人，直到摔得鼻青脸肿，我才清醒过来。2019只想去改变自己！<br>遍历山河，人间值得)[image]:#(https://i.loli.net/2019/08/27/kpMGesmcE5dJFND.jpg)","timeDate":"20190102100152","wordCount":14495},{"fileName":"Async.md","routeName":"Async","fileContent":"[title]:#(你需要学习的Async函数)[date]:#(2018-12-28&nbsp;14:10:46)[categories]:#(ES6+)[description]:#(位卑未敢忘忧国)[image]:#(https://i.loli.net/2019/08/30/5D1RqguHyVrdW6w.jpg)","timeDate":"20181228141046","wordCount":3819},{"fileName":"Generator.md","routeName":"Generator","fileContent":"[title]:#(你需要学习的Generator函数)[date]:#(2018-12-26&nbsp;16:22:53)[categories]:#(ES6+)[description]:#(一个人至少拥有一个梦想，有一个理由去坚强。)[image]:#(https://i.loli.net/2020/04/01/OakCPpTlvBwRGAJ.jpg)","timeDate":"20181226162253","wordCount":15614},{"fileName":"Promise.md","routeName":"Promise","fileContent":"[title]:#(你需要学习的Promise对象)[date]:#(2018-12-21&nbsp;10:42:11)[categories]:#(ES6+)[description]:#(沉下心来，去做一件事情，这便是快乐的时光。)[image]:#(https://i.loli.net/2020/04/01/iSIp8K4BRExfjzw.jpg)","timeDate":"20181221104211","wordCount":3250},{"fileName":"词法作用域.md","routeName":"词法作用域","fileContent":"[title]:#(词法作用域)[date]:#(2018-12-12&nbsp;20:18:31)[categories]:#(词法作用域)[description]:#(累的时候，家是你最好的归宿。)[image]:#(https://i.loli.net/2019/09/10/mbXA1uYWaCFdi5O.jpg)","timeDate":"20181212201831","wordCount":2210},{"fileName":"作用域.md","routeName":"作用域","fileContent":"[title]:#(作用域)[date]:#(2018-12-11&nbsp;15:15:29)[categories]:#(词法作用域)[description]:#(是序，这也是开始。有开始，当然就会有结束；而结束，是下一段旅程的开始。)[image]:#(https://i.loli.net/2020/03/30/kbJmV4grw8iRx2t.jpg)","timeDate":"20181211151529","wordCount":1187}]',BASE_URL:""}).VUE_APP_BASE_API,timeout:1e4});N.interceptors.request.use(function(s){return s},function(s){return s}),N.interceptors.response.use(function(s){return s},function(s){return Promise.reject(s)});var C=N;w.beforeEach(function(s,a,t){Pace.start(),TweenMax.to(window,0,{scrollTo:0}),t()}),w.afterEach(function(){Pace.stop()});var V={name:"SvgIcon",props:{iconClass:{type:String,required:!0},className:{type:String,default:""}},computed:{iconName:function(){return"#icon-".concat(this.iconClass)},svgClass:function(){return this.className?"svg-icon "+this.className:"svg-icon"}}},E=(t("affb"),Object(l.a)(V,function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("svg",s._g({class:s.svgClass,attrs:{"aria-hidden":"true"}},s.$listeners),[t("use",{attrs:{"xlink:href":s.iconName}})])},[],!1,null,"58bba035",null).exports);r.a.component("svg-icon",E);var S,T=t("cfd9");(S=T).keys().map(S),r.a.prototype.$TweenMax=TweenMax,r.a.prototype.$axios=C,r.a.config.productionTip=!1,new r.a({router:w,store:b,render:function(s){return s(p)}}).$mount("#app")},5880:function(s,a){s.exports=Vuex},"5c0b":function(s,a,t){"use strict";var e=t("5e27");t.n(e).a},"5e27":function(s,a,t){},6389:function(s,a){s.exports=VueRouter},"6a34":function(s,a,t){"use strict";var e=t("1bb5");t.n(e).a},"6a8a":function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("一、Promise 的含义")]),t("p",[s._v("摘自：MDN —— "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E6%8F%8F%E8%BF%B0"}},[s._v("Promise")])]),t("blockquote",[t("p",[t("strong",[s._v("Promise")]),s._v(" 对象是一个代理对象（代理一个值），被代理的值在 Promise 对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的 promise 对象")]),t("p",[s._v("一个 Promise 有以下几种状态:")]),t("ul",[t("li",[t("p",[s._v("pending: 初始状态，既不是成功，也不是失败状态。")])]),t("li",[t("p",[s._v("fulfilled: 意味着操作成功完成。")])]),t("li",[t("p",[s._v("rejected: 意味着操作失败。")])])]),t("p",[s._v("pending 状态的 Promise 对象可能触发 fulfilled 状态并传递一个值给相应的状态处理方法，也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then 方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当 Promise 状态为 fulfilled 时，调用 then 的 onfulfilled 方法，当 Promise 状态为 rejected 时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。")]),t("p",[s._v("因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回 promise 对象， 所以它们可以被链式调用。")])]),t("h1",[s._v("二、基本用法")]),t("h2",[s._v("简单的例子")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myFirstPromise = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Promise'")]),s._v(")\n  setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n    resolve("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Resolved.'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//代码正常执行！")]),s._v("\n  }, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("100")]),s._v(")\n})\n\nmyFirstPromise.then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("successMessage")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//successMessage的值是上面调用resolve(...)方法传入的值.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(successMessage)\n})\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hi!'")]),s._v(")\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 上述代码会依次打印")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Hi!")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Resolved.")]),s._v("\n")])]),t("p",[s._v("传递到 then 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后才开始执行:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" wait = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("ms")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve")]),s._v(" =>")]),s._v(" setTimeout(resolve, ms))\n\nwait().then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("))\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve()\n  .then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("))\n  .then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("))\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1, 2, 3, 4")]),s._v("\n")])]),t("h2",[s._v("Catch 的后续链式操作")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Initial'")]),s._v(")\n\n  resolve()\n})\n  .then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Error")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Something failed'")]),s._v(")\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Do this'")]),s._v(")\n  })\n  .catch("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Do that'")]),s._v(")\n  })\n  .then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Do this whatever happened before'")]),s._v(")\n  })\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 上述代码会依次打印")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Initial")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Do that")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Do this whatever happened before")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 注意，由于“Something failed”错误导致了拒绝操作，所以“Do this”文本没有被输出。")]),s._v("\n")])]),t("h2",[s._v("Promise.prototype.done()")]),t("p",[s._v("Promise 对象的回调链，不管以 then 方法或 catch 方法结尾，要是最后一个方法抛出错误，都有可能无法捕捉到（因为 Promise 内部的错误不会冒泡到全局）。因此，我们可以提供一个 done 方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。")]),t("h2",[s._v("Promise.prototype.finally()")]),t("p",[s._v("finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。它与 done 方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。")]),t("h2",[s._v("Promise.all()")]),t("p",[s._v("Promise.all()接受一个由 promise 任务组成的数组，可以同时处理多个 promise 任务，当所有的任务都执行完成时，Promise.all()返回 resolve，但当有一个失败(reject)，则返回失败的信息，即使其他 promise 执行成功，也会返回失败。")]),t("h2",[s._v("Promise.race()")]),t("p",[s._v("顾名思义，Promse.race()就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。")]),t("h2",[s._v("Promise.resolve()")]),t("p",[s._v("有时需要将现有对象转为 Promise 对象，Promise.resolve 方法就起到这个作用。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等价于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve")]),s._v(" =>")]),s._v(" resolve("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v("))\n\np.then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("s")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(s) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// foo")]),s._v("\n})\n")])]),t("h2",[s._v("Promise.reject()")]),t("p",[s._v("Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reject("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'出错了'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等同于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" reject("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'出错了'")]),s._v("))\n\np.then("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("s")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(s) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 出错了")]),s._v("\n})\n")])])])}],!1,null,null,null);a.default=r.exports},"6dfc":function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("编程思想对比")]),t("p",[s._v("React就是MVC里的V,只专注视图层，而Vue才算是MVVM框架，双向绑定是特色之一。")]),t("p",[t("strong",[s._v("React")])]),t("ul",[t("li",[s._v("React + Redux 可以实现 MVC  的思想")]),t("li",[s._v("React + Mobx  可以实现 MVVM 的思想")]),t("li",[s._v("整体思想偏向函数式编程，all in js")])]),t("p",[t("strong",[s._v("Vue")])]),t("ul",[t("li",[s._v("Vue 本质是MVVM框架，由MVC发展而来")]),t("li",[s._v("整体思想拥抱经典web应用 html(结构)、css(表现)、js(行为) 的分离")])]),t("h1",[s._v("组件化")]),t("p",[s._v("Vue 与 React 都推崇组件式的开发理念，数据传递都是单向的。")]),t("h2",[s._v("组件的运用")]),t("p",[s._v("Vue 组件定义使用 *.vue 文件将 html、css、js 结合在一起。templates 模板语法内置了很多强大的功能，需要阅读文档，但后续便捷开发。")]),t("p",[s._v("React 使用 jsx/js 文件来表示组件，通过 js 来操作一切。")]),t("h2",[s._v("父子组件数据传递")]),t("p",[s._v("Vue 使用 props 传递数据，$emit触发自定义事件 的方式")]),t("p",[s._v("React 使用 props 传递数据和回调函数 的方式")]),t("h2",[s._v("跨组件数据传递")]),t("p",[s._v("Vue 通过 provide / inject 实现")]),t("p",[s._v("React 通过 context 实现")]),t("h2",[s._v("class与style处理")]),t("p",[s._v("Vue 对 class 与 style 特意做了增强，可以传字符串、对象、数组")]),t("p",[s._v("React 使用 className 用于指定 class，不能直接为组件指定 class")]),t("h2",[s._v("组件生命周期")]),t("p",[s._v("Vue 的生命周期")]),t("ul",[t("li",[s._v("beforeCreate")]),t("li",[s._v("created")]),t("li",[s._v("beforeMount")]),t("li",[s._v("mounted")]),t("li",[s._v("beforeUpdate")]),t("li",[s._v("updated")]),t("li",[s._v("beforeDestroy")]),t("li",[s._v("destroyed")])]),t("p",[s._v("React 的生命周期")]),t("ul",[t("li",[s._v("constructor")]),t("li",[s._v("getDerivedStateFromProps")]),t("li",[s._v("shouldComponentUpdate")]),t("li",[s._v("componentWillUnmount")]),t("li",[s._v("componentDidUnMount")]),t("li",[s._v("componentDidUpdate")]),t("li",[s._v("render")])]),t("h2",[s._v("阻止默认行为/阻止冒泡")]),t("p",[s._v("Vue 事件修饰符")]),t("ul",[t("li",[s._v("stop")]),t("li",[s._v("prevent\n或者类似于react的方式，使用 $event")])]),t("p",[s._v("React")]),t("ul",[t("li",[s._v("e.preventDefault()")]),t("li",[s._v("e.stopPropagation()")])]),t("p",[s._v("Vue 通过各种修饰符来帮助开发人员，React 贴近于原生 Dom 元素的事件处理。")]),t("h1",[s._v("Portal、Fragment 方式的挂载")]),t("h2",[s._v("传送门 Portal")]),t("p",[s._v("React v16之前 unstable_renderSubtreeIntoContainer")]),t("p",[s._v("React v16 createPortal，不需要牵扯到componentDidMount、componentDidUpdate，也不用调用API清理Portal")]),t("p",[s._v("在vue2 中 无原生支持 Portal 的实现，只能通过三方/手写插件。\nvue3 已经实现。")]),t("h2",[s._v("片段 Fragment")]),t("p",[s._v("React v16 <React.Fragment></React.Fragment>")]),t("p",[s._v("vue2 无原生支持，vue3 已实现。")]),t("h1",[s._v("路由 Router")]),t("p",[s._v("vue-cli 通过配置统一管理页面路由，通过全局配置的router直接调用")]),t("p",[s._v("create-react-app 嵌入到组件里面分配路由，使用方法:")]),t("ul",[t("li",[s._v("父组件需要把 history 传递给子组件")]),t("li",[s._v("或者 withRouter 高阶组件将 history, location, match 放入 props 属性中")]),t("li",[s._v("或者 React-Router 的 Hooks， useHistory, useLocation, useParams, useRouteMatch")])]),t("p",[s._v("umi (react)  通过配置统一管理页面路由，使用方法：")]),t("ul",[t("li",[s._v("同 create-react-app")])]),t("h1",[s._v("搜索引擎优化")]),t("p",[s._v("Google/Yahoo/Bing/Duck Duck Go 都能抓取出 JS 渲染后的内容作为文章的描述\n但百度的搜索引擎不能")]),t("p",[t("a",{attrs:{href:"https://www.freecodecamp.org/news/seo-vs-react-is-it-neccessary-to-render-react-pages-in-the-backend-74ce5015c0c9/"}},[s._v("https://www.freecodecamp.org/news/seo-vs-react-is-it-neccessary-to-render-react-pages-in-the-backend-74ce5015c0c9/")])])])}],!1,null,null,null);a.default=r.exports},"76f4":function(s,a,t){"use strict";t.r(a);var e=t("e017"),r=t.n(e),n=t("21a1"),l=t.n(n),p=new r.a({id:"icon-github",use:"icon-github-usage",viewBox:"0 0 1024 1024",content:'<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" id="icon-github"><path d="M64.6 512c0 195.6 125.4 361.9 300.1 422.9 23.5 5.9 19.9-10.8 19.9-22.2v-77.6c-135.8 15.9-141.3-74-150.5-89-18.5-31.5-61.9-39.5-49-54.5 31-15.9 62.5 4 98.9 58 26.4 39.1 77.9 32.5 104.1 26 5.7-23.5 17.9-44.5 34.7-60.9-140.7-25.2-199.4-111.1-199.4-213.3 0-49.5 16.4-95.1 48.4-131.8-20.4-60.6 1.9-112.4 4.9-120.1 58.2-5.2 118.5 41.6 123.3 45.3 33.1-8.9 70.8-13.7 112.9-13.7 42.4 0 80.3 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.4-43.9 2.9 7.7 24.7 58.3 5.5 118.1 32.5 36.8 49 82.8 49 132.4 0 102.3-59 188.3-200.2 213.2 23.5 23.3 38.1 55.5 38.1 91.1v112.7c0.8 9 0 17.9 15.1 17.9C832.7 877 960.4 709.4 960.4 512.1c0-247.5-200.6-447.9-447.9-447.9C265 64.1 64.6 264.5 64.6 512z" fill="" p-id="2111" data-spm-anchor-id="a313x.7781069.0.i2" class="selected" /></symbol>'});l.a.add(p),a.default=p},"7de8":function(s,a,t){s.exports=t.p+"img/vnode-types.7d99313d.png"},"7e2e":function(s,a,t){"use strict";t.r(a);var e=t("e017"),r=t.n(e),n=t("21a1"),l=t.n(n),p=new r.a({id:"icon-cc-by-nc-sa",use:"icon-cc-by-nc-sa-usage",viewBox:"0 0 80 15",content:'<symbol xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" viewBox="0 0 80 15" id="icon-cc-by-nc-sa"><g inkscape:label="Layer 1" inkscape:groupmode="layer" id="icon-cc-by-nc-sa_layer1"><g id="icon-cc-by-nc-sa_BY-NC-SA" transform="matrix(0.9875019,0,0,0.9333518,-323.90064,-331.6114)"><g transform="translate(158,118)" id="icon-cc-by-nc-sa_g3729"><rect y="237.86218" x="170.5" height="15" width="80" id="icon-cc-by-nc-sa_rect3731" style="fill:#fff;fill-opacity:1;stroke:#000;stroke-width:1.04161763;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" /><rect style="fill:#000;fill-opacity:1;stroke:none;stroke-width:.92243534;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" id="icon-cc-by-nc-sa_rect3733" width="77" height="12" x="172" y="239.36218" /><path sodipodi:nodetypes="cccscc" id="icon-cc-by-nc-sa_path3735" d="M 171.99996,239.37505 L 171.99996,251.37505 L 192.33474,251.37505 C 193.64339,249.62474 194.52652,247.59057 194.52652,245.37505 C 194.52652,243.17431 193.65859,241.1179 192.36599,239.37505 L 171.99996,239.37505 z" style="fill:#abb1aa;fill-opacity:1;stroke:none;stroke-width:1;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:.46913578" /><g clip-path="url(#clipPath3442)" transform="matrix(0.9612533,0,0,0.9612533,6.8341566,9.5069994)" id="icon-cc-by-nc-sa_g3737"><path style="opacity:1;fill:#fff" d="M 190.06417,245.36206 C 190.06667,249.25405 186.91326,252.41072 183.02153,252.41323 C 179.12979,252.41572 175.97262,249.26256 175.97036,245.3706 C 175.97036,245.36783 175.97036,245.36507 175.97036,245.36206 C 175.9681,241.47007 179.12126,238.3134 183.013,238.31113 C 186.90524,238.30864 190.06191,241.46181 190.06417,245.3538 C 190.06417,245.35628 190.06417,245.35929 190.06417,245.36206 z" rx="22.939548" type="arc" cy="264.3577" ry="22.939548" cx="296.35416" id="icon-cc-by-nc-sa_path3739" /><path style="opacity:1" id="icon-cc-by-nc-sa_path3741" d="M 188.74576,239.62226 C 190.30843,241.18492 191.08988,243.09869 191.08988,245.36206 C 191.08988,247.62592 190.32197,249.51913 188.78615,251.04165 C 187.15627,252.64521 185.22995,253.44672 183.00722,253.44672 C 180.81132,253.44672 178.91837,252.65172 177.32887,251.06174 C 175.73912,249.47198 174.94436,247.57226 174.94436,245.36206 C 174.94436,243.15235 175.73912,241.23908 177.32887,239.62226 C 178.87799,238.0591 180.77094,237.27764 183.00722,237.27764 C 185.2706,237.27764 187.18312,238.05909 188.74576,239.62226 z M 178.38093,240.67355 C 177.05978,242.008 176.39945,243.57116 176.39945,245.36429 C 176.39945,247.15694 177.05326,248.70682 178.36062,250.01393 C 179.66822,251.32153 181.22487,251.97509 183.03105,251.97509 C 184.83724,251.97509 186.40716,251.31502 187.74161,249.99412 C 189.0086,248.76725 189.64234,247.22467 189.64234,245.36429 C 189.64234,243.51799 188.99831,241.95084 187.71101,240.66354 C 186.42396,239.37649 184.86406,238.7327 183.03105,238.7327 C 181.19804,238.73271 179.64767,239.37975 178.38093,240.67355 z M 181.85761,244.57559 C 181.65573,244.13545 181.35354,243.91525 180.95051,243.91525 C 180.23802,243.91525 179.8819,244.39501 179.8819,245.35404 C 179.8819,246.31328 180.23802,246.79255 180.95051,246.79255 C 181.421,246.79255 181.75705,246.55908 181.95869,246.09111 L 182.94629,246.61701 C 182.47555,247.45339 181.76934,247.87168 180.82763,247.87168 C 180.10136,247.87168 179.51953,247.64899 179.08265,247.20409 C 178.64502,246.7587 178.42684,246.14477 178.42684,245.36206 C 178.42684,244.59313 178.65204,243.98271 179.10271,243.53056 C 179.55338,243.07838 180.11463,242.8524 180.7875,242.8524 C 181.78288,242.8524 182.49561,243.24465 182.92647,244.02835 L 181.85761,244.57559 z M 186.50398,244.57559 C 186.30184,244.13545 186.00567,243.91525 185.61517,243.91525 C 184.88839,243.91525 184.52474,244.39501 184.52474,245.35404 C 184.52474,246.31328 184.88839,246.79255 185.61517,246.79255 C 186.08642,246.79255 186.41644,246.55908 186.6048,246.09111 L 187.61447,246.61701 C 187.14448,247.45339 186.43926,247.87168 185.49931,247.87168 C 184.77403,247.87168 184.19346,247.64899 183.75683,247.20409 C 183.32096,246.7587 183.10254,246.14477 183.10254,245.36206 C 183.10254,244.59313 183.32422,243.98271 183.76737,243.53056 C 184.21026,243.07838 184.77404,242.8524 185.4592,242.8524 C 186.45282,242.8524 187.16455,243.24465 187.5939,244.02835 L 186.50398,244.57559 z" /></g></g><path id="icon-cc-by-nc-sa_text3743" d="M 357.4197,362.68502 C 357.66518,362.68502 357.85131,362.63144 357.9781,362.52427 C 358.10488,362.41711 358.16827,362.25904 358.16828,362.05005 C 358.16827,361.84377 358.10488,361.68704 357.9781,361.57986 C 357.85131,361.47002 357.66518,361.4151 357.4197,361.4151 L 356.55784,361.4151 L 356.55784,362.68502 L 357.4197,362.68502 M 357.4723,365.30926 C 357.78522,365.30926 358.0199,365.24363 358.17637,365.11235 C 358.33552,364.98107 358.4151,364.78281 358.4151,364.51758 C 358.4151,364.2577 358.33686,364.06346 358.18041,363.93485 C 358.02396,363.80358 357.78792,363.73793 357.4723,363.73793 L 356.55784,363.73793 L 356.55784,365.30926 L 357.4723,365.30926 M 358.92089,363.15119 C 359.25538,363.24765 359.51434,363.42581 359.69779,363.68569 C 359.88121,363.94557 359.97293,364.26439 359.97294,364.64215 C 359.97293,365.22086 359.776,365.6522 359.38217,365.93619 C 358.98833,366.22019 358.38947,366.36218 357.5856,366.36218 L 355.00001,366.36218 L 355.00001,360.36218 L 357.33878,360.36218 C 358.17771,360.36218 358.78466,360.48811 359.15962,360.73994 C 359.53727,360.99179 359.7261,361.39501 359.7261,361.94959 C 359.7261,362.24162 359.65732,362.49078 359.51975,362.69708 C 359.38217,362.9007 359.18255,363.05207 358.92089,363.15119 M 359.83746,360.36218 L 361.54096,360.36218 L 362.91671,362.50016 L 364.29245,360.36218 L 366,360.36218 L 363.69764,363.83438 L 363.69764,366.36218 L 362.13982,366.36218 L 362.13982,363.83438 L 359.83746,360.36218 M 365.15837,363.40839 L 367.69946,363.40839 L 367.69946,364.57785 L 365.15837,364.57785 L 365.15837,363.40839 M 368.9174,360.36218 L 370.65732,360.36218 L 372.85447,364.47738 L 372.85447,360.36218 L 374.33138,360.36218 L 374.33138,366.36218 L 372.59146,366.36218 L 370.3943,362.24698 L 370.3943,366.36218 L 368.9174,366.36218 L 368.9174,360.36218 M 380.65173,366.03264 C 380.36579,366.17999 380.0677,366.29118 379.75749,366.3662 C 379.44727,366.44122 379.12357,366.47872 378.78638,366.47872 C 377.78019,366.47872 376.98307,366.20009 376.395,365.64282 C 375.80693,365.08288 375.5129,364.32468 375.5129,363.36821 C 375.5129,362.40907 375.80693,361.65087 376.395,361.0936 C 376.98307,360.53366 377.78019,360.25368 378.78638,360.25367 C 379.12357,360.25368 379.44727,360.29119 379.75749,360.3662 C 380.0677,360.44122 380.36579,360.55241 380.65173,360.69976 L 380.65173,361.94156 C 380.36309,361.74597 380.0785,361.60265 379.79796,361.51155 C 379.5174,361.42046 379.22203,361.37492 378.91181,361.37491 C 378.35611,361.37492 377.91911,361.55174 377.6008,361.90538 C 377.28249,362.25904 377.12333,362.74665 377.12333,363.36821 C 377.12333,363.9871 377.28249,364.47337 377.6008,364.82702 C 377.91911,365.18067 378.35611,365.35749 378.91181,365.35749 C 379.22203,365.35749 379.5174,365.31195 379.79796,365.22086 C 380.0785,365.12976 380.36309,364.98643 380.65173,364.79085 L 380.65173,366.03264 M 381.82921,363.40839 L 384.3703,363.40839 L 384.3703,364.57785 L 381.82921,364.57785 L 381.82921,363.40839 M 389.79236,360.55107 L 389.79236,361.82099 C 389.46056,361.67364 389.13686,361.56245 388.82125,361.48743 C 388.50563,361.41242 388.20756,361.37492 387.92701,361.37491 C 387.55475,361.37492 387.2796,361.42581 387.10156,361.52762 C 386.92352,361.62943 386.8345,361.7875 386.83451,362.00183 C 386.8345,362.16259 386.89385,362.28851 387.01255,362.3796 C 387.13393,362.46801 387.35244,362.54437 387.66804,362.60866 L 388.33165,362.74129 C 389.00333,362.87525 389.4808,363.07886 389.76405,363.35214 C 390.04728,363.62541 390.1889,364.01389 390.18891,364.51758 C 390.1889,365.17933 389.99063,365.67229 389.5941,365.99647 C 389.20025,366.31797 388.59735,366.47872 387.78539,366.47872 C 387.40234,366.47872 387.01794,366.44255 386.63219,366.37022 C 386.24644,366.29788 385.86069,366.19072 385.47494,366.04871 L 385.47494,364.74262 C 385.86069,364.94624 386.23295,365.10029 386.59173,365.20478 C 386.9532,365.30658 387.30118,365.35749 387.63567,365.35749 C 387.97556,365.35749 388.23588,365.30123 388.41662,365.18871 C 388.59735,365.07618 388.68771,364.91543 388.68772,364.70646 C 388.68771,364.51891 388.62567,364.37424 388.50159,364.27242 C 388.38019,364.17062 388.13607,364.07954 387.76921,363.99915 L 387.1663,363.86653 C 386.56205,363.73793 386.11965,363.53298 385.83911,363.25167 C 385.56127,362.97035 385.42234,362.59125 385.42234,362.11435 C 385.42234,361.51691 385.61656,361.05743 386.00501,360.73592 C 386.39346,360.41443 386.95185,360.25368 387.68019,360.25367 C 388.01198,360.25368 388.35322,360.27914 388.70391,360.33003 C 389.05459,360.37826 389.4174,360.45194 389.79236,360.55107 M 395.22657,365.26908 L 392.79069,365.26908 L 392.40629,366.36218 L 390.84037,366.36218 L 393.07798,360.36218 L 394.93524,360.36218 L 397.17286,366.36218 L 395.60693,366.36218 L 395.22657,365.26908 M 393.17914,364.15588 L 394.83409,364.15588 L 394.00863,361.76875 L 393.17914,364.15588" style="font-size:8.26px;font-style:normal;font-weight:700;fill:#fff;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;font-family:\'Bitstream Vera Sans\'" /></g></g></symbol>'});l.a.add(p),a.default=p},"7f85":function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("响应式 Web 概念")]),t("p",[s._v("响应式 Web 设计是一个让用户通过各种尺寸的设备浏览网站获得良好的视觉效果的方法。")]),t("p",[s._v("例如，您先在计算机显示器上浏览一个网站，然后在智能手机上浏览，智能手机的屏幕尺寸远小于计算机显示器，但是你却没有感觉到任何差别，两者的用户体验几乎一样，这说明这个网站在响应式设计方面做得很好。")]),t("h1",[s._v("方法")]),t("h2",[s._v("设置 Meta 标签")]),t("p",[s._v("大多数移动浏览器将 HTML 页面放大为宽的视图以符合屏幕分辨率。你可以使用视图的 meta 标签来进行重置。下面的视图标签告诉浏览器，使用设备的宽度作为视图宽度并禁止初始的缩放。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-html"}},[t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("meta")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"viewport"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("content")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"')]),s._v("\n/>")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("meta")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("http-equiv")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"X-UA-Compatible"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("content")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"IE=edge,chrome=1"')]),s._v(" />")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("meta")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"HandheldFriendly"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("content")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"true"')]),s._v(" />")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("\x3c!-- \nwidth=device-width--宽度为设备宽度\n如果你的页面宽度小于设备宽度，就需要修改一下这个属性，不然的话会出现可以页面左右滑动\n\ninitial-scale - 初始的缩放比例\n\nminimum-scale - 允许用户缩放到的最小比例   \n\nmaximum-scale - 允许用户缩放到的最大比例  \n\nuser-scalable - 用户是否可以手动缩放\n--\x3e")]),s._v("\n")])]),t("h2",[s._v("通过媒介查询来设置样式")]),t("p",[s._v("Media Queries 是响应式设计的核心，它根据条件告诉浏览器如何为指定视图宽度渲染页面。")]),t("p",[s._v("@media 引入")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[s._v("@media screen and (min-width: 1200px) {\n  /* 如果视窗宽度 >= 1200px，將会加载此 CSS。 */\n}\n@media screen and (min-width: 768px) and (max-width: 979px) {\n  /* 如果视窗宽度介于 768px ~ 979px，将会载入此 CSS。 */\n}\n@media screen and (max-width: 767px) {\n  /* 如果视窗宽度 <= 768px，将会载入此 CSS。 */\n}\n@media screen and (max-device-width: 480px) {\n  /* 若视窗宽度 <= 480px，则载入此CSS。 */\n}\n")])]),t("p",[s._v("link 方法引入")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-html"}},[t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("link")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("rel")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"stylesheet"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("media")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"screen and (max-width: 600px)"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("href")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"small.css"')]),s._v(" />")]),s._v("\n")])]),t("blockquote",[t("p",[s._v("补充：media query 中的 not、only、all 等关键字")]),t("p",[s._v("not: not 是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）")]),t("p",[s._v("only: 用来定某种特别的媒体类型。对于支持 Media Queries 的移动设备来说，如果存在 only 关键字，移动设备的 Web 浏览器会忽略 only 关键字并直接根据后面的表达式应用样式文件。对于不支持 Media Queries 的设备但能够读取 Media Type 类型的 Web 浏览器，遇到 only 关键字时会忽略这个样式文件。")]),t("p",[s._v("all: 所有设备，这个应该经常看到")])]),t("h2",[s._v("字体设置")]),t("p",[s._v("一个响应式的字体应关联它的父容器的宽度，这样才能适应客户端屏幕。")]),t("p",[s._v("1、确定基数：一般 10px，自己记住就行，不用写进代码里")]),t("p",[s._v("2、html {font-size:百分数;} 百分数=基数/16")]),t("p",[s._v("基数 10 百分数 62.5%")]),t("p",[s._v("基数 14 百分数 87.5%")]),t("p",[s._v("3、px 换算 rem 公式=想要的 px 值/基数")]),t("p",[s._v("也就是说，当你设置 html {font-size:62.5%;}，你想给容器里的文字设置字号 14px，换算成 rem 就是 14px/10——1.4rem 这样子")]),t("p",[s._v("如果使用 em 单位的时候，计算机就会自己去找你 body 设置的字体大小")]),t("p",[s._v("body {font-size:14px;} 这样设置后，如果我想要一个 14px 的外边距，我就用 14px/14px——1em 这样啦。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[s._v("html {\n  font-size: 100%;\n}\n/* 完成后，你可以定义响应式字体： */\n@media (min-width: 640px) {\n  body {\n    font-size: 1rem;\n  }\n}\n@media (min-width: 960px) {\n  body {\n    font-size: 1.2rem;\n  }\n}\n@media (min-width: 1200px) {\n  body {\n    font-size: 1.5rem;\n  }\n}\n")])]),t("h2",[s._v("图片自适应")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[s._v(".img-responsive {\n  display: inline-block;\n  height: auto;\n  max-width: 100%;\n}\n\n/* 可以让图像按比例缩放，不超过其父元素的尺寸。 */\n")])]),t("h2",[s._v("百分比")]),t("p",[s._v("一般的子元素的百分比完全相对于直接父元素，height 百分比相对于 height，width 百分比相对于 width。")]),t("p",[s._v("以下是特殊的情况：")]),t("p",[s._v("1、子元素的 top 和 bottom、left、right 如果设置百分比，则相对于直接非 static 定位(默认定位)的父元素的高度")]),t("p",[s._v("2、padding 和 margin 都是只相对直接父元素的 width。")]),t("p",[s._v("3、border- radius 是相对于自身的宽度。")]),t("blockquote",[t("p",[s._v("导言:")]),t("p",[s._v("通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局。")]),t("p",[s._v("但是媒体查询的缺点也很明显，需要改变的样式太多的话，那么多套样式代码会很繁琐。")])])])}],!1,null,null,null);a.default=r.exports},8814:function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("技术")]),t("blockquote",[t("p",[t("strong",[s._v("掘金")]),s._v(" > > > "),t("a",{attrs:{href:"https://juejin.im/welcome/frontend"}},[s._v("https://juejin.im/welcome/frontend")])]),t("p",[t("strong",[s._v("思否")]),s._v(" > > > "),t("a",{attrs:{href:"https://segmentfault.com"}},[s._v("https://segmentfault.com")])]),t("p",[t("strong",[s._v("语雀")]),s._v(" > > > "),t("a",{attrs:{href:"https://www.yuque.com/explore/headlines"}},[s._v("https://www.yuque.com/explore/headlines")])]),t("p",[t("strong",[s._v("前端开发日报")]),s._v(" > > > "),t("a",{attrs:{href:"http://caibaojian.com/c/news"}},[s._v("http://caibaojian.com/c/news")])]),t("p",[t("strong",[s._v("小程序社区")]),s._v(" > > > "),t("a",{attrs:{href:"http://www.wxapp-union.com/portal.php"}},[s._v("http://www.wxapp-union.com/portal.php")])]),t("p",[t("strong",[s._v("W3cplus")]),s._v(" > > > "),t("a",{attrs:{href:"https://www.w3cplus.com"}},[s._v("https://www.w3cplus.com")])]),t("p",[t("strong",[s._v("WEB 开发速查表")]),s._v(" > > > "),t("a",{attrs:{href:"https://www.html.cn/dev"}},[s._v("https://www.html.cn/dev")])]),t("p",[t("strong",[s._v("Can I use")]),s._v(" > > > "),t("a",{attrs:{href:"https://caniuse.com/#tables"}},[s._v("https://caniuse.com/#tables")])]),t("p",[t("strong",[s._v("凹凸实验室")]),s._v(" > > > "),t("a",{attrs:{href:"https://aotu.io/index.html"}},[s._v("https://aotu.io/index.html")])]),t("p",[t("strong",[s._v("开发者手册")]),s._v(" > > > "),t("a",{attrs:{href:"https://cloud.tencent.com/developer/devdocs"}},[s._v("https://cloud.tencent.com/developer/devdocs")])]),t("p",[t("strong",[s._v("THX")]),s._v(" > > > "),t("a",{attrs:{href:"https://thx.github.io"}},[s._v("https://thx.github.io")])]),t("p",[t("strong",[s._v("jQuery之家")]),s._v(" > > > "),t("a",{attrs:{href:"http://www.htmleaf.com"}},[s._v("http://www.htmleaf.com")])]),t("p",[t("strong",[s._v("F2EX")]),s._v(" > > > "),t("a",{attrs:{href:"http://f2ex.cn"}},[s._v("http://f2ex.cn")])]),t("p",[t("strong",[s._v("CodePen")]),s._v(" > > > "),t("a",{attrs:{href:"https://codepen.io"}},[s._v("https://codepen.io")])])]),t("h1",[s._v("设计")]),t("blockquote",[t("p",[t("strong",[s._v("阿里巴巴矢量图标库")]),s._v(" > > > "),t("a",{attrs:{href:"https://www.iconfont.cn"}},[s._v("https://www.iconfont.cn")])]),t("p",[t("strong",[s._v("酷站")]),s._v(" > > > "),t("a",{attrs:{href:"http://cool.mfdemo.cn"}},[s._v("http://cool.mfdemo.cn")])]),t("p",[t("strong",[s._v("UI中国")]),s._v(" > > > "),t("a",{attrs:{href:"https://www.ui.cn"}},[s._v("https://www.ui.cn")])]),t("p",[t("strong",[s._v("设计导航")]),s._v(" > > > "),t("a",{attrs:{href:"http://hao.shejidaren.com/index.html"}},[s._v("http://hao.shejidaren.com/index.html")])]),t("p",[t("strong",[s._v("MFD设计导航")]),s._v(" > > > "),t("a",{attrs:{href:"http://mfchange.cn"}},[s._v("http://mfchange.cn")])]),t("p",[t("strong",[s._v("腾讯设计导航")]),s._v(" > > > "),t("a",{attrs:{href:"http://hao.shejidaren.com/index.html"}},[s._v("http://hao.shejidaren.com/index.html")])]),t("p",[t("strong",[s._v("堆糖")]),s._v(" > > > "),t("a",{attrs:{href:"https://www.duitang.com"}},[s._v("https://www.duitang.com")])]),t("p",[t("strong",[s._v("颜色盒")]),s._v(" > > > "),t("a",{attrs:{href:"https://www.colorbox.io"}},[s._v("https://www.colorbox.io")])]),t("p",[t("strong",[s._v("颜色搭配")]),s._v(" > > > "),t("a",{attrs:{href:"https://colorhunt.co/hot"}},[s._v("https://colorhunt.co/hot")])]),t("p",[t("strong",[s._v("HiPPTer")]),s._v(" > > > "),t("a",{attrs:{href:"http://www.hippter.com"}},[s._v("http://www.hippter.com")])])])])}],!1,null,null,null);a.default=r.exports},"8bbf":function(s,a){s.exports=Vue},"8f75":function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("一、理解 Generator(生成器)")]),t("p",[s._v("生成器对象是由一个 generator function 返回的,并且它符合可迭代协议和迭代器协议。")]),t("p",[s._v("形式上，Generator 函数是一个普通函数，但是有两个特征。")]),s._m(0),t("p",[s._v("我们来看一个简单的小例子：")]),s._m(1),t("p",[s._v("总结：")]),s._m(2),t("p",[s._v("value 属性表示当前的内部状态的值，是 yield 语句后面那个表达式的值；done 属性是一个布尔值，表示是否遍历结束。")]),t("hr"),t("h1",[s._v("二、yield")]),s._m(3),t("p",[s._v("遍历器对象的 next 方法的运行逻辑如下。")]),s._m(4),s._m(5),t("h2",[s._v("yield*")]),s._m(6),s._m(7),t("h2",[s._v("注意事项")]),s._m(8),s._m(9),s._m(10),s._m(11),s._m(12),s._m(13),t("hr"),t("h1",[s._v("三、next 方法的参数")]),t("p",[s._v("yield 句本身没有返回值，或者说总是返回 undefined。")]),s._m(14),s._m(15),t("p",[s._v("上面代码先定义了一个可以无限运行的 Generator 函数 f，如果 next 方法没有参数，每次运行到 yield 语句，变量 reset 的值总是 undefined。当 next 方法带一个参数 true 时，当前的变量 reset 就被重置为这个参数（即 true），因此 i 会等于-1，下一轮循环就会从-1 开始递增。")]),t("p",[s._v("这个功能有很重要的语法意义。Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。通过 next 方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值。也就是说，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。")]),t("hr"),t("h1",[s._v("四、配合使用 for...of 循环")]),t("p",[s._v("for...of 循环可以自动遍历 Generator 函数时生成的 Iterator 对象，且此时不再需要调用 next 方法。")]),s._m(16),s._m(17),t("p",[s._v("利用 for...of 循环，可以写出遍历任意对象（object）的方法。原生的 JavaScript 对象没有遍历接口，无法使用 for...of 循环，通过 Generator 函数为它加上这个接口，就可以用了：")]),s._m(18),s._m(19),t("p",[s._v("除了 for...of 循环以外，扩展运算符（...）、解构赋值和 Array.from 方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。")]),s._m(20),t("hr"),t("h1",[s._v("五、Generator 函数返回的遍历器对象的方法")]),t("h2",[s._v("1. Generator.prototype.throw()")]),s._m(21),s._m(22),t("p",[s._v("上面代码中，遍历器对象 i 连续抛出两个错误。第一个错误被 Generator 函数体内的 catch 语句捕获。i 第二次抛出错误，由于 Generator 函数内部的 catch 语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就被抛出了 Generator 函数体，被函数体外的 catch 语句捕获。")]),s._m(23),s._m(24),t("p",[s._v("上面代码中，g.throw 方法被捕获以后，自动执行了一次 next 方法，所以会打印 b。另外，也可以看到，只要 Generator 函数内部部署了 try...catch 代码块，那么遍历器的 throw 方法抛出的错误，不影响下一次遍历。")]),t("p",[s._v("需要注意的是，不要混淆遍历器对象的 throw 方法和全局的 throw 命令。")]),s._m(25),s._m(26),t("p",[s._v("上面代码中，第二个 next 方法向函数体内传入一个参数 42，数值是没有 toUpperCase 方法的，所以会抛出一个 TypeError 错误，被函数体外的 catch 捕获。")]),t("h2",[s._v("2. Generator.prototype.return()")]),t("p",[s._v("Generator 函数返回的遍历器对象，还有一个 return 方法，可以返回给定的值，并且终结遍历 Generator 函数。")]),s._m(27),t("p",[s._v("上面代码中，遍历器对象 g 调用 return 方法后，返回值的 value 属性就是 return 方法的参数 foo。并且，Generator 函数的遍历就终止了，返回值的 done 属性为 true，以后再调用 next 方法，done 属性总是返回 true。")]),s._m(28),s._m(29),t("p",[s._v("上面代码中，调用 return 方法后，就开始执行 finally 代码块，然后等到 finally 代码块执行完，再执行 return 方法。")]),t("hr"),t("h1",[s._v("六、Generator 函数的 this")]),t("p",[s._v("Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的 prototype 对象上的方法。")]),s._m(30),t("p",[s._v("上面代码表明，Generator 函数 g 返回的遍历器 obj，是 g 的实例，而且继承了 g.prototype。")]),s._m(31),s._m(32),t("p",[s._v("上面代码中，Generator 函数 g 在 this 对象上面添加了一个属性 a，但是 obj 对象拿不到这个属性。")]),t("p",[s._v("那么，有没有办法让 Generator 函数返回一个正常的对象实例，既可以用 next 方法，又可以获得正常的 this？")]),t("p",[s._v("下面是一个变通方法。首先，生成一个空对象，使用 bind 方法绑定 Generator 函数内部的 this。这样，构造函数调用以后，这个空对象就是 Generator 函数的实例对象了。")]),s._m(33),t("p",[s._v("上面代码中，首先是 F 内部的 this 对象绑定 obj 对象，然后调用它，返回一个 Iterator 对象。这个对象执行三次 next 方法（因为 F 内部有两个 yield 语句），完成 F 内部所有代码的运行。这时，所有内部属性都绑定在 obj 对象上了，因此 obj 对象也就成了 F 的实例。")]),t("p",[s._v("上面代码中，执行的是遍历器对象 f，但是生成的对象实例是 obj，有没有办法将这两个对象统一呢？")]),t("p",[s._v("一个办法就是将 obj 换成 F.prototype。")]),s._m(34),t("p",[s._v("Generator 函数也不能跟 new 命令一起用，会报错。")]),s._m(35),s._m(36),t("p",[s._v("将 F 改成构造函数，就可以对它执行 new 命令了。")]),s._m(37),t("hr"),t("h1",[s._v("七、Generator 与状态机、Generator 与协程")]),t("h2",[s._v("状态机")]),s._m(38),s._m(39),t("p",[s._v("上面的 Generator 实现与 ES5 实现对比，可以看到少了用来保存状态的外部变量 ticking，这样就更简洁，更安全（状态不会被非法篡改）、更符合函数式编程的思想，在写法上也更优雅。Generator 之所以可以不用外部变量保存状态，是因为它本身就包含了一个状态信息，即目前是否处于暂停态。")]),t("h2",[s._v("协程")]),s._m(40),t("p",[t("font",{attrs:{color:"#0099ff"}},[s._v("1. 协程与子例程的差异")])],1),t("p",[s._v("传统的“子例程”（subroutine）采用堆栈式“后进先出”的执行方式，只有当调用的子函数完全执行完毕，才会结束执行父函数。")]),t("p",[s._v("协程与其不同，多个线程（单线程情况下，即多个函数）可以并行执行，但是只有一个线程（或函数）处于正在运行的状态，其他线程（或函数）都处于暂停态（suspended），线程（或函数）之间可以交换执行权。")]),t("p",[s._v("也就是说，一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。")]),t("p",[s._v("从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。")]),t("p",[t("font",{attrs:{color:"#0099ff"}},[s._v("2. 协程与普通线程的差异")])],1),t("p",[s._v("不难看出，协程适合用于多任务运行的环境。在这个意义上，它与普通的线程很相似，都有自己的执行上下文、可以分享全局变量。它们的不同之处在于，同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都处于暂停状态。")]),t("p",[s._v("此外，普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。")]),t("p",[s._v("由于 ECMAScript 是单线程语言，只能保持一个调用栈。引入协程以后，每个任务可以保持自己的调用栈。这样做的最大好处，就是抛出错误的时候，可以找到原始的调用栈。不至于像异步操作的回调函数那样，一旦出错，原始的调用栈早就结束。")]),t("p",[s._v("Generator 函数是 ECMAScript 6 对协程的实现，但属于不完全实现。Generator 函数被称为“半协程”（semi-coroutine），意思是只有 Generator 函数的调用者，才能将程序的执行权还给 Generator 函数。如果是完全执行的协程，任何函数都可以让暂停的协程继续执行。")]),t("p",[s._v("如果将 Generator 函数当作协程，完全可以将多个需要互相协作的任务写成 Generator 函数，它们之间使用 yield 语句交换控制权。")]),t("h2",[s._v("应用")]),t("p",[s._v("Generator 可以暂停函数执行，返回任意表达式的值。这种特点使得 Generator 有多种应用场景。")]),t("p",[s._v("（1）异步操作的同步化表达")]),t("p",[s._v("Generator 函数的暂停执行的效果，意味着可以把异步操作写在 yield 语句里面，等到调用 next 方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在 yield 语句下面，反正要等到调用 next 方法时再执行。所以，Generator 函数的一个重要实际意义就是用来处理异步操作，改写回调函数。")]),t("p",[s._v("Ajax 是典型的异步操作，通过 Generator 函数部署 Ajax 操作，可以用同步的方式表达。")]),s._m(41),t("p",[s._v("上面代码的 main 函数，就是通过 Ajax 操作获取数据。可以看到，除了多了一个 yield，它几乎与同步操作的写法完全一样。注意，makeAjaxCall 函数中的 next 方法，必须加上 response 参数，因为 yield 语句构成的表达式，本身是没有值的，总是等于 undefined。")]),t("p",[s._v("下面是另一个例子，通过 Generator 函数逐行读取文本文件。")]),s._m(42),t("p",[s._v("上面代码打开文本文件，使用 yield 语句可以手动逐行读取文件。")]),t("p",[s._v("（2）控制流管理")]),t("p",[s._v("回调函数")]),s._m(43),t("p",[s._v("（3）部署 Iterator 接口")]),t("p",[s._v("利用 Generator 函数，可以在任意对象上部署 Iterator 接口。")]),s._m(44),s._m(45),t("p",[s._v("上述代码中，myObj 是一个普通对象，通过 iterEntries 函数，就有了 Iterator 接口。也就是说，可以在任意对象上部署 next 方法。")]),s._m(46),s._m(47),t("p",[s._v("（4）作为数据结构")]),t("p",[s._v("Generator 可以看作是数据结构，更确切地说，可以看作是一个数组结构，因为 Generator 函数可以返回一系列的值，这意味着它可以对任意表达式，提供类似数组的接口。")]),s._m(48),t("p",[s._v("上面的函数，可以用一模一样的 for...of 循环处理！两相一比较，就不难看出 Generator 使得数据或者操作，具备了类似数组的接口。")])])},[function(){var s=this.$createElement,a=this._self._c||s;return a("ul",[a("li",[a("p",[this._v("一是，function 关键字与函数名之间有一个星号；")])]),a("li",[a("p",[this._v("二是，函数体内部使用 yield 语句，定义不同的内部状态（yield 语句在英语里的意思就是“产出”）。")])])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("gen")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'1'")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'2'")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'3'")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" g = gen()\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = g.next()\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: '1', done: false }")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = g.next()\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(b) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: '2', done: false }")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c = g.next()\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(c) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: '3', done: true }")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" d = g.next()\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(d) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: undefined, done: true }")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("p",[s._v("调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的 next 方法，就会返回一个有着 "),t("strong",[s._v("value")]),s._v(" 和 "),t("strong",[s._v("done")]),s._v(" 两个属性的对象。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("由于 Generator 函数返回的遍历器对象，只有调用 next 方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。"),a("strong",[this._v("yield 语句就是暂停标志。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ul",[t("li",[t("p",[s._v("遇到 yield 语句，就暂停执行后面的操作，并将紧跟在 yield 后面的那个表达式的值，作为返回的对象的 value 属性值。")])]),t("li",[t("p",[s._v("下一次调用 next 方法时，再继续往下执行，直到遇到下一个 yield 语句。")])]),t("li",[t("p",[s._v("如果没有再遇到新的 yield 语句，就一直运行到函数结束，直到 return 语句为止，并将 return 语句后面的表达式的值，作为返回的对象的 value 属性值。")])]),t("li",[t("p",[s._v("如果该函数没有 return 语句，则返回的对象的 value 属性值为 undefined。")])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[this._v("需要注意的是，yield 语句后面的表达式，只有当调用 next 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ul",[a("li",[a("p",[this._v("yield 的返回值是当作一个元素")])]),a("li",[a("p",[this._v("yield* 的返回值是一个 iterator，会依次返回这个 iterator 中的每个元素")])])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("sub")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("65")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("70")]),s._v("; i++) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(".fromCharCode(i)\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("main")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" sub() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回的是 sub() 的结果, Object [Generator] {}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'---------'")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v("* sub() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 依次返回 sub() 结果的的每一项")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" main()) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(v)\n}\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[this._v("yield 语句不能用在普通函数中，否则会报错。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", [["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("], "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("], ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v("]];\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" flat = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n  a.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item")]),s._v(") ")]),s._v("{   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// forEach方法的参数是一个普通函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" item !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'number'")]),s._v(") {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v("* flat(item);\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" item;\n    }\n  }\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" flat(arr)){\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(f);   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// SyntaxError: Unexpected number")]),s._v("\n\n}\n\n————————————————————————————————修改方法————————————————————————————————\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", [["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("], "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("], ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v("]];\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" flat = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" length = a.length;\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < length; i++) {  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 改用for循环")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" item = a[i];\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" item !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'number'")]),s._v(") {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v("* flat(item);\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" item;\n    }\n  }\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" flat(arr)) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(f);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1, 2, 3, 4, 5, 6")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",{attrs:{start:"2"}},[a("li",[this._v("yield 语句如果用在一个表达式之中，必须放在圆括号里面")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// SyntaxError")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// SyntaxError")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(" + ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(")); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// OK")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Hello'")]),s._v(" + ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v(")); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// OK")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",{attrs:{start:"3"}},[a("li",[this._v("yield 语句用作函数参数或赋值表达式的右边，可以不加括号。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("foo("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v("); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// OK")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" input = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// OK")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("strong",[this._v("next 方法可以带一个参数，该参数就会被当作上一个 yield 语句的返回值。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("; i++) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" reset = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" i\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (reset) {\n      i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v("\n    }\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" g = f()\n\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 0, done: false }")]),s._v("\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 1, done: false }")]),s._v("\ng.next("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 0, done: false }")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" foo()) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(v)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1 2 3 4 5")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[this._v("注意：一旦 next 方法的返回对象的 done 属性为 true，for...of 循环就会中止，且不包含该返回对象，所以上面代码的 return 语句返回的 6，不包括在 for...of 循环之中。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("span",{attrs:{id:"jump"}})])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("objectEntries")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" propKeys = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Reflect")]),s._v(".ownKeys(obj);\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" propKey "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" propKeys) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" [propKey, obj[propKey]];\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" jane = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("first")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Jane'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("last")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Doe'")]),s._v(" };\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [key, value] "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" objectEntries(jane)) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`"),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${key}")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${value}")]),s._v("`")]),s._v(");\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// first: Jane")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// last: Doe")]),s._v("\n\n————————————————————————————————另一种写法————————————————————————————————\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 上面代码中，对象jane原生不具备Iterator接口，无法用for...of遍历。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这时，我们通过Generator函数objectEntries为它加上遍历器接口，就可以用for...of遍历了。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 加上遍历器接口的另一种写法是，将Generator函数加到对象的Symbol.iterator属性上面。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("objectEntries")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" propKeys = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".keys("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(");\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" propKey "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" propKeys) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" [propKey, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("[propKey]];\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" jane = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("first")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Jane'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("last")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Doe'")]),s._v(" };\n\njane["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = objectEntries;\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [key, value] "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" jane) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`"),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${key}")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${value}")]),s._v("`")]),s._v(");\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// first: Jane")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// last: Doe")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("numbers")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 扩展运算符")]),s._v("\n;[...numbers()] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1, 2]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Array.form 方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".from(numbers()) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1, 2]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 解构赋值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [x, y] = numbers()\nx "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\ny "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// for...of 循环")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" numbers()) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(n)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("Generator 函数返回的遍历器对象，都有一个 throw 方法，"),a("strong",[this._v("可以在函数体外抛出错误，然后在 Generator 函数体内捕获。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" g = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("*("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v("\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (e) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'内部捕获'")]),s._v(", e) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 注：此处代码运行结束有一个隐藏的return")]),s._v("\n  }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = g()\ni.next()\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n  i.throw("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = i.next("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(b)\n  i.throw("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v(")\n} "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (e) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'外部捕获'")]),s._v(", e)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//  依次打印如下:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//  内部捕获 a")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//  { value: undefined, done: true }")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//  外部捕获 c")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[this._v("注意：throw 方法被捕获以后，会附带执行下一条 yield 语句。也就是说，会附带执行一次 next 方法。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gen = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("gen")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(")\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (e) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v(")\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" g = gen()\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a")]),s._v("\ng.throw() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// b")]),s._v("\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// c")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ul",[t("li",[t("p",[s._v("用 throw 命令抛出的，如："),t("strong",[s._v("throw new Error('a')")]),s._v(",只能被函数体外的 catch 语句捕获。")])]),t("li",[t("p",[s._v("而 Generator 函数 throw 方法 抛出的错误，可以在函数体内捕获，也可以被函数体外的 catch 捕获。")])])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" y = x.toUpperCase()\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" y\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" it = foo()\n\nit.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value:3, done:false }")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n  it.next("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("42")]),s._v(")\n} "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (err) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(err)\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("gen")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" g = gen()\n\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 1, done: false }")]),s._v("\ng.return("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// { value: "foo", done: true }')]),s._v("\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: undefined, done: true }")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("strong",[this._v("如果 Generator 函数内部有 try...finally 代码块，那么 return 方法会推迟到 finally 代码块执行完再执行。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("numbers")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("finally")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" g = numbers()\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { done: false, value: 1 }")]),s._v("\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { done: false, value: 2 }")]),s._v("\ng.return("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("7")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { done: false, value: 4 }")]),s._v("\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { done: false, value: 5 }")]),s._v("\ng.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { done: true, value: 7 }")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("g")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{}\n\ng.prototype.hello = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hi!'")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = g()\n\nobj "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" g "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\nobj.hello() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'hi!'")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("但是，"),a("strong",[this._v("如果把 g 当作普通的构造函数，并不会生效，因为 g 返回的总是遍历器对象，而不是 this 对象。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("g")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("11")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = g()\nobj.a "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("F")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".c = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(")\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f = F.call(obj)\n\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: 2, done: false}")]),s._v("\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: 3, done: false}")]),s._v("\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: undefined, done: true}")]),s._v("\n\nobj.a "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nobj.b "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nobj.c "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("F")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".c = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(")\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f = F.call(F.prototype)\n\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: 2, done: false}")]),s._v("\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: 3, done: false}")]),s._v("\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: undefined, done: true}")]),s._v("\n\nf.a "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nf.b "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nf.c "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("F")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(")\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" F()\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError: F is not a constructor")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("上面代码中，"),a("strong",[this._v("new 命令跟函数 F 一起使用，结果报错，因为 F 不是构造函数。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("gen")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".c = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(")\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("F")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" gen.call(gen.prototype)\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" f = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" F()\n\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: 2, done: false}")]),s._v("\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: 3, done: false}")]),s._v("\nf.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Object {value: undefined, done: true}")]),s._v("\n\nf.a "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nf.b "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nf.c "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[this._v("Generator 是实现状态机的最佳结构。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" ticking = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" clock = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ES5实现")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (ticking)\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tick!'")]),s._v(");\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tock!'")]),s._v(");\n  ticking = !ticking;\n}\n\n ----------------分割线----------------\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" clock = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("*("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Generator实现")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tick!'")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Tock!'")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(";\n  }\n};\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[this._v("协程（coroutine）是一种程序运行的方式，可以理解成“协作的线程”或“协作的函数”。协程既可以用单线程实现，也可以用多线程实现。前者是一种特殊的子例程，后者是一种特殊的线程。")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("main")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" request("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://some.url'")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" resp = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("JSON")]),s._v(".parse(result)\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(resp.value)\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("request")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("url")]),s._v(") ")]),s._v("{\n  makeAjaxCall(url, "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("response")]),s._v(") ")]),s._v("{\n    it.next(response)\n  })\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" it = main()\nit.next()\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("numbers")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" file = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" FileReader("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'numbers.txt'")]),s._v(")\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (!file.eof) {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("parseInt")]),s._v("(file.readLine(), "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(")\n    }\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("finally")]),s._v(" {\n    file.close()\n  }\n}\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("step1("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value1")]),s._v(") ")]),s._v("{\n  step2(value1, "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value2")]),s._v(") ")]),s._v("{\n    step3(value2, "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value3")]),s._v(") ")]),s._v("{\n      step4(value3, "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value4")]),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Do something with value4")]),s._v("\n      })\n    })\n  })\n})\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -------------↓Promise改写↓-------------")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value4")]),s._v(") ")]),s._v("{\n      "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Do something with value4")]),s._v("\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("error")]),s._v(") ")]),s._v("{\n      "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Handle any error from step1 through step4")]),s._v("\n    }\n  )\n  .done()\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// -------------↓Generator函数改善代码运行流程↓-------------")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("longRunningTask")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value1")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value2 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" step1(value1)\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value3 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" step2(value2)\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value4 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" step3(value3)\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value5 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" step4(value4)\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Do something with value4")]),s._v("\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (e) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Handle any error from step1 through step4")]),s._v("\n  }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 然后，使用一个函数，按次序自动执行所有步骤。")]),s._v("\n\nscheduler(longRunningTask(initialValue))\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("scheduler")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("task")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" taskObj = task.next(task.value)\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果Generator函数未结束，就继续调用")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!taskObj.done) {\n    task.value = taskObj.value\n    scheduler(task)\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 注意，上面这种做法，只适合同步操作，即所有的task都必须是同步的，不能有异步操作。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 因为这里的代码一得到返回值，就继续往下执行，没有判断异步操作何时完成。")]),s._v("\n")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("→ "),a("a",{attrs:{href:"#jump",target:"_self"}},[this._v("可参考<标题:四>的例子")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("iterEntries")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" keys = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".keys(obj)\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < keys.length; i++) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key = keys[i]\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" [key, obj[key]]\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" myObj = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("bar")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("7")]),s._v(" }\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [key, value] "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" iterEntries(myObj)) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(key, value)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// foo 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// bar 7")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("p",[s._v("下面是一个对数组部署 Iterator 接口的例子，尽管"),t("strong",[s._v("数组原生具有这个接口")]),s._v("。")])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("makeSimpleGenerator")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("array")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" nextIndex = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (nextIndex < array.length) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" array[nextIndex++]\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gen = makeSimpleGenerator(["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'yo'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'ya'")]),s._v("])\n\ngen.next().value "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'yo'")]),s._v("\ngen.next().value "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'ya'")]),s._v("\ngen.next().done "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])])},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" *"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("doStuff")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" fs.readFile.bind("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello.txt'")]),s._v(");\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" fs.readFile.bind("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world.txt'")]),s._v(");\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" fs.readFile.bind("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'and-such.txt'")]),s._v(");\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 上面代码就是依次返回三个函数，但是由于使用了Generator函数，导致可以像处理数组那样，处理这三个返回的函数。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" (task "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" doStuff()) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// task是一个函数，可以像回调函数那样使用它")]),s._v("\n}\n\n -------------分割线-------------\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 实际上，如果用ES5表达，完全可以用数组模拟Generator的这种用法。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("doStuff")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [\n    fs.readFile.bind("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello.txt'")]),s._v("),\n    fs.readFile.bind("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world.txt'")]),s._v("),\n    fs.readFile.bind("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'and-such.txt'")]),s._v(")\n  ];\n}\n")])])}],!1,null,null,null);a.default=r.exports},"9aaf":function(s,a,t){},"9feb":function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("一、Async/await")]),t("p",[s._v("ES7 提供了 async 函数，使得异步操作变得更加方便。async 函数是什么？")]),t("p",[s._v("一句话，async 函数就是 Generator 函数的语法糖。")]),t("h2",[s._v("Async functions")]),t("ul",[t("li",[s._v("这个函数总是返回一个 "),t("strong",[s._v("promise")]),s._v("，如果代码中有 return "),t("strong",[s._v("<非 promise>语句")]),s._v("，JavaScript 会自动把返回的这个 value 值包装成 promise 的 "),t("strong",[s._v("resolved")]),s._v(" 值。当 async 函数抛出异常时，promise 的 "),t("strong",[s._v("reject")]),s._v(" 方法也会传递这个异常值。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\nf().then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("e")]),s._v(" =>")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(e) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n})\n")])]),t("h2",[s._v("Await")]),t("ul",[t("li",[s._v("async 函数中可能会有 "),t("strong",[s._v("await")]),s._v(" 表达式，这会使 async 函数"),t("strong",[s._v("暂停")]),s._v("执行，等待 Promise 的结果出来，然后"),t("strong",[s._v("恢复")]),s._v(" async 函数的执行并返回解析值（resolved）。")])]),t("blockquote",[t("p",[s._v("注意：await 只能在 async 函数内部使用")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" promise = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" {\n    setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" resolve("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'done!'")]),s._v("), "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(")\n  })\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" result = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" promise "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 直到promise返回一个resolve值")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(result) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'done!'")]),s._v("\n}\nf()\n")])]),t("p",[s._v("函数执行到 await promise 行会暂停，当 promise 处理完成后重新恢复运行， resolve 的值成了最终的 result，所以上面的代码会在 1s 后输出'done!'。")]),t("p",[s._v("我们强调一下：await 字面上使得 JavaScript 等待，直到 promise 处理完成，然后将结果继续下去。")]),t("p",[s._v("但这并不会花费任何的 cpu 资源，因为引擎能够同时做其他工作：执行其他脚本，处理事件等等。")]),t("hr"),t("h1",[s._v("二、错误处理")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" response = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" fetch("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/no-user-here'")]),s._v(")\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" user = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" response.json()\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v("(err) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 在fetch和response.json中都能捕获错误")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(err)\n    }\n}\nf()\n\n-----------------分割线-----------------\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//如果我们不使用try-catch，然后async函数f()的调用产生的promise变成reject状态的话，我们可以添加.catch去处理它。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n\t"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" response = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" fetch("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://no-such-url'")]),s._v(")\n}\nf().\ncatch ("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("e")]),s._v(" =>")]),s._v(" {\n\t"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(e)  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError: failed to fetch")]),s._v("\n})\n")])]),t("blockquote",[t("p",[s._v("async 函数是非常新的语法功能，新到都不属于 ES6，而是属于 ES7。目前，它仍处于提案阶段，但是转码器 Babel 和 regenerator 都已经支持，转码后就能使用。")])]),t("h2",[s._v("Async 函数的多种使用形式")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数声明")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数表达式")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 对象的方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = { "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" foo() {} }\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 箭头函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" () => {}\n")])]),t("h2",[s._v("Async 与 Promise、Generator 的比较")]),t("p",[s._v("我们通过一个例子，来看 Async 函数与 Promise、Generator 函数的区别。")]),t("p",[s._v("假定某个 DOM 元素上面，部署了一系列的动画，前一个动画结束，才能开始后一个。如果当中有一个动画出错，就不再往下执行，返回上一个成功执行的动画的返回值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("chainAnimationsPromise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("elem, animations")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise的写法")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 变量ret用来保存上一个动画的返回值")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" ret = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新建一个空的Promise")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve()\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使用then方法，添加所有动画")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" anim "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" animations) {\n    p = p.then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("val")]),s._v(") ")]),s._v("{\n      ret = val\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" anim(elem)\n    })\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回一个部署了错误捕捉机制的Promise")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" p\n    .catch("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("e")]),s._v(") ")]),s._v("{\n      "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 忽略错误，继续执行 */")]),s._v("\n    })\n    .then("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" ret\n    })\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("chainAnimationsGenerator")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("elem, animations")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Generator的写法")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" spawn("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("*("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" ret = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" anim "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" animations) {\n        ret = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" anim(elem)\n      }\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (e) {\n      "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 忽略错误，继续执行 */")]),s._v("\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" ret\n  })\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("chainAnimationsAsync")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("elem, animations")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Async的写法")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" ret = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" anim "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" animations) {\n      ret = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" anim(elem)\n    }\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (e) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 忽略错误，继续执行 */")]),s._v("\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" ret\n}\n")])]),t("p",[s._v("可以看到 Async 函数的实现最简洁，最符合语义，几乎没有语义不相关的代码。它将 Generator 写法中的自动执行器，改在语言层面提供，不暴露给用户，因此代码量最少。如果使用 Generator 写法，自动执行器需要用户自己提供。")]),t("p",[s._v("上一段代码的 spawn 函数就是自动执行器,下面给出 spawn 函数的实现:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("spawn")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("genF")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" gen = genF()\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("step")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("nextF")]),s._v(") ")]),s._v("{\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" next = nextF()\n      } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (e) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" reject(e)\n      }\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (next.done) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" resolve(next.value)\n      }\n      "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve(next.value).then(\n        "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(") ")]),s._v("{\n          step("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" gen.next(v)\n          })\n        },\n        "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("e")]),s._v(") ")]),s._v("{\n          step("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" gen.throw(e)\n          })\n        }\n      )\n    }\n    step("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" gen.next("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(")\n    })\n  })\n}\n")])])])}],!1,null,null,null);a.default=r.exports},a383:function(s,a,t){var e={"./Async.md":["9feb"],"./FlexBox.md":["d94d"],"./Generator.md":["8f75"],"./Iterator.md":["f2b5"],"./Netstjs.md":["e862"],"./Promise.md":["6a8a"],"./Typescript.md":["1249"],"./VueAndReact.md":["6dfc"],"./Vue渲染器.md":["e708"],"./amway.md":["8814"],"./作用域.md":["bc03"],"./响应式布局.md":["7f85"],"./词法作用域.md":["4a58"]};function r(s){var a=e[s];return a?Promise.all(a.slice(1).map(t.e)).then(function(){var s=a[0];return t(s)}):Promise.resolve().then(function(){var a=new Error("Cannot find module '"+s+"'");throw a.code="MODULE_NOT_FOUND",a})}r.keys=function(){return Object.keys(e)},r.id="a383",s.exports=r},a915:function(s,a,t){},affb:function(s,a,t){"use strict";var e=t("9aaf");t.n(e).a},bc03:function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("一、作用域是什么？")]),t("p",[s._v("编程语言设计了一套良好的规则来储存变量，并且之后可以方便地找到这些变量，这套规则被称为作用域。")]),t("p",[s._v("（简单来说，作用域就是能让你储存变量当中的值，并且之后能够进行访问和修改）")]),t("h1",[s._v("二、编译流程")]),t("ul",[t("li",[t("p",[s._v("分词/词法分析 （完成分词这个目的，需要通过词法分析这个手段）")]),t("p",[s._v("这个过程会将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代码块被称为词法单元。")])]),t("li",[t("p",[s._v("解析/语法分析")]),t("p",[s._v("这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树（抽象语法树–AST）。")])]),t("li",[t("p",[s._v("代码生成")]),t("p",[s._v("将 AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息息相关。")])])]),t("p",[s._v("注：JavaScript 引擎编译流程更为复杂，比如，在语法分析和代码生成阶段有特定的步骤对性能进行优化，包括对冗余元素进行优化。并且对于 JavaScript 而言，大部分情况下编译发生在代码执行前的几微秒内。JavaScript 引擎用尽了各种办法（比如即时编译–JIT）来保证性能最佳。")]),t("h1",[s._v("三、各自的职责")]),t("ul",[t("li",[t("p",[s._v("引擎：负责整个编译和执行过程")])]),t("li",[t("p",[s._v("编译器：负责语法分析及代码生成")])]),t("li",[t("p",[s._v("作用域：负责收集并维护所有声明的变量，组成的一系列查询，并实施一套严格的规则，确定当前执行的代码对折现变量的访问权限。")])])]),t("h1",[s._v("四、变量的赋值操作")]),t("p",[s._v("变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。")]),t("p",[s._v("LHS 和 RHS，当引擎执行编译器给的代码（赋值操作）时，会通过查找这个变量来判断这个变量是否已经声明，这个过程需要作用域的协助，而查找的方式分为两种：LHS（”赋值操作的目标是谁”）和 RHS（”谁是赋值操作的源头”）。")]),t("ul",[t("li",[s._v("LHS：赋值操作的左侧，试图查找到变量的容器本身，从而可以对其赋值，即找到复制操作的目标。")]),t("li",[s._v("RHS：另外一种查找，可以简单理解为复制操作的右侧，其查找目标为取到目标的源值，即找到这个变量具体的值而非容器。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = a;\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" a + b;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c = foo( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" );\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n1. 找出所有的 LHS 查询（这里有 3 处！）\nc = ..; 、 a = 2 （隐式变量分配）、 b = ..\n\n2. 找出所有的 RHS 查询（这里有 4 处！）\nfoo(2.. 、 = a; 、 a .. 、 .. b\n*/")]),s._v("\n")])])])}],!1,null,null,null);a.default=r.exports},cebe:function(s,a){s.exports=axios},cfd9:function(s,a,t){var e={"./404.svg":"eb2b","./antDesign.svg":"0a5e","./blogroll.svg":"4ea0","./cc-by-nc-sa.svg":"7e2e","./github.svg":"76f4"};function r(s){var a=n(s);return t(a)}function n(s){var a=e[s];if(a+1)return a;var t=new Error("Cannot find module '"+s+"'");throw t.code="MODULE_NOT_FOUND",t}r.keys=function(){return Object.keys(e)},r.resolve=n,(s.exports=r).id="cfd9"},d203:function(s,a,t){var e={"./Async.md":"9feb","./FlexBox.md":"d94d","./Generator.md":"8f75","./Iterator.md":"f2b5","./Netstjs.md":"e862","./Promise.md":"6a8a","./Typescript.md":"1249","./VueAndReact.md":"6dfc","./Vue渲染器.md":"e708","./amway.md":"8814","./作用域.md":"bc03","./响应式布局.md":"7f85","./词法作用域.md":"4a58"};function r(s){var a=n(s);return t(a)}function n(s){var a=e[s];if(a+1)return a;var t=new Error("Cannot find module '"+s+"'");throw t.code="MODULE_NOT_FOUND",t}r.keys=function(){return Object.keys(e)},r.resolve=n,(s.exports=r).id="d203"},d700:function(s,a,t){"use strict";var e=t("a915");t.n(e).a},d94d:function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("blockquote",[t("p",[s._v("本文只是介绍 Flexbox 布局的一些属性，想了解更多吗？↓ ↓ ↓")]),t("p",[t("strong",[s._v("CSS3 Flexbox 解决方案")]),s._v(" > > > "),t("a",{attrs:{href:"https://magic-akari.github.io/solved-by-flexbox"}},[s._v("https://magic-akari.github.io/solved-by-flexbox")])]),t("p",[s._v("栅格系统、圣杯布局、组件、媒体对象、粘性页脚、垂直居中")]),t("p",[t("strong",[s._v("Flex 布局教程：实例篇")]),s._v(" > > > "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html"}},[s._v("http://www.ruanyifeng.com/blog/2015/07/flex-examples.html")])])]),t("h1",[s._v("Flex 容器（flex container）")]),t("h2",[s._v("display")]),t("p",[s._v("用来定义一个 flex 容器。如果设置为 flex 则容器呈现为块状元素，设置为 inline-flex 则容器呈现为行内元素。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".container")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("display")]),s._v(": flex; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 或者 inline-flex */")]),s._v("\n}\n")])]),t("h2",[s._v("flex-direction")]),t("p",[s._v("flex-direction 属性确立了主轴，从而定义了 flex 项在 flex 容器中的排布方向。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".container")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("flex-direction")]),s._v(": row | row-reverse | column | column-reverse;\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* row 行排布\n  row-reverse 反向行排布\n  column 列排布\n  column-reverse 反向列排布 */")]),s._v("\n}\n")])]),t("h2",[s._v("flex-wrap")]),t("p",[s._v("flex-wrap 来决定 flex 项是否允需要换行。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".container")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("flex-wrap")]),s._v(": nowrap | wrap | wrap-reverse;\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* nowrap 不换行\n  wrap 换行\n  wrap-reverse 向上换行 */")]),s._v("\n}\n")])]),t("h2",[s._v("flex-flow")]),t("p",[s._v("这是 flex-direction 和 flex-wrap 属性的缩写形式。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-tag"}},[s._v("flex-flow")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-selector-tag"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-selector-tag"}},[s._v("nowrap")]),s._v(";\n")])]),t("h2",[s._v("justify-content")]),t("p",[s._v("justify-content 属性定义了 flex 项沿主轴方向的对齐方式。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".container")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("justify-content")]),s._v(": flex-start|flex-end|center|space-between|space-around|initial|inherit;\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* flex-start  默认值。项目位于容器的开头。\n  flex-end  项目位于容器的结尾。\n  center  项目位于容器的中心。\n  space-between  项目位于各行之间留有空白的容器内。\n  space-around  项目位于各行之前、之间、之后都留有空白的容器内。\n  initial\t 设置该属性为它的默认值。\n  inherit  从父元素继承该属性。 */")]),s._v("\n}\n")])]),t("h2",[s._v("align-items")]),t("p",[s._v("align-items 定义了 flex 项如何沿当前行在交叉轴上排布的默认行为。可以将其视为交叉轴（垂直于主轴）上的对齐方式。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".container")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("align-items")]),s._v(": flex-start | flex-end | center | baseline | stretch;\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* stretch  默认值。元素被拉伸以适应容器。\n  center  元素位于容器的中心。\n  flex-start\t元素位于容器的开头。\n  flex-end\t元素位于容器的结尾。\n  baseline  元素位于容器的基线上。\n  initial\t 设置该属性为它的默认值。\n  inherit  从父元素继承该属性。 */")]),s._v("\n}\n")])]),t("h2",[s._v("align-content")]),t("p",[s._v("当交叉轴上有剩余空间时，align-content 可以设置 flex 容器中的 行 在交叉轴上如何分配剩余空间。\n类似于 justify-content 在主轴上对齐单个 flex 项的方式，当只有一行 flex 项时，此属性不起作用。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".container")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("align-content")]),s._v(": flex-start | flex-end | center | space-between | space-around |\n    stretch;\n}\n")])]),t("hr"),t("h1",[s._v("Flex 容器里面的项 (flex items)")]),t("blockquote",[t("p",[s._v("注意：float,clear 和 vertical-align 在 flex item（flex 项）上都不会起作用，也不会让它脱离文档流。")])]),t("h2",[s._v("order")]),t("p",[s._v("order 属性可以控制它们在 flex 容器中的显示顺序。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".item")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("order")]),s._v(": <integer>; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 默认值是 0 */")]),s._v("\n}\n")])]),t("h2",[s._v("flex-grow")]),t("p",[s._v("flex-grow 定义了 flex 项在有可用剩余空间时拉伸比例。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".item")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("flex-grow")]),s._v(": <number>; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* default 0 */")]),s._v("\n}\n")])]),t("h2",[s._v("flex-shrink")]),t("p",[s._v("flex-shrink 定义了 flex 项的收缩的能力。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".item")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("flex-shrink")]),s._v(": <number>; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* default 1 */")]),s._v("\n}\n")])]),t("h2",[s._v("flex-basis")]),t("p",[s._v("flex-basis 定义了在分配剩余空间之前 flex 项默认的大小。\nflex-basis 影响元素在主轴(main axis)上的大小。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".item")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("flex-basis")]),s._v(": <length> | auto; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* default auto */")]),s._v("\n}\n")])]),t("h2",[s._v("flex")]),t("p",[s._v("flex 是 flex-grow、flex-shrink、flex-basis 三个属性的缩写。\n其中第二个和第三个参数(flex-shrink 和 flex-basis)是可选的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".item")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("flex")]),s._v(": none | [ < "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'flex-grow'")]),s._v(" > < "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'flex-shrink'")]),s._v(" >? || < "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'flex-basis'")]),s._v(" > ];\n}\n")])]),t("h2",[s._v("align-self")]),t("p",[s._v("align-self 属性允许某个单独的 flex 项覆盖默认的对齐方式（或由 align-items 指定的对齐方式）。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-css"}},[t("span",{pre:!0,attrs:{class:"hljs-selector-class"}},[s._v(".item")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attribute"}},[s._v("align-self")]),s._v(": auto | flex-start | flex-end | center | baseline | stretch;\n}\n")])])])}],!1,null,null,null);a.default=r.exports},e708:function(s,a,t){"use strict";t.r(a);var e=[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("section",[e("hr"),e("h1",[s._v("组件")]),e("h2",[s._v("模板引擎")]),e("p",[s._v("模板引擎的概念是：模板字符串 + 数据 => html")]),e("p",[s._v("在 JQuery 盛行的年代,模板引擎的概念流行")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { template } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'lodash'")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" compiler = template("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'<h1><%= title %></h1>'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" html = compiler({ "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("title")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'My Component'")]),s._v(" })\n\n"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v(").innerHTML = html\n")])]),e("p",[s._v("我们将模板字符串传递给 template 函数,该函数返回一个编译器 compiler,只要把数据传入 compiler 函数,便能得到最终想要渲染的内容。")]),e("p",[s._v("当数据发生变化时，我们需要使用新的数据重新编译模板：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" newHtml = compiler({ "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("title")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'New Component'")]),s._v(" })\n")])]),e("h2",[s._v("模板引擎 ——> 组件")]),e("p",[s._v("封装一下就得到了 组件！")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" MyComponent = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("props")]),s._v(" =>")]),s._v(" {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" compiler = MyComponent.cache || (MyComponent.cache = template("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'<h1><%= title %></h1>'")]),s._v("))\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" compiler(props)\n}\nMyComponent.cache = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n")])]),e("p",[s._v("使用")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v(").innerHTML = MyComponent({ "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("title")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'MyComponent'")]),s._v(" })\n")])]),e("h2",[s._v("Virtual DOM")]),e("p",[s._v("Vue 和 React： 模板字符串 + 数据 => Virtual DOM")]),e("p",[s._v("借助 snabbdom 的 API , 使用 render 函数返回 Virtual DOM")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { h } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'snabbdom'")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// h 函数用来创建 VNode，组件的产出是 VNode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" MyComponent = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("props")]),s._v(" =>")]),s._v(" {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'h1'")]),s._v(", props.title)\n}\n")])]),e("p",[s._v("渲染真实DOM,模板引擎是的完全替换 html, 而虚拟DOM会替换部分,这个过程叫 patch")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { h, init } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'snabbdom'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// init 方法用来创建 patch 函数")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" patch = init([])\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" MyComponent = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("props")]),s._v(" =>")]),s._v(" {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数式组件")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'h1'")]),s._v(", props.title)\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 组件的产出是 VNode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVnode = MyComponent({ "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("title")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'prev'")]),s._v(" })\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将 VNode 渲染成真实 DOM")]),s._v("\npatch("),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v("), prevVnode)\n")])]),e("p",[s._v("当数据变更时，组件会产出新的 VNode，我们只需再次调用 patch 函数即可：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 数据变更，产出新的 VNode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVnode = MyComponent({ "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("title")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'next'")]),s._v(" })\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过对比新旧 VNode，高效地渲染真实 DOM")]),s._v("\npatch(prevVnode, nextVnode)\n")])]),e("p",[s._v("为何组件要从直接产出 html 变成产出 Virtual DOM 呢？\n其原因是 Virtual DOM 带来了 分层设计，它对渲染过程的抽象，使得框架可以渲染到 web(浏览器) 以外的平台，以及能够实现 SSR 等。")]),e("h2",[s._v("VNode 渲染")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyComponent")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有状态组件")]),s._v("\n  render() {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// render 函数产出 VNode")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v("\n    }\n  }\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" elementVnode = {"),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v("}\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" componentVnode = {"),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": MyComponent}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("render")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" vnode.tag === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'string'")]),s._v(") {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// html 标签")]),s._v("\n    mountElement(vnode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 组件")]),s._v("\n    mountComponent(vnode, container)\n  }\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据 VNode 创建真实 DOM 并将其添加到容器中")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建元素")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElement(vnode.tag)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将元素添加到容器")]),s._v("\n  container.appendChild(el)\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建组件实例")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" instance = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" vnode.tag()\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 渲染")]),s._v("\n  instance.$vnode = instance.render()\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载")]),s._v("\n  mountElement(instance.$vnode, container)\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 把 elementVnode 渲染到 id 为 app 的元素下")]),s._v("\nrender(elementVnode, "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v("))\n")])]),e("p",[s._v("函数式组件：")]),e("ul",[e("li",[s._v("是一个纯函数")]),e("li",[s._v("没有自身状态，只接收外部数据")]),e("li",[s._v("产出 VNode 的方式：单纯的函数调用")])]),e("p",[s._v("有状态组件：")]),e("ul",[e("li",[s._v("是一个类，可实例化")]),e("li",[s._v("可以有自身状态")]),e("li",[s._v("产出 VNode 的方式：需要实例化，然后调用其 render 函数")])]),e("hr"),e("h1",[s._v("VNode")]),e("h2",[s._v("VNode 描述真实 DOM")]),e("p",[s._v("一个 html 标签有它的名字、属性、事件、样式、子节点等诸多信息，这些内容都需要在 VNode 中体现")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" elementVNode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("style")]),s._v(": {\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("width")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'100px'")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("height")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'100px'")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("backgroundColor")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v("\n    }\n  },\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": {   "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 子节点")]),s._v("\n    tag: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'span'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  }\n}\n")])]),e("p",[s._v("如果根元素并不是一个实实在在的真实 DOM，而是一个抽象的标识，即 Fragment 寓意是要渲染一个片段")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" Fragment = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v("()\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fragmentVNode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// tag 属性值是一个唯一标识")]),s._v("\n  tag: Fragment,\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": [\n    {\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'td'")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n    },\n    {\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'td'")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n    },\n    {\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'td'")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n    }\n  ]\n}\n")])]),e("p",[s._v("Portal,它允许你把内容渲染到任何地方,不受 DOM 层级关系限制")]),e("h2",[s._v("VNode 的种类")]),e("p",[s._v("我们可以把 VNode 分成五类，分别是：html/svg 元素、组件、纯文本、Fragment 以及 Portal")]),e("img",{staticClass:"router-post-body-image",attrs:{src:t("7de8")}}),e("p",[s._v("如上图所示，我们可以把组件细分为 有状态组件 和 函数式组件。同时有状态组件还可以细分为三部分：普通的有状态组件、需要被 keepAlive 的有状态组件 以及 已经被 keepAlive 的有状态组件 。")]),e("p",[s._v("但无论是普通的有状态组件还是 keepAlive 相关的有状态组件，它们都是有状态组件。所以我们在设计 VNode 时可以将它们作为一类看待。")]),e("h2",[s._v("枚举值 VNodeFlags")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" VNodeFlags = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// html 标签")]),s._v("\n  ELEMENT_HTML: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// SVG 标签")]),s._v("\n  ELEMENT_SVG: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 普通有状态组件")]),s._v("\n  COMPONENT_STATEFUL_NORMAL: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要被keepAlive的有状态组件")]),s._v("\n  COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 已经被keepAlive的有状态组件")]),s._v("\n  COMPONENT_STATEFUL_KEPT_ALIVE: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数式组件")]),s._v("\n  COMPONENT_FUNCTIONAL: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(",\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 纯文本")]),s._v("\n  TEXT: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Fragment")]),s._v("\n  FRAGMENT: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("7")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Portal")]),s._v("\n  PORTAL: "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("8")]),s._v("\n}\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// html 和 svg 都是标签元素，可以用 ELEMENT 表示")]),s._v("\nVNodeFlags.ELEMENT = VNodeFlags.ELEMENT_HTML | VNodeFlags.ELEMENT_SVG\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 普通有状态组件、需要被keepAlive的有状态组件、已经被keepAlice的有状态组件 都是“有状态组件”，统一用 COMPONENT_STATEFUL 表示")]),s._v("\nVNodeFlags.COMPONENT_STATEFUL =\n  VNodeFlags.COMPONENT_STATEFUL_NORMAL |\n  VNodeFlags.COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE |\n  VNodeFlags.COMPONENT_STATEFUL_KEPT_ALIVE\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有状态组件 和  函数式组件都是“组件”，用 COMPONENT 表示")]),s._v("\nVNodeFlags.COMPONENT = VNodeFlags.COMPONENT_STATEFUL | VNodeFlags.COMPONENT_FUNCTIONAL\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// html 元素节点")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" htmlVnode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": VNodeFlags.ELEMENT_HTML,\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// svg 元素节点")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" svgVnode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": VNodeFlags.ELEMENT_SVG,\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'svg'")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数式组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" functionalComponentVnode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": VNodeFlags.COMPONENT_FUNCTIONAL,\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": MyFunctionalComponent\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 普通的有状态组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" normalComponentVnode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": VNodeFlags.COMPONENT_STATEFUL_NORMAL,\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": MyStatefulComponent\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Fragment")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fragmentVnode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": VNodeFlags.FRAGMENT,\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识")]),s._v("\n  tag: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Portal")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" portalVnode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": VNodeFlags.PORTAL,\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识，tag 属性用来存储 Portal 的 target")]),s._v("\n  tag: target\n}\n")])]),e("hr"),e("h1",[s._v("h 函数")]),e("h2",[s._v("在VNode创建时确定其类型 - flags")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("h")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("tag, data = null, children = null")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" flags = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" tag === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'string'")]),s._v(") {\n    flags = tag === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'svg'")]),s._v(" ? VNodeFlags.ELEMENT_SVG : VNodeFlags.ELEMENT_HTML\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (tag === Fragment) {\n    flags = VNodeFlags.FRAGMENT\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (tag === Portal) {\n    flags = VNodeFlags.PORTAL\n    tag = data && data.target\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 兼容 Vue2 的对象式组件")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (tag !== "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" && "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" tag === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'object'")]),s._v(") {\n      flags = tag.functional\n        ? VNodeFlags.COMPONENT_FUNCTIONAL       "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数式组件")]),s._v("\n        : VNodeFlags.COMPONENT_STATEFUL_NORMAL  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有状态组件")]),s._v("\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" tag === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'function'")]),s._v(") {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Vue3 的类组件")]),s._v("\n      flags = tag.prototype && tag.prototype.render\n        ? VNodeFlags.COMPONENT_STATEFUL_NORMAL  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有状态组件")]),s._v("\n        : VNodeFlags.COMPONENT_FUNCTIONAL       "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数式组件")]),s._v("\n    }\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n    flags,\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 其他属性...")]),s._v("\n  }\n}\n")])]),e("h2",[s._v("在VNode创建时确定其children的类型")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("h")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("tag, data = null, children = null")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略用于确定 flags 相关的代码")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" childFlags = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".isArray(children)) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { length } = children\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (length === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 没有 children")]),s._v("\n      childFlags = ChildrenFlags.NO_CHILDREN\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (length === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 单个子节点")]),s._v("\n      childFlags = ChildrenFlags.SINGLE_VNODE\n      children = children["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 多个子节点，且子节点使用key")]),s._v("\n      childFlags = ChildrenFlags.KEYED_VNODES\n      children = normalizeVNodes(children)\n    }\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (children == "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 没有子节点")]),s._v("\n    childFlags = ChildrenFlags.NO_CHILDREN\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (children._isVNode) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 单个子节点")]),s._v("\n    childFlags = ChildrenFlags.SINGLE_VNODE\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 其他情况都作为文本节点处理，即单个子节点，会调用 createTextVNode 创建纯文本类型的 VNode")]),s._v("\n    childFlags = ChildrenFlags.SINGLE_VNODE\n    children = createTextVNode(children + "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(")\n  }\n}\n")])]),e("p",[s._v("首先，如果 children 是数组，则根据数组的长度来判断 children 的类型到底是 ChildrenFlags.NO_CHILDREN、ChildrenFlags.SINGLE_VNODE 还是 ChildrenFlags.KEYED_VNODES。")]),e("p",[s._v("这里大家可能会有疑问：“为什么多个子节点时会直接被当做使用了 key 的子节点？”，这是因为 key 是可以人为创造的，如下是 normalizeVNodes 函数的简化")]),e("p",[s._v("如果 children 不满足以上任何条件，则会把 children 作为纯文本节点的文本内容处理")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("normalizeVNodes")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("children")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" newChildren = []\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历 children")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < children.length; i++) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" child = children[i]\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (child.key == "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果原来的 VNode 没有key，则使用竖线(|)与该VNode在数组中的索引拼接而成的字符串作为key")]),s._v("\n      child.key = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'|'")]),s._v(" + i\n    }\n    newChildren.push(child)\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回新的children，此时 children 的类型就是 ChildrenFlags.KEYED_VNODES")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" newChildren\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("normalizeVNodes")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("children")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" newChildren = []\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历 children")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < children.length; i++) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" child = children[i]\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (child.key == "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果原来的 VNode 没有key，则使用竖线(|)与该VNode在数组中的索引拼接而成的字符串作为key")]),s._v("\n      child.key = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'|'")]),s._v(" + i\n    }\n    newChildren.push(child)\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 返回新的children，此时 children 的类型就是 ChildrenFlags.KEYED_VNODES")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" newChildren\n}\n")])]),e("h2",[s._v("使用 h 函数创建 VNode")]),e("p",[s._v("例子：\n假设有如下模板：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-html"}},[e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("span")]),s._v(">")]),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("span")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("我是文本"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("td")]),s._v(">")]),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("td")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("td")]),s._v(">")]),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("td")]),s._v(">")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("Portal")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("target")]),s._v("="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"#box"')]),s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("h1")]),s._v(">")]),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("h1")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("Portal")]),s._v(">")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("MyFunctionalComponent")]),s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("MyFunctionalComponent")]),s._v(">")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),e("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("template")]),s._v(">")]),s._v("\n")])]),e("p",[s._v("用 h 函数来创建与之相符的 VNode：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { h, Fragment, Portal } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./h'")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" elementVNode = h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'span'")]),s._v("))\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" elementWithTextVNode = h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'我是文本'")]),s._v(")\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fragmentVNode = h(Fragment, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", [\n  h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'td'")]),s._v("), h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'td'")]),s._v(")\n])\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" portalVNode = h(\n  Portal,\n  {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("target")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'#box'")]),s._v("\n  },\n  h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'h1'")]),s._v(")\n)\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 一个函数式组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyFunctionalComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{}\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 传递给 h 函数的第一个参数就是组件函数本身")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" functionalComponentVNode = h(MyFunctionalComponent, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v("))\n")])]),e("p",[s._v("得到的 VNode 对象如下：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" elementVNode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.ELEMENT_HTML")]),s._v("\n  tag: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.ELEMENT_HTML")]),s._v("\n    tag: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'span'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.NO_CHILDREN")]),s._v("\n    el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  },\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.SINGLE_VNODE")]),s._v("\n  el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" elementWithTextVNode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.ELEMENT_HTML")]),s._v("\n  tag: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("64")]),s._v(",  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.TEXT")]),s._v("\n    tag: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'我是文本'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.NO_CHILDREN")]),s._v("\n    el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  },\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.SINGLE_VNODE")]),s._v("\n  el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" fragmentVNode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("128")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.FRAGMENT")]),s._v("\n  data: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": [\n    {\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.ELEMENT_HTML")]),s._v("\n      tag: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'td'")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.NO_CHILDREN")]),s._v("\n      key: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'|0'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 自动生成的 key")]),s._v("\n      el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n    },\n    {\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.ELEMENT_HTML")]),s._v("\n      tag: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'td'")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.NO_CHILDREN")]),s._v("\n      key: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'|1'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 自动生成的 key")]),s._v("\n      el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n    }\n  ],\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.KEYED_VNODES")]),s._v("\n  el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" portalVNode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("256")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.PORTAL")]),s._v("\n  tag: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'#box'")]),s._v(",  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 类型为 Portal 的 VNode，其 tag 属性值等于 data.target")]),s._v("\n  data: { "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("target")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'#box'")]),s._v(" },\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.ELEMENT_HTML")]),s._v("\n    tag: "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'h1'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.NO_CHILDREN")]),s._v("\n    el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  },\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.SINGLE_VNODE")]),s._v("\n  el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" functionalComponentVNode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v(",  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.COMPONENT_FUNCTIONAL")]),s._v("\n  tag: MyFunctionalComponent, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// tag 属性值引用组件函数")]),s._v("\n  data: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("el")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  },\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ChildrenFlags.SINGLE_VNODE")]),s._v("\n  el: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n")])]),e("p",[s._v("在设计有状态组件时，我们会设计一个基础组件，所有组件都会继承基础组件，并且基础组件拥有用来报告错误信息的 render 函数，这就是我们可以通过以下代码来区分函数式组件和有状态组件的原因：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Vue3 的类组件")]),s._v("\nflags =\n  tag.prototype && tag.prototype.render\n    ? VNodeFlags.COMPONENT_STATEFUL_NORMAL "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有状态组件")]),s._v("\n    : VNodeFlags.COMPONENT_FUNCTIONAL "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数式组件")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我们再来使用 h 函数创建有状态组件的 VNode，如下：")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有状态组件应该继承 Component")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyStatefulComponent")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Component")]),s._v(" ")]),s._v("{}\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" statefulComponentVNode = h(MyStatefulComponent, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v("))\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 此时我们得到的 VNode 对象如下：")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" statefulComponentVNode = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// VNodeFlags.COMPONENT_STATEFUL_NORMAL")]),s._v("\n  data: "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_isVNode")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("flags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("tag")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("children")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("el")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  },\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("childFlags")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("el")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n")])]),e("hr"),e("h1",[s._v("渲染器之挂载")]),e("h2",[s._v("责任重大的渲染器")]),e("p",[s._v("所谓渲染器，简单的说就是将 Virtual DOM 渲染成特定平台下真实 DOM 的工具(就是一个函数，通常叫 render)，渲染器的工作流程分为两个阶段：mount 和 patch，如果旧的 VNode 存在，则会使用新的 VNode 与旧的 VNode 进行对比，试图以最小的资源开销完成 DOM 的更新，这个过程就叫 patch，或“打补丁”。如果旧的 VNode 不存在，则直接将新的 VNode 挂载成全新的 DOM，这个过程叫做 mount。")]),e("p",[s._v("通常渲染器接收两个参数，第一个参数是将要被渲染的 VNode 对象，第二个参数是一个用来承载内容的容器(container)，通常也叫挂载点。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("render")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = container.vnode\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevVNode == "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (vnode) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 没有旧的 VNode，只有新的 VNode。使用 `mount` 函数挂载全新的 VNode")]),s._v("\n      mount(vnode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将新的 VNode 添加到 container.vnode 属性下，这样下一次渲染时旧的 VNode 就存在了")]),s._v("\n      container.vnode = vnode\n    }\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (vnode) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有旧的 VNode，也有新的 VNode。则调用 `patch` 函数打补丁")]),s._v("\n      patch(prevVNode, vnode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新 container.vnode")]),s._v("\n      container.vnode = vnode\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有旧的 VNode 但是没有新的 VNode，这说明应该移除 DOM，在浏览器中可以使用 removeChild 函数。")]),s._v("\n      container.removeChild(prevVNode.el)\n      container.vnode = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n    }\n  }\n}\n")])]),e("ul",[e("li",[e("p",[s._v("控制部分组件生命周期钩子的调用\n在整个渲染周期中包含了大量的 DOM 操作、组件的挂载、卸载，控制着组件的生命周期钩子调用的时机。")])]),e("li",[e("p",[s._v("多端渲染的桥梁\n渲染器也是多端渲染的桥梁，自定义渲染器的本质就是把特定平台操作“DOM”的方法从核心算法中抽离，并提供可配置的方案。")])]),e("li",[e("p",[s._v("与异步渲染有直接关系\nVue3 的异步渲染是基于调度器的实现，若要实现异步渲染，组件的挂载就不能同步进行，DOM的变更就要在合适的时机，一些需要在真实DOM存在之后才能执行的操作(如 ref)也应该在合适的时机进行。对于时机的控制是由调度器来完成的，但类似于组件的挂载与卸载以及操作 DOM 等行为的入队还是由渲染器来完成的，这也是为什么 Vue2 无法轻易实现异步渲染的原因。")])]),e("li",[e("p",[s._v("包含最核心的 Diff 算法\nDiff 算法是渲染器的核心特性之一，可以说正是 Diff 算法的存在才使得 Virtual DOM 如此成功。")])])]),e("h2",[s._v("挂载标签元素")]),e("p",[s._v("mount 函数的作用是把一个 VNode 渲染成真实 DOM")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mount")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { flags } = vnode\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (flags & VNodeFlags.ELEMENT) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载普通标签")]),s._v("\n    mountElement(vnode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (flags & VNodeFlags.COMPONENT) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载组件")]),s._v("\n    mountComponent(vnode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (flags & VNodeFlags.TEXT) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载纯文本")]),s._v("\n    mountText(vnode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (flags & VNodeFlags.FRAGMENT) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载 Fragment")]),s._v("\n    mountFragment(vnode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (flags & VNodeFlags.PORTAL) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载 Portal")]),s._v("\n    mountPortal(vnode, container)\n  }\n}\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" isSVG = vnode.flags & VNodeFlags.ELEMENT_SVG\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = isSVG\n    ? "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElementNS("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://www.w3.org/2000/svg'")]),s._v(", vnode.tag)\n    : "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElement(vnode.tag)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 解决 不能严谨地处理 SVG 标签")]),s._v("\n    \n  vnode.el = el\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 解决 VNode 被渲染为真实DOM之后，没有引用真实DOM元素")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拿到 VNodeData")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" data = vnode.data\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (data) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果 VNodeData 存在，则遍历之")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// key 可能是 class、style、on 等等")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v("(key) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'style'")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果 key 的值是 style，说明是内联样式，逐个将样式规则应用到 el")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" k "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data.style) {\n            el.style[k] = data.style[k]\n          }\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n    }\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 解决 没有将 VNodeData 应用到元素上")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 递归挂载子节点")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拿到 children 和 childFlags")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" childFlags = vnode.childFlags\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" children = vnode.children\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 检测如果没有子节点则无需递归挂载")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (childFlags !== ChildrenFlags.NO_CHILDREN) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (childFlags & ChildrenFlags.SINGLE_VNODE) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是单个子节点则调用 mount 函数挂载")]),s._v("\n      mount(children, el)\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (childFlags & ChildrenFlags.MULTIPLE_VNODES) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是单多个子节点则遍历并调用 mount 函数挂载")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < children.length; i++) {\n        mount(children[i], el)\n      }\n    }\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 解决 没有继续挂载子节点，即 children")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" childFlags = vnode.childFlags\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (childFlags !== ChildrenFlags.NO_CHILDREN) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (childFlags & ChildrenFlags.SINGLE_VNODE) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里需要把 isSVG 传递下去")]),s._v("\n      mount(children, el, isSVG)\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (childFlags & ChildrenFlags.MULTIPLE_VNODES) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < children.length; i++) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里需要把 isSVG 传递下去")]),s._v("\n        mount(children[i], el, isSVG)\n      }\n    }\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 解决 svg 标签的子代元素挂载")]),s._v("\n\n  container.appendChild(el)\n}\n")])]),e("h2",[s._v("class的处理")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 数组")]),s._v("\ndynamicClass = ["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class-b'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class-c'")]),s._v("]\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 对象")]),s._v("\ndynamicClass = {\n  "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class-b'")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class-c'")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n}\n\nh("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(", {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("class")]),s._v(": ["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class-a'")]),s._v(", dynamicClass]\n})\n")])]),e("p",[s._v("在框架设计中比较重要的概念：应用层的设计，这是框架设计的核心，在设计一个功能的时候，你首先要考虑的应该是应用层的使用，然后再考虑如何与底层衔接。还是以 class 为例，为一个标签元素设置类名的方法是可定的(调用 el.className 或 setAttribute)，关键就在于你想在应用层做出怎样的设计，很自然的你要思考如何转化应用层的数据结构与底层衔接。")]),e("h2",[s._v("Attributes 和 DOM Properties")]),e("p",[s._v("DOM的 Attributes 以及 Properties， 分别简称他们为 attr 和 DOM Prop。")]),e("p",[s._v("Attr 指的就是那些存在于标签上的属性，而 DOM Prop 就是存在于DOM对象上的属性。但是当标签上存在非标准属性时，该属性不会被转化为 DOM Prop")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// checkbox 元素")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" checkboxEl = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".querySelector("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'input'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使用 setAttribute 设置 checked 属性为 false")]),s._v("\ncheckboxEl.setAttribute("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'checked'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(")\n\n"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(checkboxEl.checked) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),e("p",[s._v("可以看到虽然我们使用 setAttribute 函数将复选框的 checked 属性设置为 false，但是当我们访问 checkboxEl.checked 时得到的依然是 true，这是因为在 setAttribute 函数为元素设置属性时，无论你传递的值是什么类型，它都会将该值转为字符串再设置到元素上，所以如下两句代码是等价的：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkboxEl.setAttribute("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'checked'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等价于")]),s._v("\ncheckboxEl.setAttribute("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'checked'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'false'")]),s._v(")\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" domPropsRE = "),e("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\[A-Z]|^(?:value|checked|selected|muted)$/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" data = vnode.data\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (data) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (key) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'style'")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" k "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data.style) {\n            el.style[k] = data.style[k]\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class'")]),s._v(":\n          el.className = data[key]\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (domPropsRE.test(key)) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当作 DOM Prop 处理")]),s._v("\n            el[key] = data[key]\n          } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当作 Attr 处理")]),s._v("\n            el.setAttribute(key, data[key])\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n    }\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n}\n")])]),e("h2",[s._v("事件的处理")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" data = vnode.data\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (data) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (key) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'style'")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" k "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data.style) {\n            el.style[k] = data.style[k]\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class'")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (isSVG) {\n            el.setAttribute("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class'")]),s._v(", data[key])\n          } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            el.className = data[key]\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (key["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'o'")]),s._v(" && key["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'n'")]),s._v(") {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 事件")]),s._v("\n            el.addEventListener(key.slice("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("), data[key])\n          } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (domPropsRE.test(key)) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当作 DOM Prop 处理")]),s._v("\n            el[key] = data[key]\n          } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当作 Attr 处理")]),s._v("\n            el.setAttribute(key, data[key])\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n    }\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n}\n")])]),e("h2",[s._v("挂载纯文本、Fragment 和 Portal")]),e("h3",[s._v("挂载文本节点")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountText")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createTextNode(vnode.children)\n  vnode.el = el\n  container.appendChild(el)\n}\n")])]),e("h3",[s._v("挂载 Fragment")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountFragment")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { children, childFlags } = vnode\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (childFlags) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n      mount(children, container, isSVG)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 单个子节点，就指向该节点")]),s._v("\n      vnode.el = children.el\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.NO_CHILDREN:\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" placeholder = createTextVNode("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(")\n      mountText(placeholder, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 没有子节点指向占位的空文本节点")]),s._v("\n      vnode.el = placeholder.el\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < children.length; i++) {\n        mount(children[i], container, isSVG)\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 多个子节点，指向第一个子节点")]),s._v("\n      vnode.el = children["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("].el\n  }\n}\n")])]),e("p",[s._v("那么这样设计有什么意义呢？这是因为在 patch 阶段对DOM元素进行移动时，应该确保将其放到正确的位置，而不应该始终使用 appendChild 函数，有时需要使用 insertBefore 函数，这时候我们就需要拿到相应的节点引用，这时候 vnode.el 属性是必不可少的，就像上面的代码中即使 Fragment 没有子节点我们依然需要一个占位的空文本节点作为位置的引用。")]),e("h3",[s._v("挂载 Portal")]),e("p",[s._v("Portal 可以不严谨地认为是可以被到处挂载的 Fragment")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountPortal")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { tag, children, childFlags } = vnode\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" target = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" tag === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'string'")]),s._v(" ? "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".querySelector(tag) : tag\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (childFlags & ChildrenFlags.SINGLE_VNODE) {\n    mount(children, target)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (childFlags & ChildrenFlags.MULTIPLE_VNODES) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < children.length; i++) {\n      mount(children[i], target)\n    }\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 占位的空文本节点")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" placeholder = createTextVNode("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(")\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将该节点挂载到 container 中")]),s._v("\n  mountText(placeholder, container, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(")\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// el 属性引用该节点")]),s._v("\n  vnode.el = placeholder.el\n}\n")])]),e("h3",[s._v("有状态组件的挂载和原理")]),e("p",[s._v("第一步：创建组件实例\n如果一个 VNode 描述的是有状态组件，那么 vnode.tag 属性值就是组件类的引用，所以通过 new 关键字创建组件实例。")]),e("p",[s._v("第二步：获取组件产出的 VNode\n一个组件的核心就是其 render 函数，通过调用 render 函数可以拿到该组件要渲染的内容。")]),e("p",[s._v("第三步：mount 挂载\n既然已经拿到了 VNode，那么就将其挂载到 container 上就可以了。")]),e("p",[s._v("第四步：让组件实例的 $el 属性和 vnode.el 属性的值引用组件的根DOM元素\n组件的 render 函数会返回该组件产出的 VNode，当该 VNode 被挂载为真实DOM之后，就可以通过 instance.$vnode.el 元素拿到组件的根DOM元素，接着我们就可以让组件实例的 $el 属性和 vnode.el 属性的值都引用该DOM元素。如果组件的 render 返回的是一个片段(Fragment)，那么 instance.$el 和 vnode.el 引用的就是该片段的第一个DOM元素。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (vnode.flags & VNodeFlags.COMPONENT_STATEFUL) {\n    mountStatefulComponent(vnode, container, isSVG)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    mountFunctionalComponent(vnode, container, isSVG)\n  }\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountStatefulComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建组件实例")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" instance = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" vnode.tag()\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 渲染VNode")]),s._v("\n  instance.$vnode = instance.render()\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载")]),s._v("\n  mount(instance.$vnode, container, isSVG)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// el 属性值 和 组件实例的 $el 属性都引用组件的根DOM元素")]),s._v("\n  instance.$el = vnode.el = instance.$vnode.el\n}\n")])]),e("h3",[s._v("函数式组件的挂载和原理")]),e("p",[s._v("在挂载函数式组件的时候，比挂载有状态组件少了一个实例化的过程，如果一个 VNode 描述的是函数式组件，那么其 tag 属性值就是该函数的引用")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountFunctionalComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取 VNode")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" $vnode = vnode.tag()\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载")]),s._v("\n  mount($vnode, container, isSVG)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// el 元素引用该组件的根元素")]),s._v("\n  vnode.el = $vnode.el\n}\n")])]),e("p",[s._v("实际上如果对于 有状态组件 和 函数式组件 具体的区别不太了解的同学看到这里或许会产生疑问，觉得 有状态组件 的实例化很多余，实际上实例化是必须的，因为 有状态组件 在实例化的过程中会初始化一系列 有状态组件 所特有的东西，诸如 data(或state)、computed、watch、生命周期等等。而函数式组件只有 props 和 slots，它要做的工作很少，所以性能上会更好。")]),e("hr"),e("h1",[s._v("渲染器之patch")]),e("p",[s._v("渲染器除了将全新的 VNode 挂载成真实DOM之外，它的另外一个职责是负责对新旧 VNode 进行比对，并以合适的方式更新DOM，也就是我们常说的 patch。")]),e("h2",[s._v("基本原则")]),e("p",[s._v("通常重渲染(re-render)是由组件的更新开始的，因为在框架的使用层面开发者通过变更数据状态从而引起框架内部对UI的自动更新，但是组件的更新本质上还是对真实DOM的更新，或者说是对标签元素的更新。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("render")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = container.vnode\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevVNode == "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (vnode) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 没有旧的 VNode，使用 `mount` 函数挂载全新的 VNode")]),s._v("\n      mount(vnode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将新的 VNode 添加到 container.vnode 属性下，这样下一次渲染时旧的 VNode 就存在了")]),s._v("\n      container.vnode = vnode\n    }\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (vnode) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有旧的 VNode，则调用 `patch` 函数打补丁")]),s._v("\n      patch(prevVNode, vnode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新 container.vnode")]),s._v("\n      container.vnode = vnode\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有旧的 VNode 但是没有新的 VNode，这说明应该移除 DOM，在浏览器中可以使用 removeChild 函数。")]),s._v("\n      container.removeChild(prevVNode.el)\n      container.vnode = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n    }\n  }\n}\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 VNode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(")\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 VNode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'span'")]),s._v(")\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 第一次渲染 VNode 到 #app，此时会调用 mount 函数")]),s._v("\nrender(prevVNode, "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v("))\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 第二次渲染新的 VNode 到相同的 #app 元素，此时会调用 patch 函数")]),s._v("\nrender(nextVNode, "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v("))\n")])]),e("p",[s._v("不同的 VNode 之间第一个比对原则就是：只有相同类型的 VNode 才有比对的意义，例如我们有两个 VNode，其中一个 VNode 的类型是标签元素，而另一个 VNode 的类型是组件，当这两个 VNode 进行比对时，最优的做法是使用新的 VNode 完全替换旧的 VNode。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patch")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 分别拿到新旧 VNode 的类型，即 flags")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextFlags = nextVNode.flags\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevFlags = prevVNode.flags\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 检查新旧 VNode 的类型是否相同，如果类型不同，则直接调用 replaceVNode 函数替换 VNode")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新旧 VNode 的类型相同，则根据不同的类型调用不同的比对函数")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevFlags !== nextFlags) {\n    replaceVNode(prevVNode, nextVNode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextFlags & VNodeFlags.ELEMENT) {\n    patchElement(prevVNode, nextVNode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextFlags & VNodeFlags.COMPONENT) {\n    patchComponent(prevVNode, nextVNode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextFlags & VNodeFlags.TEXT) {\n    patchText(prevVNode, nextVNode)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextFlags & VNodeFlags.FRAGMENT) {\n    patchFragment(prevVNode, nextVNode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextFlags & VNodeFlags.PORTAL) {\n    patchPortal(prevVNode, nextVNode)\n  }\n}\n")])]),e("p",[s._v("核心原则是：如果类型不同，则直接调用 replaceVNode 函数使用新的 VNode 替换旧的 VNode，否则根据不同的类型调用与之相符的比对函数。")]),e("h2",[s._v("替换 VNode")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 VNode 是一个 div 标签")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'旧的 VNode'")]),s._v(")\n\n"),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyComponent")]),s._v(" ")]),s._v("{\n  render () {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'h1'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'新的 VNode'")]),s._v(")\n  }\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 VNode 是一个组件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = h(MyComponent)\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 先后渲染新旧 VNode 到 #app")]),s._v("\nrender(prevVNode, "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v("))\nrender(nextVNode, "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v("))\n")])]),e("p",[s._v("替换操作并不复杂，本质就是把旧的 VNode 所渲染的DOM移除，再挂载新的 VNode")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("replaceVNode")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将旧的 VNode 所渲染的 DOM 从容器中移除")]),s._v("\n  container.removeChild(prevVNode.el)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 再把新的 VNode 挂载到容器中")]),s._v("\n  mount(nextVNode, container)\n}\n")])]),e("h2",[s._v("更新标签元素")]),e("h3",[s._v("更新标签元素的基本原则")]),e("p",[s._v("我们认为不同的标签渲染的内容不同。")]),e("p",[s._v("相同标签拥有不同样式时,先将红色背景从元素上移除，再为元素添加绿色边框。")]),e("p",[s._v("宏观化：将新的 VNodeData 全部应用到元素上，再把那些已经不存在于新的 VNodeData 上的数据从元素上移除。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 VNode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(", {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("style")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("width")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'100px'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("height")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'100px'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("backgroundColor")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v("\n  }\n})\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 VNode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(", {\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("style")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("width")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'100px'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("height")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'100px'")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("border")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'1px solid green'")]),s._v("\n  }\n})\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新旧 VNode 描述的是不同的标签，则调用 replaceVNode 函数，使用新的 VNode 替换旧的 VNode")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevVNode.tag !== nextVNode.tag) {\n    replaceVNode(prevVNode, nextVNode, container)\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v("\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拿到 el 元素，注意这时要让 nextVNode.el 也引用该元素")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = (nextVNode.el = prevVNode.el)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拿到 新旧 VNodeData")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevData = prevVNode.data\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextData = nextVNode.data\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 VNodeData 存在时才有必要更新")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextData) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新的 VNodeData")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" nextData) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据 key 拿到新旧 VNodeData 值")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevValue = prevData[key]\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextValue = nextData[key]\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (key) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'style'")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新 VNodeData 中的 style 数据，将新的样式应用到元素")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" k "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" nextValue) {\n            el.style[k] = nextValue[k]\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧 VNodeData 中的 style 数据，将已经不存在于新的 VNodeData 的数据移除")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" k "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" prevValue) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!nextValue.hasOwnProperty(k)) {\n              el.style[k] = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v("\n            }\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n    }\n  }\n}\n")])]),e("p",[s._v("我们在更新 VNodeData 时的思路分为以下几步：\n第 1 步：当新的 VNodeData 存在时，遍历新的 VNodeData。\n第 2 步：根据新 VNodeData 中的 key，分别尝试读取旧值和新值，即 prevValue 和 nextValue。\n第 3 步：使用 switch...case 语句匹配不同的数据进行不同的更新操作")]),e("p",[s._v("以样式(style)的更新为例，如上代码所展示的更新过程是：\n1 ：遍历新的样式数据(prevValue)，将新的样式数据全部应用到元素上\n2 ：遍历旧的样式数据(nextValue)，将那些已经不存在于新的样式数据中的样式从元素上移除，最终我们完成了元素样式的更新。")]),e("h3",[s._v("更新 VNodeData")]),e("p",[s._v("patchData 函数修改 patchElement 函数的代码")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新旧 VNode 描述的是不同的标签，则调用 replaceVNode 函数，使用新的 VNode 替换旧的 VNode")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevVNode.tag !== nextVNode.tag) {\n    replaceVNode(prevVNode, nextVNode, container)\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v("\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拿到 el 元素，注意这时要让 nextVNode.el 也引用该元素")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = (nextVNode.el = prevVNode.el)\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevData = prevVNode.data\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextData = nextVNode.data\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextData) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新的 VNodeData，将旧值和新值都传递给 patchData 函数")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" nextData) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevValue = prevData[key]\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextValue = nextData[key]\n      patchData(el, key, prevValue, nextValue)\n    }\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevData) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧的 VNodeData，将已经不存在于新的 VNodeData 中的数据移除")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" prevData) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevValue = prevData[key]\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevValue && !nextData.hasOwnProperty(key)) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 第四个参数为 null，代表移除数据")]),s._v("\n        patchData(el, key, prevValue, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(")\n      }\n    }\n  }\n}\n")])]),e("p",[s._v("历新的 VNodeData，将旧值和新值都传递给 patchData 函数，并由 patchData 函数负责更新数据；同时也需要遍历旧的 VNodeData，将已经不存在于新的 VNodeData 中的数据从元素上移除。")]),e("p",[s._v("patchData 函数：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchData")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("el, key, prevValue, nextValue")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'style'")]),s._v(":\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" k "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" nextValue) {\n        el.style[k] = nextValue[k]\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" k "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" prevValue) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!nextValue.hasOwnProperty(k)) {\n          el.style[k] = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v("\n        }\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class'")]),s._v(":\n      el.className = nextValue\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (key["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'o'")]),s._v(" && key["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'n'")]),s._v(") {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 事件")]),s._v("\n        el.addEventListener(key.slice("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("), nextValue)\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (domPropsRE.test(key)) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当作 DOM Prop 处理")]),s._v("\n        el[key] = nextValue\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当作 Attr 处理")]),s._v("\n        el.setAttribute(key, nextValue)\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n  }\n}\n")])]),e("p",[s._v("这样 patchData 函数就能够用来处理 style、class、DOM Prop 以及 Attr 的更新操作，并且可以同时满足 mountElement 和 patchElement 的需求。但 patchData 函数还不能够满足事件的更新操作，因为当新的 VNodeData 中已经不包含某个事件时，我们需要将旧的事件回调函数移除.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchData")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("el, key, prevValue, nextValue")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'style'")]),s._v(":\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略处理样式的代码...")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class'")]),s._v(":\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略处理 class 的代码...")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (key["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("] === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'o'")]),s._v(" && key["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("] === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'n'")]),s._v(") {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 事件")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 移除旧事件")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevValue) {\n          el.removeEventListener(key.slice("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("), prevValue)\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 添加新事件")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextValue) {\n          el.addEventListener(key.slice("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("), nextValue)\n        }\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (domPropsRE.test(key)) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当作 DOM Prop 处理")]),s._v("\n        el[key] = nextValue\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当作 Attr 处理")]),s._v("\n        el.setAttribute(key, nextValue)\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n  }\n}\n")])]),e("h3",[s._v("更新子节点")]),e("p",[s._v("patchElement 函数中最后一步需要做的事情就是递归地更新子节点")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新旧 VNode 描述的是不同的标签，则调用 replaceVNode 函数，使用新的 VNode 替换旧的 VNode")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevVNode.tag !== nextVNode.tag) {\n    replaceVNode(prevVNode, nextVNode, container)\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v("\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拿到 el 元素，注意这时要让 nextVNode.el 也引用该元素")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = (nextVNode.el = prevVNode.el)\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevData = prevVNode.data\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextData = nextVNode.data\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextData) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新的 VNodeData，将旧值和新值都传递给 patchData 函数")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" nextData) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevValue = prevData[key]\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextValue = nextData[key]\n      patchData(el, key, prevValue, nextValue)\n    }\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevData) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧的 VNodeData，将已经不存在于新的 VNodeData 中的数据移除")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" prevData) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevValue = prevData[key]\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevValue && !nextData.hasOwnProperty(key)) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 第四个参数为 null，代表移除数据")]),s._v("\n        patchData(el, key, prevValue, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(")\n      }\n    }\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 patchChildren 函数递归地更新子节点")]),s._v("\n  patchChildren(\n    prevVNode.childFlags, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 VNode 子节点的类型")]),s._v("\n    nextVNode.childFlags, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 VNode 子节点的类型")]),s._v("\n    prevVNode.children,   "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 VNode 子节点")]),s._v("\n    nextVNode.children,   "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 VNode 子节点")]),s._v("\n    el                    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当前标签元素，即这些子节点的父节点")]),s._v("\n  )\n}\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchChildren")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n  prevChildFlags,\n  nextChildFlags,\n  prevChildren,\n  nextChildren,\n  container\n")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (prevChildFlags) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (nextChildFlags) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 此时 prevChildren 和 nextChildren 都是 VNode 对象")]),s._v("\n          patch(prevChildren, nextChildren, container)\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.NO_CHILDREN:\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 children 中没有子节点时，会执行该 case 语句块")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 children 中有多个子节点时，会执行该 case 语句块")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  }\n}\n")])]),e("p",[s._v("想办法把已经渲染好了的 DOM 元素从页面上移除。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchChildren")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n  prevChildFlags,\n  nextChildFlags,\n  prevChildren,\n  nextChildren,\n  container\n")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (prevChildFlags) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 children 是单个子节点，会执行该 case 语句块")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (nextChildFlags) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 children 也是单个子节点时，会执行该 case 语句块")]),s._v("\n          patch(prevChildren, nextChildren, container)\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.NO_CHILDREN:\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 children 中没有子节点时，会执行该 case 语句块")]),s._v("\n          container.removeChild(prevChildren.el)\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 children 中有多个子节点时，会执行该 case 语句块")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  }\n}\n")])]),e("p",[s._v("将旧的单个子节点移除，再将新的多个子节点挂载上去")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchChildren")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n  prevChildFlags,\n  nextChildFlags,\n  prevChildren,\n  nextChildren,\n  container\n")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (prevChildFlags) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 children 是单个子节点，会执行该 case 语句块")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (nextChildFlags) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n          patch(prevChildren, nextChildren, container)\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.NO_CHILDREN:\n          container.removeChild(prevChildren.el)\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 移除旧的单个子节点")]),s._v("\n          container.removeChild(prevChildren.el)\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新的多个子节点，逐个挂载到容器中")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < nextChildren.length; i++) {\n            mount(nextChildren[i], container)\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  }\n}\n")])]),e("p",[s._v("情况一：有多个旧的子节点，但新的子节点是单个子节点，这时只需要把所有旧的子节点移除，再将新的单个子节点添加到容器元素即可。\n情况二：有多个旧的子节点，但没有新的子节点，这时只需要把所有旧的子节点移除即可。\n情况三：新旧子节点都是多个子节点，这时将进入到至关重要的一步，即核心 diff 算法的用武之地。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchChildren")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n  prevChildFlags,\n  nextChildFlags,\n  prevChildren,\n  nextChildren,\n  container\n")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (prevChildFlags) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 children 中有多个子节点时，会执行该 case 语句块")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (nextChildFlags) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < prevChildren.length; i++) {\n            container.removeChild(prevChildren[i].el)\n          }\n          mount(nextChildren, container)\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.NO_CHILDREN:\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < prevChildren.length; i++) {\n            container.removeChild(prevChildren[i].el)\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧的子节点，将其全部移除")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < prevChildren.length; i++) {\n            container.removeChild(prevChildren[i].el)\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新的子节点，将其全部添加")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < nextChildren.length; i++) {\n            mount(nextChildren[i], container)\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n  }\n}\n")])]),e("p",[s._v("真正的核心 diff 算法我们将会在下一章统一着重讲解，简化版本的实现如上。")]),e("h2",[s._v("更新文本节点")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建一个文本节点")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" textEl = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createTextNode("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(")\ntextEl.nodeValue  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'a'")]),s._v("\ntextEl.nodeValue = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v("\ntextEl.nodeValue  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'b'")]),s._v("\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchText")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拿到文本元素 el，同时让 nextVNode.el 指向该文本元素")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = (nextVNode.el = prevVNode.el)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 只有当新旧文本内容不一致时才有必要更新")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.children !== prevVNode.children) {\n    el.nodeValue = nextVNode.children\n  }\n}\n")])]),e("h2",[s._v("更新 Fragment")]),e("p",[s._v("片段的更新是简化版的标签元素的更新")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchFragment")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 直接调用 patchChildren 函数更新 新旧片段的子节点即可")]),s._v("\n  patchChildren(\n    prevVNode.childFlags, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧片段的子节点类型")]),s._v("\n    nextVNode.childFlags, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新片段的子节点类型")]),s._v("\n    prevVNode.children,   "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧片段的子节点")]),s._v("\n    nextVNode.children,   "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新片段的子节点")]),s._v("\n    container\n  )\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (nextVNode.childFlags) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n      nextVNode.el = nextVNode.children.el\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.NO_CHILDREN:\n      nextVNode.el = prevVNode.el\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n      nextVNode.el = nextVNode.children["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("].el\n  }\n}\n")])]),e("h2",[s._v("更新 Portal")]),e("p",[s._v("不严谨但很直观的比喻：可以把 Portal 当作可以到处挂载的 Fragment。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchPortal")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode")]),s._v(") ")]),s._v("{\n  patchChildren(\n    prevVNode.childFlags,\n    nextVNode.childFlags,\n    prevVNode.children,\n    nextVNode.children,\n    prevVNode.tag "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 注意 container 是旧的 container")]),s._v("\n  )\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 让 nextVNode.el 指向 prevVNode.el")]),s._v("\n  nextVNode.el = prevVNode.el\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新旧容器不同，才需要搬运")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.tag !== prevVNode.tag) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取新的容器元素，即挂载目标")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" container =\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" nextVNode.tag === "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'string'")]),s._v("\n        ? "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".querySelector(nextVNode.tag)\n        : nextVNode.tag\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (nextVNode.childFlags) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新的 Portal 是单个子节点，就把该节点搬运到新容器中")]),s._v("\n        container.appendChild(nextVNode.children.el)\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.NO_CHILDREN:\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 Portal 没有子节点，不需要搬运")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新的 Portal 是多个子节点，遍历逐个将它们搬运到新容器中")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < nextVNode.children.length; i++) {\n          container.appendChild(nextVNode.children[i].el)\n        }\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n    }\n  }\n}\n")])]),e("h2",[s._v("有状态组件的更新")]),e("p",[s._v("有状态组件来说它的更新方式有两种：主动更新 和 被动更新。")]),e("p",[s._v("所谓主动更新指的是组件自身的状态发生变化所导致的更新，它除了自身状态之外，很可能还包含从父组件传递进来的外部状态(props)，所以父组件自身状态的变化很可能引起子组件外部状态的变化，此时就需要更新子组件，像这种因为外部状态变化而导致的组件更新就叫做被动更新。")]),e("h3",[s._v("主动更新")]),e("p",[s._v("数据变化之后需要重新执行渲染函数，得到新的 VNode。")]),e("p",[s._v("组件挂载的核心步骤分为三步：1、创建组件实例，2、调用组件的 render 获得 VNode，3、将 VNode 挂载到容器元素。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountStatefulComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建组件实例")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" instance = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" vnode.tag()\n\n  instance._update = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果 instance._mounted 为真，说明组件已挂载，应该执行更新操作")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (instance._mounted) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1、拿到旧的 VNode")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = instance.$vnode\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2、重渲染新的 VNode")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = (instance.$vnode = instance.render())\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3、patch 更新")]),s._v("\n      patch(prevVNode, nextVNode, prevVNode.el.parentNode)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4、更新 vnode.el 和 $el")]),s._v("\n      instance.$el = vnode.el = instance.$vnode.el\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1、渲染VNode")]),s._v("\n      instance.$vnode = instance.render()\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2、挂载")]),s._v("\n      mount(instance.$vnode, container, isSVG)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3、组件已挂载的标识")]),s._v("\n      instance._mounted = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 4、el 属性值 和 组件实例的 $el 属性都引用组件的根DOM元素")]),s._v("\n      instance.$el = vnode.el = instance.$vnode.el\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5、调用 mounted 钩子")]),s._v("\n      instance.mounted && instance.mounted()\n    }\n  }\n\n  instance._update()\n}\n")])]),e("h3",[s._v("初步了解组件的外部状态 props")]),e("p",[s._v("组件的被动更新是由组件的外部状态变化所导致的，而 props 就是组件的外部状态。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountStatefulComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建组件实例")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" instance = (vnode.children = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" vnode.tag())\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 初始化 props")]),s._v("\n  instance.$props = vnode.data\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n}\n")])]),e("h3",[s._v("被动更新")]),e("p",[s._v("被动更新指的是由外部状态变化而引起的更新操作，通常父组件自身状态的变化可能会引起子组件的更新。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 子组件类")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ChildComponent")]),s._v(" ")]),s._v("{\n  render() {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 子组件中访问外部状态：this.$props.text")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" h("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$props.text)\n  }\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 父组件类")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ParentComponent")]),s._v(" ")]),s._v("{\n  localState = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'one'")]),s._v("\n\n  mounted() {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 两秒钟后将 localState 的值修改为 'two'")]),s._v("\n    setTimeout("),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".localState = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'two'")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("._update()\n    }, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2000")]),s._v(")\n  }\n\n  render() {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" h(ChildComponent, {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 父组件向子组件传递的 props")]),s._v("\n      text: "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".localState\n    })\n  }\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 有状态组件 VNode")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" compVNode = h(ParentComponent)\nrender(compVNode, "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".getElementById("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'app'")]),s._v("))\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 检查组件是否是有状态组件")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.flags & VNodeFlags.COMPONENT_STATEFUL_NORMAL) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1、获取组件实例")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" instance = (nextVNode.children = prevVNode.children)\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2、更新 props")]),s._v("\n    instance.$props = nextVNode.data\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3、更新组件")]),s._v("\n    instance._update()\n  }\n}\n")])]),e("h2",[s._v("函数式组件的更新")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountFunctionalComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{\n  vnode.handle = {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("prev")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": vnode,\n    container,\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("update")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (vnode.handle.prev) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// prevVNode 是旧的组件VNode，nextVNode 是新的组件VNode")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = vnode.handle.prev\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = vnode.handle.next\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// prevTree 是组件产出的旧的 VNode")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevTree = prevVNode.children\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新 props 数据")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" props = nextVNode.data\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// nextTree 是组件产出的新的 VNode")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextTree = (nextVNode.children = nextVNode.tag(props))\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 patch 函数更新")]),s._v("\n        patch(prevTree, nextTree, vnode.handle.container)\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取 props")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" props = vnode.data\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取 VNode")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" $vnode = (vnode.children = vnode.tag(props))\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载")]),s._v("\n        mount($vnode, container, isSVG)\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// el 元素引用该组件的根元素")]),s._v("\n        vnode.el = $vnode.el\n      }\n    }\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 立即调用 vnode.handle.update 完成初次挂载")]),s._v("\n  vnode.handle.update()\n}\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.tag !== prevVNode.tag) {\n    replaceVNode(prevVNode, nextVNode, container)\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.flags & VNodeFlags.COMPONENT_STATEFUL_NORMAL) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新函数式组件")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过 prevVNode.handle 拿到 handle 对象")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" handle = (nextVNode.handle = prevVNode.handle)\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新 handle 对象")]),s._v("\n    handle.prev = prevVNode\n    handle.next = nextVNode\n    handle.container = container\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 update 函数完成更新")]),s._v("\n    handle.update()\n  }\n}\n")])]),e("hr"),e("h1",[s._v("渲染器的核心 Diff 算法")]),e("h2",[s._v("减小DOM操作的性能开销")]),e("p",[s._v("只有当新旧子节点的类型都是多个子节点时，核心 Diff 算法才派得上用场。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchChildren")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n  prevChildFlags,\n  nextChildFlags,\n  prevChildren,\n  nextChildren,\n  container\n")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (prevChildFlags) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 旧的 children 中有多个子节点")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("switch")]),s._v(" (nextChildFlags) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.SINGLE_VNODE:\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("case")]),s._v(" ChildrenFlags.NO_CHILDREN:\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(":\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新的 children 中有多个子节点")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取公共长度，取新旧 children 长度较小的那一个")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevLen = prevChildren.length\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextLen = nextChildren.length\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" commonLength = prevLen > nextLen ? nextLen : prevLen\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < commonLength; i++) {\n            patch(prevChildren[i], nextChildren[i], container)\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果 nextLen > prevLen，将多出来的元素添加")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextLen > prevLen) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = commonLength; i < nextLen; i++) {\n              mount(nextChildren[i], container)\n            }\n          } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (prevLen > nextLen) {\n            "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果 prevLen > nextLen，将多出来的元素移除")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = commonLength; i < prevLen; i++) {\n              container.removeChild(prevChildren[i].el)\n            }\n          }\n          "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n  }\n}\n")])]),e("h2",[s._v("尽可能的复用 DOM 元素")]),e("h3",[s._v("key的作用")]),e("p",[s._v("通过移动元素的位置来达到更新的目的。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新的 children")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < nextChildren.length; i++) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = nextChildren[i]\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" j = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧的 children")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" (j; j < prevChildren.length; j++) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = prevChildren[j]\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更新之")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.key === prevVNode.key) {\n      patch(prevVNode, nextVNode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里需要 break")]),s._v("\n    }\n  }\n}\n")])]),e("h3",[s._v("找到需要移动的节点")]),e("p",[s._v("如果在寻找的过程中遇到的索引呈现递增趋势，则说明新旧 children 中节点顺序相同，不需要移动操作。相反的，如果在寻找的过程中遇到的索引值不呈现递增趋势，则说明需要移动操作。")]),e("p",[s._v("寻找过程中在旧 children 中所遇到的最大索引值。如果在后续寻找的过程中发现存在索引值比最大索引值小的节点，意味着该节点需要被移动。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 用来存储寻找过程中遇到的最大索引值")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" lastIndex = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新的 children")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < nextChildren.length; i++) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = nextChildren[i]\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" j = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧的 children")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" (j; j < prevChildren.length; j++) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = prevChildren[j]\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更新之")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.key === prevVNode.key) {\n      patch(prevVNode, nextVNode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (j < lastIndex) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要移动")]),s._v("\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新 lastIndex")]),s._v("\n        lastIndex = j\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里需要 break")]),s._v("\n    }\n  }\n}\n")])]),e("h3",[s._v("移动节点")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 用来存储寻找过程中遇到的最大索引值")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" lastIndex = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历新的 children")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < nextChildren.length; i++) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = nextChildren[i]\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" j = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧的 children")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" (j; j < prevChildren.length; j++) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = prevChildren[j]\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更新之")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.key === prevVNode.key) {\n      patch(prevVNode, nextVNode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (j < lastIndex) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要移动")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// refNode 是为了下面调用 insertBefore 函数准备的")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" refNode = nextChildren[i - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("].el.nextSibling\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 insertBefore 函数移动 DOM")]),s._v("\n        container.insertBefore(prevVNode.el, refNode)\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新 lastIndex")]),s._v("\n        lastIndex = j\n      }\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里需要 break")]),s._v("\n    }\n  }\n}\n")])]),e("h3",[s._v("添加新元素")]),e("p",[s._v("如果内层循环结束后，变量 find 的值仍然为 false，则说明在旧的 children 中找不到可复用的节点。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" lastIndex = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < nextChildren.length; i++) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = nextChildren[i]\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" j = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(",\n    find = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" (j; j < prevChildren.length; j++) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = prevChildren[j]\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (nextVNode.key === prevVNode.key) {\n      find = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n      patch(prevVNode, nextVNode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (j < lastIndex) {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要移动")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" refNode = nextChildren[i - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("].el.nextSibling\n        container.insertBefore(prevVNode.el, refNode)\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新 lastIndex")]),s._v("\n        lastIndex = j\n      }\n    }\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!find) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载新节点")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 找到 refNode")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" refNode =\n      i - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" < "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n        ? prevChildren["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("].el\n        : nextChildren[i - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("].el.nextSibling\n    mount(nextVNode, container, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", refNode)\n  }\n}\n")])]),e("p",[s._v("调用 mount 函数挂载新节点时，我们为其传递了第四个参数 refNode，当 refNode 存在时，我们应该使用 insertBefore 方法代替 appendChild 方法，这就需要我们修改之前实现的 mount 函数了 mountElement 函数，为它们添加第四个参数。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// mount 函数")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mount")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG, refNode")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { flags } = vnode\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (flags & VNodeFlags.ELEMENT) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载普通标签")]),s._v("\n    mountElement(vnode, container, isSVG, refNode)\n  }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// mountElement 函数")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG, refNode")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n\n  refNode ? container.insertBefore(el, refNode) : container.appendChild(el)\n}\n")])]),e("h3",[s._v("移除不存在的元素")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" lastIndex = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < nextChildren.length; i++) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = nextChildren[i]\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" j = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(",\n    find = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" (j; j < prevChildren.length; j++) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!find) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载新节点")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  }\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 移除已经不存在的节点")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧的节点")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < prevChildren.length; i++) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevVNode = prevChildren[i]\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拿着旧 VNode 去新 children 中寻找相同的节点")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" has = nextChildren.find(\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("nextVNode")]),s._v(" =>")]),s._v(" nextVNode.key === prevVNode.key\n  )\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!has) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果没有找到相同的节点，则移除")]),s._v("\n    container.removeChild(prevVNode.el)\n  }\n}\n")])]),e("h2",[s._v("另一个思路 - 双端比较")]),e("p",[s._v("所谓双端比较，就是同时从新旧 children 的两端开始进行比较的一种方式，所以我们需要四个索引值，分别指向新旧 children 的两端。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" oldStartIdx = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" oldEndIdx = prevChildren.length - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" newStartIdx = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" newEndIdx = nextChildren.length - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" oldStartVNode = prevChildren[oldStartIdx]\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" oldEndVNode = prevChildren[oldEndIdx]\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" newStartVNode = nextChildren[newStartIdx]\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" newEndVNode = nextChildren[newEndIdx]\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldStartVNode.key === newStartVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 步骤一：oldStartVNode 和 newStartVNode 比对")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 patch 函数更新")]),s._v("\n    patch(oldStartVNode, newStartVNode, container)\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新索引，指向下一个位置")]),s._v("\n    oldStartVNode = prevChildren[++oldStartIdx]\n    newStartVNode = nextChildren[++newStartIdx]\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldEndVNode.key === newEndVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 步骤二：oldEndVNode 和 newEndVNode 比对")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 patch 函数更新")]),s._v("\n    patch(oldEndVNode, newEndVNode, container)\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新索引，指向下一个位置")]),s._v("\n    oldEndVNode = prevChildren[--oldEndIdx]\n    newEndVNode = newEndVNode[--newEndIdx]\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldStartVNode.key === newEndVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 步骤三：oldStartVNode 和 newEndVNode 比对")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 patch 函数更新")]),s._v("\n    patch(oldStartVNode, newEndVNode, container)\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将 oldStartVNode.el 移动到 oldEndVNode.el 的后面，也就是 oldEndVNode.el.nextSibling 的前面")]),s._v("\n    container.insertBefore(\n      oldStartVNode.el,\n      oldEndVNode.el.nextSibling\n    )\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新索引，指向下一个位置")]),s._v("\n    oldStartVNode = prevChildren[++oldStartIdx]\n    newEndVNode = nextChildren[--newEndIdx]\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldEndVNode.key === newStartVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 步骤四：oldEndVNode 和 newStartVNode 比对")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 先调用 patch 函数完成更新")]),s._v("\n    patch(oldEndVNode, newStartVNode, container)\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新完成后，将容器中最后一个子节点移动到最前面，使其成为第一个子节点")]),s._v("\n    container.insertBefore(oldEndVNode.el, oldStartVNode.el)\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新索引，指向下一个位置")]),s._v("\n    oldEndVNode = prevChildren[--oldEndIdx]\n    newStartVNode = nextChildren[++newStartIdx]\n  }\n}\n")])]),e("h3",[s._v("双端比较的优势")]),e("p",[s._v("双端比较在移动 DOM 方面更具有普适性，不会因为 DOM 结构的差异而产生影响。")]),e("h3",[s._v("非理想情况的处理方式")]),e("p",[s._v("每一步比对，都无法找到可复用的节点，我们只能拿新 children 中的第一个节点尝试去旧 children 中寻找，试图找到拥有相同 key 值的节点。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!oldStartVNode) {\n    oldStartVNode = prevChildren[++oldStartIdx]\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!oldEndVNode) {\n    oldEndVNode = prevChildren[--oldEndIdx]\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldStartVNode.key === newStartVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldEndVNode.key === newEndVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldStartVNode.key === newEndVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldEndVNode.key === newStartVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧 children，试图寻找与 newStartVNode 拥有相同 key 值的元素")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" idxInOld = prevChildren.findIndex(\n      "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("node")]),s._v(" =>")]),s._v(" node.key === newStartVNode.key\n    )\n    \n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (idxInOld >= "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// vnodeToMove 就是在旧 children 中找到的节点，该节点所对应的真实 DOM 应该被移动到最前面")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" vnodeToMove = prevChildren[idxInOld]\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 patch 函数完成更新")]),s._v("\n      patch(vnodeToMove, newStartVNode, container)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 把 vnodeToMove.el 移动到最前面，即 oldStartVNode.el 的前面")]),s._v("\n      container.insertBefore(vnodeToMove.el, oldStartVNode.el)\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 由于旧 children 中该位置的节点所对应的真实 DOM 已经被移动，所以将其设置为 undefined")]),s._v("\n      prevChildren[idxInOld] = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n    }\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将 newStartIdx 下移一位")]),s._v("\n    newStartVNode = nextChildren[++newStartIdx]\n  }\n}\n")])]),e("h3",[s._v("添加新元素")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!oldStartVNode) {\n    oldStartVNode = prevChildren[++oldStartIdx]\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!oldEndVNode) {\n    oldEndVNode = prevChildren[--oldEndIdx]\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldStartVNode.key === newStartVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldEndVNode.key === newEndVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldStartVNode.key === newEndVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldEndVNode.key === newStartVNode.key) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" idxInOld = prevChildren.findIndex(\n      "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("node")]),s._v(" =>")]),s._v(" node.key === newStartVNode.key\n    )\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (idxInOld >= "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" vnodeToMove = prevChildren[idxInOld]\n      patch(vnodeToMove, newStartVNode, container)\n      prevChildren[idxInOld] = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n      container.insertBefore(vnodeToMove.el, oldStartVNode.el)\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使用 mount 函数挂载新节点")]),s._v("\n      mount(newStartVNode, container, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", oldStartVNode.el)\n    }\n    newStartVNode = nextChildren[++newStartIdx]\n  }\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldEndIdx < oldStartIdx) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 添加新节点")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = newStartIdx; i <= newEndIdx; i++) {\n    mount(nextChildren[i], container, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", oldStartVNode.el)\n  }\n}\n")])]),e("p",[s._v("我们在循环结束之后，立即判断 oldEndIdx 的值是否小于 oldStartIdx 的值，如果条件成立，则需要使用 for 循环把所有位于 newStartIdx 到 newEndIdx 之间的元素都当做全新的节点添加到容器元素中，这样我们就完整的实现了完整的添加新节点的功能。")]),e("h3",[s._v("移除不存在的元素")]),e("p",[s._v("循环结束后，一旦满足条件 newEndIdx < newStartId 则说明有元素需要被移除。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (oldEndIdx < oldStartIdx) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 添加新节点")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = newStartIdx; i <= newEndIdx; i++) {\n    mount(nextChildren[i], container, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", oldStartVNode.el)\n  }\n} "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (newEndIdx < newStartIdx) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 移除操作")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = oldStartIdx; i <= oldEndIdx; i++) {\n    container.removeChild(prevChildren[i].el)\n  }\n}\n")])]),e("h2",[s._v("inferno 所采用的核心 Diff 算法及原理")]),e("p",[s._v("在创建 VNode 时就确定其类型，以及在 mount/patch 的过程中采用位运算来判断一个 VNode 的类型，在这个基础之上再配合核心的 Diff 算法，才使得性能上产生一定的优势。")]),e("h3",[s._v("相同的前置和后置元素")]),e("p",[s._v("如果两个文本相等，则无需进行真正的 Diff，预处理的好处之一就是在某些情况下能够避免 Diff 算法的执行，还有比这更加高效的方式吗？当然，这是一个简单的情形，除此之外，在文本的 Diff 中还有其他的预处理过程，其中就包含：去除相同的前缀和后缀。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新相同的前缀节点")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// j 为指向新旧 children 中第一个节点的索引")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" j = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" prevVNode = prevChildren[j]\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" nextVNode = nextChildren[j]\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// while 循环向后遍历，直到遇到拥有不同 key 值的节点为止")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (prevVNode.key === nextVNode.key) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 patch 函数更新")]),s._v("\n  patch(prevVNode, nextVNode, container)\n  j++\n  prevVNode = prevChildren[j]\n  nextVNode = nextChildren[j]\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 指向旧 children 最后一个节点的索引")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" prevEnd = prevChildren.length - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 指向新 children 最后一个节点的索引")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" nextEnd = nextChildren.length - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n\nprevVNode = prevChildren[prevEnd]\nnextVNode = nextChildren[nextEnd]\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// while 循环向前遍历，直到遇到拥有不同 key 值的节点为止")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (prevVNode.key === nextVNode.key) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用 patch 函数更新")]),s._v("\n  patch(prevVNode, nextVNode, container)\n  prevEnd--\n  nextEnd--\n  prevVNode = prevChildren[prevEnd]\n  nextVNode = nextChildren[nextEnd]\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 满足条件，则说明从 j -> nextEnd 之间的节点应作为新节点插入")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (j > prevEnd && j <= nextEnd) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// j -> nextEnd 之间的节点应该被添加")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextPos = nextEnd + "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" refNode =\n    nextPos < nextChildren.length ? nextChildren[nextPos].el : "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (j <= nextEnd) {\n    mount(nextChildren[j++], container, "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", refNode)\n  }\n} "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (j > nextEnd) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// j -> prevEnd 之间的节点应该被移除")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (j <= prevEnd) {\n    container.removeChild(prevChildren[j++].el)\n  }\n}\n")])]),e("h3",[s._v("判断是否需要进行 DOM 移动")]),e("p",[s._v("Diff 算法，其重点无非就是：判断是否有节点需要移动，以及应该如何移动和寻找出那些需要被添加或移除的节点")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" prevStart = j\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextStart = j\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" moved = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" pos = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// for (let i = prevStart; i <= prevEnd; i++) {")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//   const prevVNode = prevChildren[i]")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//   for (let k = nextStart; k <= nextEnd; k++) {")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//     const nextVNode = nextChildren[k]")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//     if (prevVNode.key === nextVNode.key) {")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//       // patch 更新")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//       patch(prevVNode, nextVNode, container)")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//       // 更新 source 数组")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//       source[k - nextStart] = i")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//       // 判断是否需要移动")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//       if (k < pos) {")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//         moved = true")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//       } else {")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//         pos = k")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//       }")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//     }")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//   }")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// }")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 构建索引表")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" keyIndex = {}\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = nextStart; i <= nextEnd; i++) {\n    keyIndex[nextChildren[i].key] = i\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" patched = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历旧 children 的剩余未处理节点")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = prevStart; i <= prevEnd; i++) {\n    prevVNode = prevChildren[i]\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (patched < nextLeft) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过索引表快速找到新 children 中具有相同 key 的节点的位置")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" k = keyIndex[prevVNode.key]\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" k !== "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'undefined'")]),s._v(") {\n        nextVNode = nextChildren[k]\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// patch 更新")]),s._v("\n        patch(prevVNode, nextVNode, container)\n        patched++\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更新 source 数组")]),s._v("\n        source[k - nextStart] = i\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 判断是否需要移动")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (k < pos) {\n          moved = "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n        } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n          pos = k\n        }\n      } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 没找到，说明旧节点在新 children 中已经不存在了，应该移除")]),s._v("\n        container.removeChild(prevVNode.el)\n      }\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 多余的节点，应该移除")]),s._v("\n      container.removeChild(prevVNode.el)\n    }\n  }\n")])]),e("p",[s._v("这是典型的用空间换时间的方式，复杂度能够降低到 O(n)。但无论采用哪一种方式，最终我们的目的是对新旧 children 中具有相同 key 值的节点进行更新，同时检测是否需要移动操作。")]),e("h3",[s._v("DOM 移动的方式")]),e("p",[s._v("1、判断出是否需要进行 DOM 移动操作，所以我们建立了 moved 变量作为标识，当它的值为 true 时则说明需要进行 DOM 移动。")]),e("p",[s._v("2、构建 source 数组，它的长度与“去掉”相同的前置/后置节点后新 children 中剩余未处理节点的数量相等，并存储着新 children 中的节点在旧 children 中位置，后面我们会根据 source 数组计算出一个最长递增子序列，并用于 DOM 移动操作。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (moved) {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" seq = lis(source)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// j 指向最长递增子序列的最后一个值")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" j = seq.length - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 从后向前遍历新 children 中的剩余未处理节点")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = nextLeft - "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("; i >= "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i--) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (source[i] === "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(") {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 作为全新的节点挂载")]),s._v("\n\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 该节点在新 children 中的真实位置索引")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" pos = i + nextStart\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = nextChildren[pos]\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 该节点下一个节点的位置索引")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextPos = pos + "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 挂载")]),s._v("\n      mount(\n        nextVNode,\n        container,\n        "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n        nextPos < nextChildren.length\n          ? nextChildren[nextPos].el\n          : "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n      )\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (i !== seq[j]) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 说明该节点需要移动")]),s._v("\n\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 该节点在新 children 中的真实位置索引")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" pos = i + nextStart\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextVNode = nextChildren[pos]\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 该节点下一个节点的位置索引")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" nextPos = pos + "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 移动")]),s._v("\n      container.insertBefore(\n        nextVNode.el,\n        nextPos < nextChildren.length\n          ? nextChildren[nextPos].el\n          : "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n      )\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当 i === seq[j] 时，说明该位置的节点不需要移动")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 并让 j 指向下一个位置")]),s._v("\n      j--\n    }\n  }\n}\n")])]),e("hr"),e("h1",[s._v("自定义渲染器和异步渲染")]),e("h2",[s._v("自定义渲染器的原理")]),e("p",[s._v("渲染器是围绕 Virtual DOM 而存在的，在 Web 平台下它能够把 Virtual DOM 渲染为浏览器中的真实 DOM 对象，通过前面几章的讲解，相信你已经能够认识到渲染器的实现原理，为了能够将 Virtual DOM 渲染为真实 DOM，渲染器内部需要调用浏览器提供的 DOM 编程接口，下面罗列了在出上一章中我们曾经使用到的那些浏览器为我们提供的 DOM 编程接口：")]),e("ul",[e("li",[s._v("document.createElement / createElementNS：创建标签元素。")]),e("li",[s._v("document.createTextNode：创建文本元素。")]),e("li",[s._v("el.nodeValue：修改文本元素的内容。")]),e("li",[s._v("el.removeChild：移除 DOM 元素。")]),e("li",[s._v("el.insertBefore：插入 DOM 元素。")]),e("li",[s._v("el.appendChild：追加 DOM 元素。")]),e("li",[s._v("el.parentNode：获取父元素。")]),e("li",[s._v("el.nextSibling：获取下一个兄弟元素。")]),e("li",[s._v("document.querySelector：挂载 Portal 类型的 VNode 时，用它查找挂载点。")])]),e("p",[s._v("这些 DOM 编程接口完成了 Web 平台(或者说浏览器)下对 DOM 的增加、删除、查找的工作，它是 Web 平台独有的，所以如果渲染器自身强依赖于这些方法(函数)，那么这个渲染器也只能够运行在浏览器中，它不具备跨平台的能力。换句话说，如果想要实现一个平台无关的渲染器，那么渲染器自身必须不能强依赖于任何一个平台下特有的接口，而是应该提供一个抽象层，将 “DOM” 的增加、删除、查找等操作使用抽象接口实现，具体到某个平台下时，由开发者决定如何使用该平台下的接口实现这个抽象层，这就是自定义渲染器的本质。")]),e("p",[s._v("一个跨平台的渲染器应该至少包含两个可自定义的部分：可自定义元素的增加、删除、查找等操作、可自定义元素自身属性/特性的修改操作。这样对于任何一个元素来说，它的增删改查都已经变成了可自定义的部分，我们只需要“告知”渲染器在对元素进行增删改查时应该做哪些具体的操作即可。")]),e("p",[s._v("整个 render.js 文件的核心代码")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 导出渲染器")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("render")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ========== 挂载 ==========")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mount")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG, refNode")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG, refNode")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountText")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountFragment")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountPortal")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountStatefulComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountFunctionalComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ========== patch ==========")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patch")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("replaceVNode")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchChildren")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("\n  prevChildFlags,\n  nextChildFlags,\n  prevChildren,\n  nextChildren,\n  container\n")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchText")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchFragment")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchPortal")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("patchComponent")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prevVNode, nextVNode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// https://en.wikipedia.org/wiki/Longest_increasing_subsequence")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("lis")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("arr")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n")])]),e("p",[s._v("在 mount 和 patch 中都会调用浏览器提供的 DOM 编程接口来完成真正的渲染工作。")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("default")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("createRenderer")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("options")]),s._v(") ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// options.nodeOps 选项中包含了本章开头罗列的所有操作 DOM 的方法")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// options.patchData 选项就是 patchData 函数")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" {\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("nodeOps")]),s._v(": {\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("createElement")]),s._v(": platformCreateElement,\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("createText")]),s._v(": platformCreateText,\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("setText")]),s._v(": platformSetText, "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 等价于 Web 平台的 el.nodeValue")]),s._v("\n      appendChild: platformAppendChild,\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("insertBefore")]),s._v(": platformInsertBefore,\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("removeChild")]),s._v(": platformRemoveChild,\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("parentNode")]),s._v(": platformParentNode,\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("nextSibling")]),s._v(": platformNextSibling,\n      "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("querySelector")]),s._v(": platformQuerySelector\n    },\n    "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("patchData")]),s._v(": platformPatchData\n  } = options\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("render")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container")]),s._v(") ")]),s._v("{ "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* ... */")]),s._v(" }\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ========== 挂载 ==========")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ========== patch ==========")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { render }\n}\n")])]),e("p",[s._v("接下来我们要做的就是将渲染器中原本使用了 Web 平台进行 DOM 操作的地方修改成使用通过解构得到的函数进行替代，例如在创建 DOM 元素时，原来的实现如下：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG, refNode")]),s._v(") ")]),s._v("{\n  isSVG = isSVG || vnode.flags & VNodeFlags.ELEMENT_SVG\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = isSVG\n    ? "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElementNS("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://www.w3.org/2000/svg'")]),s._v(", vnode.tag)\n    : "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElement(vnode.tag)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n}\n")])]),e("p",[s._v("现在我们应该使用 platformCreateElement 函数替代 document.createElement(NS)：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mountElement")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("vnode, container, isSVG, refNode")]),s._v(") ")]),s._v("{\n  isSVG = isSVG || vnode.flags & VNodeFlags.ELEMENT_SVG\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" el = platformCreateElement(vnode.tag, isSVG)\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n}\n")])]),e("p",[s._v("当我们实现了所有 nodeOps 下的规定的抽象接口之后，实际上就完成了一个面向 Web 平台的渲染器，如下代码所示：")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { render } = createRenderer({\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("nodeOps")]),s._v(": {\n    createElement(tag, isSVG) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" isSVG\n        ? "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElementNS("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://www.w3.org/2000/svg'")]),s._v(", tag)\n        : "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createElement(tag)\n    },\n    removeChild(parent, child) {\n      parent.removeChild(child)\n    },\n    createText(text) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createTextNode(text)\n    },\n    setText(node, text) {\n      node.nodeValue = text\n    },\n    appendChild(parent, child) {\n      parent.appendChild(child)\n    },\n    insertBefore(parent, child, ref) {\n      parent.insertBefore(child, ref)\n    },\n    parentNode(node) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" node.parentNode\n    },\n    nextSibling(node) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" node.nextSibling\n    },\n    querySelector(selector) {\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".querySelector(selector)\n    }\n  }\n})\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { patchData } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./patchData'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { render } = createRenderer({\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("nodeOps")]),s._v(": {\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 省略...")]),s._v("\n  },\n  patchData\n})\n")])]),e("p",[s._v("以上我们就完成了对渲染器的抽象，使它成为一个平台无关的工具。并基于此实现了一个 Web 平台的渲染器，专门用于浏览器环境。")]),e("h2",[s._v("自定义渲染器的应用")]),e("p",[s._v("Vue3 提供了一个叫做 @vue/runtime-test 的包，其作用是方便开发者在无 DOM 环境时有能力对组件的渲染内容进行测试，这实际上就是对自定义渲染器的应用。本节我们尝试来实现与 @vue/runtime-test 具有相同功能的渲染器。")]),e("hr"),e("p",[e("a",{attrs:{href:"http://hcysun.me/vue-design/zh/essence-of-comp.html",target:"_blank"}},[s._v("→ 此文章为学习总结文档，感谢原作者！")])])])}],r=t("2877"),n=Object(r.a)({},function(){this.$createElement;return this._self._c,this._m(0)},e,!1,null,null,null);a.default=n.exports},e862:function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("NestJS")]),t("ul",[t("li",[s._v("NestJS是用于构建高效，可扩展的Node.js服务器端应用程序的框架。")]),t("li",[s._v("渐进式JavaScript，内置并完全支持TypeScript。")]),t("li",[s._v("结合了OOP（面向对象编程），FP（函数式编程）和FRP（函数响应式编程）。")])]),t("p",[s._v("Nest利用了诸如Express（默认）之类的健壮的HTTP Server框架，并且可以选择配置为也使用Fastify！")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[s._v("src\n├── app.controller.ts   // 带有单个路由的基本控制器示例\n├── app.module.ts       // 应用程序的根模块\n└── main.ts             // 应用程序入口文件\n")])]),t("hr"),t("h1",[s._v("控制器")]),t("p",[s._v("控制器负责处理传入的 "),t("strong",[s._v("请求")]),s._v(" 和向客户端返回 "),t("strong",[s._v("响应")]),s._v(" 。")]),t("p",[s._v("控制器的目的是接收应用的特定请求。路由机制控制哪个控制器接收哪些请求。通常，每个控制器有多个路由，不同的路由可以执行不同的操作。")]),t("p",[s._v("为了创建一个基本的控制器，我们必须使用装饰器。装饰器将类与所需的元数据关联，并使 Nest 能够创建路由映射（将请求绑定到相应的控制器）。")]),t("h2",[s._v("路由")]),t("p",[s._v("我们将使用 @Controller() 装饰器，这是定义基本控制器所必需的。我们将指定一个路径前缀(可选) cats。\n在 @Controller() 装饰器中使用路径前缀，它允许我们轻松对一组相关路由进行分组，并减少重复代码。\n例如，我们可以选择管理该路由下的客户实体的交互的这部分进行分组 /customers ，这样, 我们可以在 @Controller() 装饰器中指定路径前缀, 这样我们就不必为文件中的每个路由重新定义前缀。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Controller, Get } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n@Controller("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsController")]),s._v(" ")]),s._v("{\n  @Get()\n  findAll(): string {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This action returns all cats'")]),s._v(";\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 要使用CLI创建控制器，只需执行$ nest g controller cats命令。")]),s._v("\n")])]),t("p",[s._v("findAll()方法之前的 @Get() HTTP 请求方法装饰器告诉 Nest 为HTTP请求的特定端点创建处理程序。端点对应于 HTTP 请求方法（在本例中为 GET）和路由。什么是路由 ？ 处理程序的路由是通过连接为控制器声明的（可选）前缀和请求装饰器中指定的任何路由来确定的。由于我们已经为每个 route（cats） 声明了一个前缀，并且没有在装饰器中添加任何路由信息，因此 Nest会将 GET /cats 请求映射到此处理程序。如上所述，该路由包括可选的控制器路由前缀和请求方法装饰器中声明的任何路由。例如，customers 与装饰器组合的路由前缀 @Get('profile') 会为请求生成路由映射 GET /customers/profile。")]),t("h2",[s._v("请求对象")]),t("p",[s._v("处理程序通常需要访问客户端请求详细信息。Nest提供对基础平台的请求对象的访问（默认情况下为Express）。我们可以通过将@Req()装饰器添加到处理程序的签名中来指示Nest注入请求对象，从而访问该请求对象。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Controller, Get, Req } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Request } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'express'")]),s._v(";\n\n@Controller("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsController")]),s._v(" ")]),s._v("{\n  @Get()\n  findAll(@Req() request: Request): string {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This action returns all cats'")]),s._v(";\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 为了在 express 中使用 Typescript （如 request: Request 上面的参数示例所示），请安装 @types/express 。")]),s._v("\n")])]),t("p",[s._v("Request 对象表示 HTTP 请求，并具有 Request 查询字符串，参数，HTTP 标头 和 正文的属性（在这里阅读更多），但在大多数情况下, 不必手动获取它们。 我们可以使用专用的装饰器，比如开箱即用的 @Body() 或 @Query() 。 下面是装饰器和 普通表达对象的比较。")]),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[s._v("装饰器")]),t("th",{staticStyle:{"text-align":"center"}},[s._v("普通表达对象")])])]),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Request()")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("req")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Response()")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("res")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Next()")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("next")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Session()")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("req.session")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Param(key?: string)")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("req.params / req.params[key]")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Body(key?: string)")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("req.body / req.body[key]")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Query(key?: string)")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("req.query / req.query[key]")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Headers(name?: string)")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("req.headers / req.headers[name]")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("@Ip()")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("req.ip")])])])]),t("p",[s._v("为了与底层 HTTP平台(如 Express和 Fastify)之间的类型兼容，Nest 提供了 @Res()和 @Response() 装饰器。@Res()只是 @Response()的别名。两者都直接公开底层响应对象接口。在使用它们时，您还应该导入底层库的类型(例如：@types/express)以充分利用它们。注意，在方法处理程序中注入 @Res()或 @Response() 时，将 Nest置于该处理程序的特定于库的模式中，并负责管理响应。这样做时，必须通过调用响应对象(例如，res.json(…)或 res.send(…))发出某种响应，否则HTTP服务器将挂起。")]),t("h2",[s._v("资源")]),t("p",[s._v("我们已经创建了一个端点来获取数据（GET 路由）。 我们通常还希望提供一个创建新记录的端点。为此，让我们创建 POST 处理程序:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Controller, Get, Post } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n@Controller("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsController")]),s._v(" ")]),s._v("{\n  @Post()\n  create(): string {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This action adds a new cat'")]),s._v(";\n  }\n\n  @Get()\n  findAll(): string {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This action returns all cats'")]),s._v(";\n  }\n}\n")])]),t("p",[s._v("就这么简单。Nest以相同的方式提供其余的端点装饰器- @Put() 、 @Delete()、 @Patch()、 @Options()、 @Head()和 @All()。这些表示各自的 HTTP请求方法。")]),t("h2",[s._v("路线通配符")]),t("p",[s._v("还支持基于模式的路由。例如，星号用作通配符，并将匹配任何字符组合。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'ab*cd'")]),s._v(")\nfindAll() {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This route uses a wildcard'")]),s._v(";\n}\n")])]),t("p",[t("code",{pre:!0},[s._v("该'ab*cd'路由路径匹配abcd，ab_cd，abecd，等等。字符?，+，*，和()可在路由路径中使用，并且是其正则表达式的对应的子集。连字符（-）和点（.）由基于字符串的路径按字面意义进行解释。")])]),t("h2",[s._v("状态代码")]),t("p",[s._v("如前面所说，默认情况下，响应的状态码总是200，除了 POST 请求外，此时它是201，我们可以通过在处理程序层添加@HttpCode（...） 装饰器来轻松更改此行为。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Post()\n@HttpCode("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("204")]),s._v(")\ncreate() {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This action adds a new cat'")]),s._v(";\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// HttpCode从@nestjs/common包中导入。")]),s._v("\n")])]),t("p",[s._v("通常，状态码不是固定的，而是取决于各种因素。在这种情况下，您可以使用类库特有的的响应（通过@Res()注入 ）对象（或者，在出现错误时，抛出异常）。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Controller, Get, Post, Res, HttpStatus } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Response } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'express'")]),s._v(";\n\n@Controller("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsController")]),s._v(" ")]),s._v("{\n  @Post()\n  create(@Res() res: Response) {\n    res.status(HttpStatus.CREATED).send();\n  }\n\n  @Get()\n  findAll(@Res() res: Response) {\n     res.status(HttpStatus.OK).json([]);\n  }\n}\n")])]),t("h2",[s._v("Headers")]),t("p",[s._v("要指定自定义响应头，可以使用 @header() 修饰器或类库特有的响应对象,（使用 并 res.header()直接调用）。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Post()\n@Header("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Cache-Control'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'none'")]),s._v(")\ncreate() {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This action adds a new cat'")]),s._v(";\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Header 需要从 @nestjs/common 包导入。")]),s._v("\n")])]),t("h2",[s._v("重定向")]),t("p",[s._v("要将响应重定向到特定的 URL，可以使用 @Redirect()装饰器或特定于库的响应对象(并直接调用 res.redirect())。")]),t("p",[s._v("@Redirect() 带有必需的 url参数和可选的 statusCode参数。 如果省略，则 statusCode 默认为 302。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'docs'")]),s._v(")\n@Redirect("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'https://docs.nestjs.com'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("302")]),s._v(")\ngetDocs(@Query("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'version'")]),s._v(") version) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (version && version === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'5'")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("url")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'https://docs.nestjs.com/v5/'")]),s._v(" };\n  }\n}\n")])]),t("p",[s._v("有时您可能想动态确定HTTP状态代码或重定向URL。通过从路由处理程序方法返回一个形状为以下形式的对象：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"url"')]),s._v(": string,\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"statusCode"')]),s._v(": number\n}\n")])]),t("h2",[s._v("路由参数")]),t("p",[s._v("当您需要接受动态数据作为请求的一部分时（例如，使用GET /cats/1来获取 id为 1的 cat），带有静态路径的路由将无法工作。为了定义带参数的路由，我们可以在路由中添加路由参数标记，以捕获请求 URL 中该位置的动态值。@Get() 下面的装饰器示例中的路由参数标记演示了此用法。可以使用 @Param() 装饰器访问以这种方式声明的路由参数，该装饰器应添加到函数签名中。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':id'")]),s._v(")\nfindOne(@Param() params): string {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(params.id);\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`This action returns a #"),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${params.id}")]),s._v(" cat`")]),s._v(";\n}\n\n@Get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':id'")]),s._v(")\nfindOne(@Param("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'id'")]),s._v(") id): string {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`This action returns a #"),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${id}")]),s._v(" cat`")]),s._v(";\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Param从@nestjs/common包中导入。")]),s._v("\n")])]),t("p",[s._v("@Param()用于修饰方法参数（上面示例中的参数），并使路由参数可用作该修饰的方法参数在方法体内的属性。 如上面的代码所示，我们可以通过引用 params.id来访问 id参数。 您还可以将特定的参数标记传递给装饰器，然后在方法主体中按名称直接引用路由参数。")]),t("h2",[s._v("子域路由")]),t("p",[s._v("@Controller装饰可以配置host选项，要求进入的请求的HTTP主机相匹配一些特定的值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Controller({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("host")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'admin.example.com'")]),s._v(" })\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AdminController")]),s._v(" ")]),s._v("{\n  @Get()\n  index(): string {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Admin page'")]),s._v(";\n  }\n}\n")])]),t("p",[s._v("与路由路径类似，该host选项可以捕获动态值，使用@HostParam()装饰器访问以这种方式声明的主机参数，该装饰器应添加到函数签名中。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Controller({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("host")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':account.example.com'")]),s._v(" })\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AccountController")]),s._v(" ")]),s._v("{\n  @Get()\n  getInfo(@HostParam("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'account'")]),s._v(") account: string) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" account;\n  }\n}\n")])]),t("h2",[s._v("范围")]),t("p",[s._v("对于来自不同编程语言背景的人来说，了解在 Nest 中几乎所有内容都可以在传入的请求之间共享，这让人意外。比如我们有一个数据库连接池，具有全局状态的单例服务等。请记住，Node.js 不遵循请求/响应多线程无状态模型，每个请求都由主线程处理。因此，使用单例实例对我们的应用程序来说是完全安全的。")]),t("h2",[s._v("Async / await")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Get()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findAll(): "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("<any[]> {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [];\n}\n")])]),t("p",[s._v("这是完全有效的。此外,通过返回 RxJS observable 流。 Nest 路由处理程序更强大。Nest 将自动订阅下面的源并获取最后发出的值（在流完成后）。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Get()\nfindAll(): Observable<any[]> {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v("([]);\n}\n")])]),t("h2",[s._v("请求负载")]),t("p",[s._v("之前的 POST 路由处理程序不接受任何客户端参数。我们在这里添加 @Body() 参数来解决这个问题。")]),t("p",[s._v("首先(如果您使用 TypeScript)，我们需要确定 DTO(数据传输对象)模式。DTO是一个对象，它定义了如何通过网络发送数据。我们可以通过使用 TypeScript接口或简单的类来完成。令人惊讶的是，我们在这里推荐使用类。为什么?类是JavaScript ES6标准的一部分，因此它们在编译后的 JavaScript中保留为实际实体。另一方面，由于 TypeScript接口在转换过程中被删除，所以 Nest不能在运行时引用它们。这一点很重要，因为诸如管道之类的特性在运行时能够访问变量的元类型时提供更多的可能性。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// create-cat.dto.ts")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CreateCatDto")]),s._v(" ")]),s._v("{\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n@Post()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" create(@Body() createCatDto: CreateCatDto) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This action adds a new cat'")]),s._v(";\n}\n")])]),t("hr"),t("h1",[s._v("提供者")]),t("p",[s._v("Providers 是 Nest 的一个基本概念。许多基本的 Nest 类可能被视为 provider - service,repository, factory, helper 等等。 他们都可以通过 constructor 注入依赖关系。 这意味着对象可以彼此创建各种关系，并且“连接”对象实例的功能在很大程度上可以委托给 Nest运行时系统。 Provider只是一个用 @Injectable() 装饰器注释的类。")]),t("p",[s._v("在前面的章节中，我们已经创建了一个简单的控制器 CatsController 。控制器应处理 HTTP 请求并将更复杂的任务委托给 providers。Providers 是纯粹的 JavaScript 类，在其类声明之前带有 @Injectable()装饰器。")]),t("h2",[s._v("服务")]),t("p",[s._v("让我们从创建一个简单的 CatsService 开始。该服务将负责数据存储和检索，由其使用 CatsController，因此它被定义为provider是一个很好的选择。因此，我们用这个类来装饰 @Injectable()。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.service.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Cat } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./interfaces/cat.interface'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsService")]),s._v(" ")]),s._v("{\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".cats;\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 要使用 CLI 创建服务类，只需执行 $ nest g service cats 命令。")]),s._v("\n")])]),t("p",[s._v("我们的 CatsService 是具有一个属性和两个方法的基本类。唯一的新特点是它使用 @Injectable() 装饰器。该 @Injectable() 附加有元数据，因此 Nest 知道这个类是一个 Nest provider。需要注意的是，上面有一个 Cat 接口。看起来像这样：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" interface Cat {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": string;\n  age: number;\n  breed: string;\n}\n")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Controller, Get, Post, Body } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CreateCatDto } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./dto/create-cat.dto'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsService } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.service'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Cat } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./interfaces/cat.interface'")]),s._v(";\n\n@Controller("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsController")]),s._v(" ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(private readonly catsService: CatsService) {}\n\n  @Post()\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" create(@Body() createCatDto: CreateCatDto) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".catsService.create(createCatDto);\n  }\n\n  @Get()\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findAll(): "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("<Cat[]> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".catsService.findAll();\n  }\n}\n")])]),t("p",[s._v("CatsService 是通过类构造函数注入的。注意这里使用了私有的只读语法。这意味着我们已经在同一位置创建并初始化了 catsService 成员。")]),t("h2",[s._v("依赖注入")]),t("p",[s._v("Nest 是建立在一种强大的设计模式之上的, 我们通常称之为依赖注入。我们建议在官方的 Angular文档中阅读有关此概念的精彩文章。")]),t("p",[s._v("依赖注入（DI）是一种重要的应用设计模式。在设计应用时常会用到它，以提升它们的开发效率和模块化程度。\n依赖，是当类需要执行其功能时，所需要的服务或对象。 DI 是一种编码模式，其中的类会从外部源中请求获取依赖，而不是自己创建它们。")]),t("p",[s._v("在 Nest 中，借助 TypeScript 功能，管理依赖项非常容易，因为它们仅按类型进行解析。在下面的示例中，Nest 将 catsService 通过创建并返回一个实例来解析 CatsService（或者，在单例的正常情况下，如果现有实例已在其他地方请求，则返回现有实例）。解析此依赖关系并将其传递给控制器的构造函数（或分配给指定的属性）：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(private readonly catsService: CatsService) {}\n")])]),t("h2",[s._v("作用域")]),t("p",[s._v("Provider通常具有与应用程序生命周期同步的生命周期（“作用域”）。在启动应用程序时，必须解析每个依赖项，因此必须实例化每个提供程序。同样，当应用程序关闭时，每个provider都将被销毁。但是，有一些方法可以该标provider生命周期的请求范围。")]),t("h2",[s._v("定制providers")]),t("p",[s._v('Nest 有一个内置的控制反转（"IoC"）容器，可以解决providers之间的关系。 此功能是上述依赖注入功能的基础，但要比上面描述的要强大得多。@Injectable() 装饰器只是冰山一角, 并不是定义 providers 的唯一方法。相反，您可以使用普通值、类、异步或同步工厂。')]),t("h2",[s._v("可选的providers")]),t("p",[s._v("有时，您可能需要解决一些依赖项。例如，您的类可能依赖于一个配置对象，但如果没有传递，则应使用默认值。在这种情况下，关联变为可选的，provider 不会因为缺少配置导致错误。")]),t("p",[s._v("要指示provider是可选的，请在 constructor 的参数中使用 @optional() 装饰器。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, Optional, Inject } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("HttpService")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v("> ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(\n    @Optional() @Inject('HTTP_OPTIONS') private readonly httpClient: T\n  ) {}\n}\n")])]),t("p",[s._v("请注意，在上面的示例中，我们使用自定义 provider，这是我们包含 HTTP_OPTIONS自定义标记的原因。前面的示例显示了基于构造函数的注入，通过构造函数中的类指示依赖关系。")]),t("h2",[s._v("基于属性的注入")]),t("p",[s._v("我们目前使用的技术称为基于构造函数的注入，即通过构造函数方法注入providers。在某些非常特殊的情况下，基于属性的注入可能会有用。例如，如果顶级类依赖于一个或多个 providers，那么通过从构造函数中调用子类中的 super() 来传递它们就会非常烦人了。因此，为了避免出现这种情况，可以在属性上使用 @inject() 装饰器。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, Inject } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("HttpService")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v("> ")]),s._v("{\n  @Inject("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'HTTP_OPTIONS'")]),s._v(")\n  private readonly httpClient: T;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果您的类没有扩展其他provider，你应该总是使用基于构造函数的注入。")]),s._v("\n")])]),t("h2",[s._v("注册 provider")]),t("p",[s._v("现在我们已经定义了 provider（CatsService），并且已经有了该服务的使用者（CatsController），我们需要在 Nest 中注册该服务，以便它可以执行注入。 为此，我们可以编辑模块文件（app.module.ts），然后将服务添加到@Module()装饰器的 providers 数组中。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsController } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats/cats.controller'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsService } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats/cats.service'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("controllers")]),s._v(": [CatsController],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [CatsService],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppModule")]),s._v(" ")]),s._v("{}\n")])]),t("hr"),t("h1",[s._v("模块")]),t("p",[s._v("模块是具有 @Module() 装饰器的类。 @Module() 装饰器提供了元数据，Nest 用它来组织应用程序结构。")]),t("p",[s._v("每个 Nest 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的功能。")]),t("p",[s._v("@module() 装饰器接受一个描述模块属性的对象：")]),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[s._v("属性")]),t("th",{staticStyle:{"text-align":"center"}},[s._v("说明")])])]),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("providers")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("由 Nest 注入器实例化的提供者，并且可以至少在整个模块中共享")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("controllers")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("必须创建的一组控制器")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("imports")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("导入模块的列表，这些模块导出了此模块中所需提供者")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("exports")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("由本模块提供并应在其他模块中可用的提供者的子集。")])])])]),t("p",[s._v("默认情况下, 模块封装提供者。这意味着如果提供者即不是当前模块的一部分, 也不是从另外模块(已导入)导出的，那么它就是无法注入的。")]),t("h2",[s._v("功能模块")]),t("p",[s._v("CatsController 和 CatsService 属于同一个应用程序域。 应该考虑将它们移动到一个功能模块下，即 CatsModule。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats/cats.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsController } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.controller'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsService } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.service'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("controllers")]),s._v(": [CatsController],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [CatsService],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsModule")]),s._v(" ")]),s._v("{}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 要使用 CLI 创建模块，只需执行 $ nest g module cats 命令。")]),s._v("\n")])]),t("p",[s._v("我已经创建了 cats.module.ts 文件，并把与这个模块相关的所有东西都移到了 cats 目录下。我们需要做的最后一件事是将这个模块导入根模块 (ApplicationModule)。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsModule } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats/cats.module'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("imports")]),s._v(": [CatsModule],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ApplicationModule")]),s._v(" ")]),s._v("{}\n")])]),t("h2",[s._v("共享模块")]),t("p",[s._v("在 Nest 中，默认情况下，模块是单例，因此您可以轻松地在多个模块之间共享同一个提供者实例。")]),t("p",[s._v("实际上，每个模块都是一个共享模块。一旦创建就能被任意模块重复使用。假设我们将在几个模块之间共享 CatsService 实例。 我们需要把 CatsService 放到 exports 数组中，如下所示：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsController } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.controller'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsService } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.service'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("controllers")]),s._v(": [CatsController],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [CatsService],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("exports")]),s._v(": [CatsService]\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsModule")]),s._v(" ")]),s._v("{}\n")])]),t("p",[s._v("现在，每个导入 CatsModule 的模块都可以访问 CatsService ，并且它们将共享相同的 CatsService 实例。")]),t("p",[s._v("实际上，每个模块都是一个共享模块。一旦创建就能被任意模块重复使用。假设我们将在几个模块之间共享 CatsService 实例。 我们需要把 CatsService 放到 exports 数组中，如下所示：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsController } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.controller'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsService } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.service'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("controllers")]),s._v(": [CatsController],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [CatsService],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("exports")]),s._v(": [CatsService]\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsModule")]),s._v(" ")]),s._v("{}\n")])]),t("p",[s._v("现在，每个导入 CatsModule 的模块都可以访问 CatsService ，并且它们将共享相同的 CatsService 实例。")]),t("h2",[s._v("模块重新导出")]),t("p",[s._v("模块可以导出他们的内部提供者。 而且，他们可以再导出自己导入的模块。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("imports")]),s._v(": [CommonModule],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("exports")]),s._v(": [CommonModule],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CoreModule")]),s._v(" ")]),s._v("{}\n")])]),t("h2",[s._v("依赖注入")]),t("p",[s._v("提供者也可以注入到模块(类)中（例如，用于配置目的）：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsController } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.controller'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsService } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.service'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("controllers")]),s._v(": [CatsController],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [CatsService],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsModule")]),s._v(" ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(private readonly catsService: CatsService) {}\n}\n")])]),t("p",[s._v("但是，由于循环依赖性，模块类不能注入到提供者中。")]),t("h2",[s._v("全局模块")]),t("p",[s._v("如果你不得不在任何地方导入相同的模块，那可能很烦人。在 Angular 中，提供者是在全局范围内注册的。一旦定义，他们到处可用。另一方面，Nest 将提供者封装在模块范围内。您无法在其他地方使用模块的提供者而不导入他们。但是有时候，你可能只想提供一组随时可用的东西 - 例如：helper，数据库连接等等。这就是为什么你能够使模块成为全局模块。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module, Global } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsController } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.controller'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsService } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats.service'")]),s._v(";\n\n@Global()\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("controllers")]),s._v(": [CatsController],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [CatsService],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("exports")]),s._v(": [CatsService],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsModule")]),s._v(" ")]),s._v("{}\n")])]),t("p",[s._v("@Global 装饰器使模块成为全局作用域。 全局模块应该只注册一次，最好由根或核心模块注册。 在上面的例子中，CatsService 组件将无处不在，而想要使用 CatsService 的模块则不需要在 imports 数组中导入 CatsModule。")]),t("p",[s._v("使一切全局化并不是一个好的解决方案。 全局模块可用于减少必要模板文件的数量。 imports 数组仍然是使模块 API 透明的最佳方式。")]),t("h2",[s._v("动态模块")]),t("p",[s._v("Nest 模块系统带有一个称为动态模块的功能。 它使您能够毫不费力地创建可定制的模块。 让我们来看看 DatabaseModule：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module, DynamicModule } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { createDatabaseProviders } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./database.providers'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Connection } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./connection.provider'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [Connection],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("DatabaseModule")]),s._v(" ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("static")]),s._v(" forRoot(entities = [], options?): DynamicModule {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" providers = createDatabaseProviders(options, entities);\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("module")]),s._v(": DatabaseModule,\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": providers,\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("exports")]),s._v(": providers,\n    };\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// forRoot() 可以同步或异步（Promise）返回动态模块。")]),s._v("\n")])]),t("p",[s._v("此模块默认定义了 Connection 提供者，但另外 - 根据传递的 options 和 entities - 创建一个提供者集合，例如存储库。实际上，动态模块扩展了模块元数据。当您需要动态注册组件时，这个实质特性非常有用。然后你可以通过以下方式导入 DatabaseModule：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { DatabaseModule } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./database/database.module'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { User } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./users/entities/user.entity'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("imports")]),s._v(": [DatabaseModule.forRoot([User])],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ApplicationModule")]),s._v(" ")]),s._v("{}\n")])]),t("p",[s._v("为了导出动态模块，可以省略函数调用部分：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { DatabaseModule } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./database/database.module'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { User } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./users/entities/user.entity'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("imports")]),s._v(": [DatabaseModule.forRoot([User])],\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("exports")]),s._v(": [DatabaseModule],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ApplicationModule")]),s._v(" ")]),s._v("{}\n")])]),t("hr"),t("h1",[s._v("中间件")]),t("p",[s._v("中间件是在路由处理程序 之前 调用的函数。 中间件函数可以访问请求和响应对象，以及应用程序请求响应周期中的 next() 中间件函数。 next() 中间件函数通常由名为 next 的变量表示。")]),t("p",[s._v("Nest 中间件实际上等价于 express 中间件。 下面是Express官方文档中所述的中间件功能：")]),t("p",[s._v("中间件函数可以执行以下任务:")]),t("ul",[t("li",[s._v("执行任何代码。")]),t("li",[s._v("对请求和响应对象进行更改。")]),t("li",[s._v("结束请求-响应周期。")]),t("li",[s._v("调用堆栈中的下一个中间件函数。")]),t("li",[s._v("如果当前的中间件函数没有结束请求-响应周期, 它必须调用 next() 将控制传递给下一个中间件函数。否则, 请求将被挂起。")])]),t("p",[s._v("您可以在函数中或在具有 @Injectable() 装饰器的类中实现自定义 Nest中间件。 这个类应该实现 NestMiddleware 接口, 而函数没有任何特殊的要求。 让我们首先使用类方法实现一个简单的中间件功能。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// logger.middleware.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, NestMiddleware } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Request, Response } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'express'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("LoggerMiddleware")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestMiddleware")]),s._v(" ")]),s._v("{\n  use(req: Request, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("res")]),s._v(": Response, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Request...'")]),s._v(");\n    next();\n  }\n}\n\n")])]),t("h2",[s._v("依赖注入")]),t("p",[s._v("Nest中间件完全支持依赖注入。 就像提供者和控制器一样，它们能够注入属于同一模块的依赖项（通过 constructor ）。")]),t("h2",[s._v("应用中间件")]),t("p",[s._v("中间件不能在 @Module() 装饰器中列出。我们必须使用模块类的 configure() 方法来设置它们。包含中间件的模块必须实现 NestModule 接口。我们将 LoggerMiddleware 设置在 ApplicationModule 层上。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module, NestModule, MiddlewareConsumer } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { LoggerMiddleware } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./common/middleware/logger.middleware'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsModule } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats/cats.module'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("imports")]),s._v(": [CatsModule],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppModule")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestModule")]),s._v(" ")]),s._v("{\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(");\n  }\n}\n")])]),t("p",[s._v("我们还可以在配置中间件时将包含路由路径的对象和请求方法传递给forRoutes()方法。我们为之前在CatsController中定义的/cats路由处理程序设置了LoggerMiddleware。我们还可以在配置中间件时将包含路由路径的对象和请求方法传递给 forRoutes()方法，从而进一步将中间件限制为特定的请求方法。在下面的示例中，请注意我们导入了 RequestMethod来引用所需的请求方法类型。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module, NestModule, RequestMethod, MiddlewareConsumer } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { LoggerMiddleware } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./common/middleware/logger.middleware'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsModule } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats/cats.module'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("imports")]),s._v(": [CatsModule],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppModule")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestModule")]),s._v(" ")]),s._v("{\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("path")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("method")]),s._v(": RequestMethod.GET });\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 可以使用 async/await来实现 configure()方法的异步化(例如，可以在 configure()方法体中等待异步操作的完成)。")]),s._v("\n")])]),t("h2",[s._v("路由通配符")]),t("p",[s._v("路由同样支持模式匹配。例如，星号被用作通配符，将匹配任何字符组合。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("forRoutes({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("path")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'ab*cd'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("method")]),s._v(": RequestMethod.ALL });\n")])]),t("p",[s._v("以上路由地址将匹配 abcd 、 ab_cd 、 abecd 等。字符 ? 、 + 、 * 以及 () 是它们的正则表达式对应项的子集。连字符 (-) 和点 (.) 按字符串路径解析。")]),t("h2",[s._v("中间件消费者")]),t("p",[s._v("MiddlewareConsumer 是一个帮助类。它提供了几种内置方法来管理中间件。他们都可以被简单地链接起来。forRoutes() 可接受一个字符串、多个字符串、对象、一个控制器类甚至多个控制器类。在大多数情况下，您可能只会传递一个由逗号分隔的控制器列表。以下是单个控制器的示例：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module, NestModule, MiddlewareConsumer } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { LoggerMiddleware } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./common/middleware/logger.middleware'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsModule } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats/cats.module'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { CatsController } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'./cats/cats.controller.ts'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("imports")]),s._v(": [CatsModule],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppModule")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestModule")]),s._v(" ")]),s._v("{\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes(CatsController);\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 该 apply() 方法可以使用单个中间件，也可以使用多个参数来指定多个多个中间件。")]),s._v("\n")])]),t("p",[s._v("我们可能经常希望将某些路由排除在中间件应用之外。当使用类定义中间件时(正如我们到目前为止所做的，而不是使用替代函数式中间件），我们可以使用该 exclude() 方法轻松地排除某些路由。该方法采用一个或多个对象标识要排除的 path 和 method，如下所示：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("consumer\n  .apply(LoggerMiddleware)\n  .exclude(\n    { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("path")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("method")]),s._v(": RequestMethod.GET },\n    { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("path")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("method")]),s._v(": RequestMethod.POST }\n  )\n  .forRoutes(CatsController);\n")])]),t("p",[s._v("通过上面的示例，LoggerMiddleware 将绑定到 CatsController 除了 exclude() 方法的两个内部定义的所有路由。请注意，该 exclude()方法不适用于函数中间件（在函数中而不是在类中定义的中间件;有关更多详细信息，请参阅下文）。此外，此方法不排除来自更通用路由（例如，通配符）的路径。如果您需要这种级别的控制，您应该将路径限制逻辑直接放入中间件，例如，访问请求的 URL以有条件地应用中间件逻辑。")]),t("h2",[s._v("函数式中间件")]),t("p",[s._v("我们使用的 LoggerMiddleware 类非常简单。它没有成员，没有额外的方法，没有依赖关系。为什么我们不能只使用一个简单的函数？这是一个很好的问题，因为事实上 - 我们可以做到。这种类型的中间件称为函数式中间件。让我们把 logger 转换成函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// logger.middleware.ts")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("logger")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("req, res, next")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`Request...`")]),s._v(");\n  next();\n};\n\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 现在在 ApplicationModule 中使用它。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\nconsumer\n  .apply(logger)\n  .forRoutes(CatsController);\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//当您的中间件没有任何依赖关系时，我们可以考虑使用函数式中间件。")]),s._v("\n")])]),t("h2",[s._v("多个中间件")]),t("p",[s._v("如前所述，为了绑定顺序执行的多个中间件，我们可以在 apply() 方法内用逗号分隔它们。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("consumer.apply(cors(), helmet(), logger).forRoutes(CatsController);\n")])]),t("h2",[s._v("全局中间件")]),t("p",[s._v("如果我们想一次性将中间件绑定到每个注册路由，我们可以使用由INestApplication实例提供的 use()方法：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" app = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" NestFactory.create(AppModule);\napp.use(logger);\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" app.listen("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(");\n")])]),t("hr"),t("h1",[s._v("异常过滤器")]),t("p",[s._v("内置的异常层负责处理整个应用程序中的所有抛出的异常。当捕获到未处理的异常时，最终用户将收到友好的响应。")]),t("p",[s._v("每个发生的异常都由全局异常过滤器处理, 当这个异常无法被识别时 (既不是 HttpException 也不是继承的类 HttpException ) , 用户将收到以下 JSON 响应:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"statusCode"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("500")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"message"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Internal server error"')]),s._v("\n}\n")])]),t("h2",[s._v("基础异常类")]),t("p",[s._v("Nest提供了一个内置的 HttpException 类，它从 @nestjs/common 包中导入。对于典型的基于HTTP REST/GraphQL API的应用程序，最佳实践是在发生某些错误情况时发送标准HTTP响应对象。")]),t("p",[s._v("在 CatsController，我们有一个 findAll() 方法（GET 路由）。假设此路由处理程序由于某种原因引发异常。 为了说明这一点，我们将对其进行如下硬编码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n\n@Get()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findAll() {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" HttpException("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Forbidden'")]),s._v(", HttpStatus.FORBIDDEN);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我们在这里使用了 HttpStatus 。它是从 @nestjs/common 包导入的辅助枚举器。")]),s._v("\n")])]),t("p",[s._v("现在当客户端调用这个端点时，响应如下所示：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"statusCode"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("403")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"message"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Forbidden"')]),s._v("\n}\n")])]),t("p",[s._v("HttpException 构造函数有两个必要的参数来决定响应:")]),t("ul",[t("li",[t("p",[s._v("response 参数定义 JSON 响应体。它可以是 string 或 object，如下所述。")])]),t("li",[t("p",[s._v("status参数定义HTTP状态代码。")])])]),t("p",[s._v("默认情况下，JSON 响应主体包含两个属性：")]),t("ul",[t("li",[t("p",[s._v("statusCode：默认为 status 参数中提供的 HTTP 状态代码")])]),t("li",[t("p",[s._v("message:基于状态的 HTTP 错误的简短描述")])])]),t("p",[s._v("仅覆盖 JSON 响应主体的消息部分，请在 response参数中提供一个 string。")]),t("p",[s._v("要覆盖整个 JSON 响应主体，请在response 参数中传递一个object。 Nest将序列化对象，并将其作为JSON 响应返回。")]),t("p",[s._v("第二个构造函数参数-status-是有效的 HTTP 状态代码。 最佳实践是使用从@nestjs/common导入的 HttpStatus枚举。")]),t("p",[s._v("这是一个覆盖整个响应正文的示例：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n\n@Get()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findAll() {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" HttpException({\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("status")]),s._v(": HttpStatus.FORBIDDEN,\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("error")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'This is a custom message'")]),s._v(",\n  }, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("403")]),s._v(");\n}\n")])]),t("h2",[s._v("自定义异常")]),t("p",[s._v("在许多情况下，您无需编写自定义异常，而可以使用内置的 Nest HTTP异常，如下一节所述。 如果确实需要创建自定义的异常，则最好创建自己的异常层次结构，其中自定义异常从基 HttpException 类继承。 使用这种方法，Nest可以识别您的异常，并自动处理错误响应。 让我们实现这样一个自定义异常：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// forbidden.exception.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ForbiddenException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("HttpException")]),s._v(" ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("super")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Forbidden'")]),s._v(", HttpStatus.FORBIDDEN);\n  }\n}\n")])]),t("p",[s._v("由于 ForbiddenException 扩展了基础 HttpException，它将和核心异常处理程序一起工作，因此我们可以在 findAll()方法中使用它。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n\n@Get()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findAll() {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" ForbiddenException();\n}\n")])]),t("h2",[s._v("内置HTTP异常")]),t("p",[s._v("为了减少样板代码，Nest 提供了一系列继承自核心异常 HttpException 的可用异常。所有这些都可以在 @nestjs/common包中找到：")]),t("ul",[t("li",[s._v("BadRequestException")]),t("li",[s._v("UnauthorizedException")]),t("li",[s._v("NotFoundException")]),t("li",[s._v("ForbiddenException")]),t("li",[s._v("NotAcceptableException")]),t("li",[s._v("RequestTimeoutException")]),t("li",[s._v("ConflictException")]),t("li",[s._v("GoneException")]),t("li",[s._v("PayloadTooLargeException")]),t("li",[s._v("UnsupportedMediaTypeException")]),t("li",[s._v("UnprocessableException")]),t("li",[s._v("InternalServerErrorException")]),t("li",[s._v("NotImplementedException")]),t("li",[s._v("BadGatewayException")]),t("li",[s._v("ServiceUnavailableException")]),t("li",[s._v("GatewayTimeoutException")])]),t("h2",[s._v("异常过滤器")]),t("p",[s._v("虽然基本（内置）异常过滤器可以为您自动处理许多情况，但有时您可能希望对异常层拥有完全控制权，例如，您可能要添加日志记录或基于一些动态因素使用其他 JSON模式。 异常过滤器正是为此目的而设计的。 它们使您可以控制精确的控制流以及将响应的内容发送回客户端。")]),t("p",[s._v("让我们创建一个异常过滤器，它负责捕获作为HttpException类实例的异常，并为它们设置自定义响应逻辑。为此，我们需要访问底层平台 Request和 Response。我们将访问Request对象，以便提取原始 url并将其包含在日志信息中。我们将使用 Response.json()方法，使用 Response对象直接控制发送的响应。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// http-exception.filter.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { ExceptionFilter, Catch, ArgumentsHost, HttpException } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Request, Response } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'express'")]),s._v(";\n\n@Catch(HttpException)\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("HttpExceptionFilter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ExceptionFilter")]),s._v(" ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v("(exception: HttpException, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("host")]),s._v(": ArgumentsHost) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" ctx = host.switchToHttp();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" response = ctx.getResponse<Response>();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" request = ctx.getRequest<Request>();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" status = exception.getStatus();\n\n    response\n      .status(status)\n      .json({\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("statusCode")]),s._v(": status,\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("timestamp")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v("().toISOString(),\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("path")]),s._v(": request.url,\n      });\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 所有异常过滤器都应该实现通用的 ExceptionFilter<T> 接口。它需要你使用有效签名提供 catch(exception: T, host: ArgumentsHost)方法。T 表示异常的类型。")]),s._v("\n")])]),t("p",[s._v("@Catch() 装饰器绑定所需的元数据到异常过滤器上。它告诉 Nest这个特定的过滤器正在寻找 HttpException 而不是其他的。在实践中，@Catch() 可以传递多个参数，所以你可以通过逗号分隔来为多个类型的异常设置过滤器。")]),t("h2",[s._v("参数主机")]),t("p",[s._v("让我们看看 catch()方法的参数。exception参数是当前正在处理的异常对象。host 参数是一个 ArgumentsHost 对象。ArgumentsHost 是传递给原始处理程序的参数的一个包装 ，我们将在其他章节中进一步讨论它。在这个上下文中，它的主要目的是为我们提供一个 Request 和 Response 对象的引用，这些对象被传递给原始请求处理程序(在产生异常的控制器中)。在本文中，我们使用了 ArgumentsHost上的一些帮助方法来获得所需的Request 和 Response 对象。")]),t("p",[s._v("switchtohttp() 返回一个 HttpArgumentsHost 对象。HttpArgumentsHost 对象有两个方法。我们使用这些方法来提取所需的对象，在本例中还使用了 Express 类型断言来返回原生的 Express类型化对象:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" response = ctx.getResponse<Response>();\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" request = ctx.getRequest<Request>();\n")])]),t("p",[s._v("这种抽象级别的原因是 ArgumentsHost 在所有上下文中都起作用（例如，我们现在正在使用的HTTP Server上下文，以及微服务和 Sockets）。 稍后，我们将看到如何利用ArgumentsHost及其辅助函数的功能为任何执行上下文访问适当的基础参数。 这将使我们能够编写可在所有上下文中运行的通用异常过滤器。")]),t("h2",[s._v("绑定过滤器")]),t("p",[s._v("让我们将 HttpExceptionFilter 绑定到 CatsController 的 create() 方法上。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n\n@Post()\n@UseFilters("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" HttpExceptionFilter())\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" create(@Body() createCatDto: CreateCatDto) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" ForbiddenException();\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// @UseFilters() 装饰器需要从 @nestjs/common 包导入。")]),s._v("\n")])]),t("p",[s._v("我们在这里使用了 @UseFilters() 装饰器。和 @Catch()装饰器类似，它可以使用单个过滤器实例，也可以使用逗号分隔的过滤器实例列表。 我们创建了 HttpExceptionFilter 的实例。另一种可用的方式是传递类（不是实例），让框架承担实例化责任并启用依赖注入。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n\n@Post()\n@UseFilters(HttpExceptionFilter)\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" create(@Body() createCatDto: CreateCatDto) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" ForbiddenException();\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 尽可能使用类而不是实例。由于 Nest 可以轻松地在整个模块中重复使用同一类的实例，因此可以减少内存使用。")]),s._v("\n")])]),t("p",[s._v("在上面的示例中，HttpExceptionFilter 仅应用于单个 create() 路由处理程序，使其成为方法范围的。 异常过滤器的作用域可以划分为不同的级别：方法范围，控制器范围或全局范围。 例如，要将过滤器设置为控制器作用域，您可以执行以下操作：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n\n@UseFilters("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" HttpExceptionFilter())\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsController")]),s._v(" ")]),s._v("{}\n")])]),t("p",[s._v("此结构为 CatsController 中的每个路由处理程序设置 HttpExceptionFilter。")]),t("p",[s._v("要创建一个全局范围的过滤器，您需要执行以下操作:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// main.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bootstrap")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" app = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" NestFactory.create(AppModule);\n  app.useGlobalFilters("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" HttpExceptionFilter());\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" app.listen("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(");\n}\nbootstrap();\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 该 useGlobalFilters() 方法不会为网关和混合应用程序设置过滤器。")]),s._v("\n")])]),t("p",[s._v("全局过滤器用于整个应用程序、每个控制器和每个路由处理程序。就依赖注入而言，从任何模块外部注册的全局过滤器（使用上面示例中的 useGlobalFilters()）不能注入依赖，因为它们不属于任何模块。为了解决这个问题，你可以注册一个全局范围的过滤器直接为任何模块设置过滤器：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { APP_FILTER } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/core'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [\n    {\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("provide")]),s._v(": APP_FILTER,\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("useClass")]),s._v(": HttpExceptionFilter,\n    },\n  ],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppModule")]),s._v(" ")]),s._v("{}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当使用此方法对过滤器执行依赖注入时，请注意，无论采用哪种结构的模块，过滤器实际上都是全局的。 应该在哪里做？ 选择定义了过滤器（以上示例中为 HttpExceptionFilter）的模块。 同样，useClass不是处理自定义提供程序注册的唯一方法。 在这里了解更多。")]),s._v("\n")])]),t("p",[s._v("您可以根据需要添加任意数量的过滤器;只需将每个组件添加到 providers（提供者）数组。")]),t("h2",[s._v("捕获异常")]),t("p",[s._v("为了捕获每一个未处理的异常(不管异常类型如何)，将 @Catch() 装饰器的参数列表设为空，例如 @Catch()。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// any-exception.filter.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n@Catch()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AllExceptionsFilter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ExceptionFilter")]),s._v(" ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v("(exception: unknown, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("host")]),s._v(": ArgumentsHost) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" ctx = host.switchToHttp();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" response = ctx.getResponse();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" request = ctx.getRequest();\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" status =\n      exception "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    response.status(status).json({\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("statusCode")]),s._v(": status,\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("timestamp")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v("().toISOString(),\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("path")]),s._v(": request.url,\n    });\n  }\n}\n")])]),t("p",[s._v("在上面的示例中，过滤器将捕获抛出的每个异常，而不管其类型(类)如何。")]),t("h2",[s._v("继承")]),t("p",[s._v("通常，您将创建完全定制的异常过滤器，以满足您的应用程序需求。如果您希望重用已经实现的核心异常过滤器，并基于某些因素重写行为，请看下面的例子。")]),t("p",[s._v("为了将异常处理委托给基础过滤器，需要继承 BaseExceptionFilter 并调用继承的 catch() 方法。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// all-exceptions.filter.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Catch, ArgumentsHost } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { BaseExceptionFilter } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/core'")]),s._v(";\n\n@Catch()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AllExceptionsFilter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("BaseExceptionFilter")]),s._v(" ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v("(exception: unknown, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("host")]),s._v(": ArgumentsHost) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("super")]),s._v(".catch(exception, host);\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 继承自基础类的过滤器必须由框架本身实例化（不要使用 new 关键字手动创建实例）")]),s._v("\n")])]),t("p",[s._v("上面的实现只是一个演示。扩展异常过滤器的实现将包括定制的业务逻辑(例如，处理各种情况)。")]),t("p",[s._v("全局过滤器可以扩展基本过滤器。这可以通过两种方式来实现。")]),t("p",[s._v("您可以通过注入 HttpServer 来使用继承自基础类的全局过滤器。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bootstrap")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" app = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" NestFactory.create(AppModule);\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" { httpAdapter } = app.get(HttpAdapterHost);\n  app.useGlobalFilters("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" AllExceptionsFilter(httpAdapter));\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" app.listen("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(");\n}\nbootstrap();\n")])]),t("hr"),t("h1",[s._v("管道")]),t("p",[s._v("管道是具有 @Injectable() 装饰器的类。管道应实现 PipeTransform 接口。")]),t("p",[s._v("管道有两个类型:")]),t("ul",[t("li",[s._v("转换：管道将输入数据转换为所需的数据输出")]),t("li",[s._v("验证：对输入数据进行验证，如果验证成功继续传递; 验证失败则抛出异常;")])]),t("p",[s._v("在这两种情况下, 管道 参数(arguments) 会由 控制器(controllers)的路由处理程序 进行处理. Nest 会在调用这个方法之前插入一个管道，管道会先拦截方法的调用参数,进行转换或是验证处理，然后用转换好或是验证好的参数调用原方法。")]),t("p",[s._v("管道在异常区域内运行。这意味着当抛出异常时，它们由核心异常处理程序和应用于当前上下文的 异常过滤器 处理。当在 Pipe 中发生异常，controller 不会继续执行任何方法。")]),t("h2",[s._v("内置管道")]),t("p",[s._v("Nest 自带三个开箱即用的管道，即 ValidationPipe，ParseIntPipe 和 ParseUUIDPipe。他们从 @nestjs/common 包中导出。为了更好地理解它们是如何工作的，我们将从头开始构建它们。")]),t("p",[s._v("我们从 ValidationPipe. 开始。 首先它只接受一个值并立即返回相同的值，其行为类似于一个标识函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// validation.pipe.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { PipeTransform, Injectable, ArgumentMetadata } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ValidationPipe")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("PipeTransform")]),s._v(" ")]),s._v("{\n  transform(value: any, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("metadata")]),s._v(": ArgumentMetadata) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value;\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// PipeTransform<T, R> 是一个通用接口，其中 T 表示 value 的类型，R 表示 transform() 方法的返回类型。")]),s._v("\n")])]),t("p",[s._v("每个管道必须提供 transform() 方法。 这个方法有两个参数：")]),t("ul",[t("li",[s._v("value")]),t("li",[s._v("metadata")])]),t("p",[s._v("value 是当前处理的参数，而 metadata 是其元数据。元数据对象包含一些属性：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" interface ArgumentMetadata {\n  readonly type: "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'body'")]),s._v(" | "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'query'")]),s._v(" | "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'param'")]),s._v(" | "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'custom'")]),s._v(";\n  readonly metatype?: Type<any>;\n  readonly data?: string;\n}\n")])]),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[s._v("参数")]),t("th",{staticStyle:{"text-align":"center"}},[s._v("描述")])])]),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("type")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("告诉我们该属性是一个 body @Body()，query @Query()，param @Param() 还是自定义参数")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("metatype")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("属性的元类型，例如 String。 如果在函数签名中省略类型声明，或者使用原生 JavaScript，则为 undefined。")])]),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("data")]),t("td",{staticStyle:{"text-align":"center"}},[s._v("传递给装饰器的字符串，例如 @Body('string')。 如果您将括号留空，则为 undefined。")])])])]),t("p",[s._v("TypeScript接口在编译期间消失，所以如果你使用接口而不是类，那么 metatype 的值将是一个 Object。")]),t("h2",[s._v("测试用例")]),t("p",[s._v("我们来关注一下 CatsController 的 create() 方法：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controler.ts")]),s._v("\n\n@Post()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" create(@Body() createCatDto: CreateCatDto) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".catsService.create(createCatDto);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// create-cat.dto.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CreateCatDto")]),s._v(" ")]),s._v("{\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n")])]),t("p",[s._v("我们要确保create方法能正确执行，所以必须验证 CreateCatDto 里的三个属性。我们可以在路由处理程序方法中做到这一点，但是我们会打破单个责任原则（SRP）。另一种方法是创建一个验证器类并在那里委托任务，但是不得不每次在方法开始的时候我们都必须使用这个验证器。那么验证中间件呢？ 这可能是一个好主意，但我们不可能创建一个整个应用程序通用的中间件(因为中间件不知道 execution context执行环境,也不知道要调用的函数和它的参数)。")]),t("p",[s._v("在这种情况下，你应该考虑使用管道。")]),t("h2",[s._v("类验证器")]),t("p",[s._v("让我们看一下验证的另外一种实现方式")]),t("p",[s._v("Nest 与 class-validator 配合得很好。这个优秀的库允许您使用基于装饰器的验证。装饰器的功能非常强大，尤其是与 Nest 的 Pipe 功能相结合使用时，因为我们可以通过访问 metatype 信息做很多事情，在开始之前需要安装一些依赖。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-shell"}},[t("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("$")]),t("span",{pre:!0,attrs:{class:"bash"}},[s._v(" npm i --save class-validator class-transformer")]),s._v("\n")])]),t("p",[s._v("安装完成后，我们就可以向 CreateCatDto 类添加一些装饰器。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// create-cat.dto.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { IsString, IsInt } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class-validator'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CreateCatDto")]),s._v(" ")]),s._v("{\n  @IsString()\n  readonly name: string;\n\n  @IsInt()\n  readonly age: number;\n\n  @IsString()\n  readonly breed: string;\n}\n")])]),t("p",[s._v("现在我们来创建一个 ValidationPipe 类。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// validation.pipe.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { validate } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class-validator'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { plainToClass } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'class-transformer'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ValidationPipe")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("PipeTransform")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("any")]),s._v("> ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" transform(value: any, { metatype }: ArgumentMetadata) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!metatype || !"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".toValidate(metatype)) {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" object = plainToClass(metatype, value);\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" errors = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" validate(object);\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (errors.length > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" BadRequestException("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Validation failed'")]),s._v(");\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value;\n  }\n\n  private toValidate(metatype: "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v("): boolean {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" types: "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v("[] = ["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Boolean")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Number")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("];\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" !types.includes(metatype);\n  }\n}\n")])]),t("p",[s._v("让我们来看看这个代码。首先你会发现 transform() 函数是 异步 的, Nest 支持同步和异步管道。这样做的原因是因为有些 class-validator 的验证是可以异步的(Promise)")]),t("p",[s._v("接下来请注意，我们正在使用解构赋值（从 ArgumentMetadata 中提取参数）到方法中。这是一个先获取全部 ArgumentMetadata 然后用附加语句提取某个变量的简写方式。")]),t("p",[s._v("下一步，请观察 toValidate() 方法。当验证类型不是 JavaScript 的数据类型时，跳过验证。")]),t("p",[s._v("下一步，我们使用 class-transformer 的 plainToClass() 方法来转换 JavaScript 的参数为可验证的类型对象。一个请求中的 body 数据是不包行类型信息的，Class-validator 需要使用前面定义过的 DTO，就需要做一个类型转换。")]),t("p",[s._v("最后，如前所述，这就是一个验证管道，它要么返回值不变，要么抛出异常。")]),t("p",[s._v("最后一步是设置 ValidationPipe 。管道，与异常过滤器相同，它们可以是方法范围的、控制器范围的和全局范围的。另外，管道可以是参数范围的。我们可以直接将管道实例绑定到路由参数装饰器，例如@Body()。让我们来看看下面的例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controler.ts")]),s._v("\n\n@Post()\n@UsePipes(ValidationPipe)\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" create(@Body() createCatDto: CreateCatDto) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".catsService.create(createCatDto);\n}\n")])]),t("p",[s._v("由于 ValidationPipe 被创建为尽可能通用，所以我们将把它设置为一个全局作用域的管道，用于整个应用程序中的每个路由处理器。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// main.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bootstrap")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" app = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" NestFactory.create(AppModule);\n  app.useGlobalPipes("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" ValidationPipe());\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" app.listen("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(");\n}\nbootstrap();\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 在 混合应用中 useGlobalPipes() 方法不会为网关和微服务设置管道, 对于标准(非混合) 微服务应用使用 useGlobalPipes() 全局设置管道。")]),s._v("\n")])]),t("p",[s._v("全局管道用于整个应用程序、每个控制器和每个路由处理程序。就依赖注入而言，从任何模块外部注册的全局管道（如上例所示）无法注入依赖，因为它们不属于任何模块。为了解决这个问题，可以使用以下构造直接为任何模块设置管道：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { APP_PIPE } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/core'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [\n    {\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("provide")]),s._v(": APP_PIPE,\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("useClass")]),s._v(": ValidationPipe\n    }\n  ]\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppModule")]),s._v(" ")]),s._v("{}\n")])]),t("h2",[s._v("转换管道")]),t("p",[s._v("验证不是管道唯一的用处。在本章的开始部分，我已经提到管道也可以将输入数据转换为所需的输出。这是可以的，因为从 transform 函数返回的值完全覆盖了参数先前的值。在什么时候使用？有时从客户端传来的数据需要经过一些修改（例如字符串转化为整数），然后处理函数才能正确的处理。还有种情况，比如有些数据具有默认值，用户不必传递带默认值参数，一旦用户不穿就使用默认值。转换管道被插入在客户端请求和请求处理程序之间用来处理客户端请求。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// parse-int.pipe.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ParseIntPipe")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("PipeTransform")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("number")]),s._v("> ")]),s._v("{\n  transform(value: string, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("metadata")]),s._v(": ArgumentMetadata): number {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" val = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("parseInt")]),s._v("(value, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("isNaN")]),s._v("(val)) {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" BadRequestException("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Validation failed'")]),s._v(");\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" val;\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如下所示, 我们可以很简单的配置管道来处理所参数 id:")]),s._v("\n\n@Get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':id'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findOne(@Param("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'id'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" ParseIntPipe()) id) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".catsService.findOne(id);\n}\n")])]),t("h2",[s._v("内置验证管道")]),t("p",[s._v("幸运的是，由于 ValidationPipe 和 ParseIntPipe 是内置管道，因此您不必自己构建这些管道（请记住， ValidationPipe 需要同时安装 class-validator 和 class-transformer 包）。")]),t("p",[s._v("内置的 ValidationPipe 提供了比本章描述的更多的选项，为了简单和减少学习曲线，这些选项一直保持基本。你可以在这里查看很多例子。")]),t("p",[s._v("另一个选项是转换，回想一下前面提到过的反序列化 body 数据没有验证类型（DTO 定义）。到目前为止我们已经使用管道来验证数据，你可能还记得在这个过程中，我们用class-transform把普通对象转换为 DTO 可验证对象来进行验证。内置的 ValidationPipe 也可以返回转换后的对象，该对象 transform 的值为 true，如下所示：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n\n@Post()\n@UsePipes("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" ValidationPipe({ "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("transform")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" }))\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" create(@Body() createCatDto: CreateCatDto) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".catsService.create(createCatDto);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ValidationPipe 是从 @nestjs/common 包中导入的。")]),s._v("\n")])]),t("p",[s._v("因为这个管道是基于 class-validator 和 class-transformer 库的，所以有很多选项可配置。选项如下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" interface ValidationPipeOptions extends ValidatorOptions {\n  transform?: boolean;\n  disableErrorMessages?: boolean;\n  exceptionFactory?: "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("errors: ValidationError[]")]),s._v(") =>")]),s._v(" any;\n}\n")])]),t("p",[s._v("您可以在他的库中找到关于 class-validator 包的更多信息。")]),t("hr"),t("h1",[s._v("守卫")]),t("p",[s._v("守卫是一个使用 @Injectable() 装饰器的类。 守卫应该实现 CanActivate 接口。")]),t("p",[s._v("守卫有一个单独的责任。它们根据运行时出现的某些条件（例如权限，角色，访问控制列表等）来确定给定的请求是否由路由处理程序处理。 这通常称为授权。在传统的 Express 应用程序中，通常由中间件处理授权。中间件是身份验证的良好选择。到目前为止，访问限制逻辑大多在中间件内。这样很好，因为诸如 token 验证或将 request 对象附加属性与特定路由没有强关联。")]),t("p",[s._v("中间件不知道调用 next() 函数后会执行哪个处理程序。另一方面，警卫可以访问 ExecutionContext 实例，因此确切地知道接下来要执行什么。它们的设计与异常过滤器、管道和拦截器非常相似，目的是让您在请求/响应周期的正确位置插入处理逻辑，并以声明的方式进行插入。这有助于保持代码的简洁和声明性。")]),t("p",[s._v("守卫在所有中间件执行之后执行，但在任何拦截器或管道之前执行。")]),t("h2",[s._v("授权守卫")]),t("p",[s._v("正如前面提到的，授权是保护的一个很好的用例，因为只有当调用者(通常是经过身份验证的特定用户)具有足够的权限时，特定的路由才可用。我们现在要构建的 AuthGuard 假设用户是经过身份验证的(因此，请求头附加了一个token)。它将提取和验证token，并使用提取的信息来确定请求是否可以继续。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// auth.guard.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, CanActivate, ExecutionContext } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Observable } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AuthGuard")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CanActivate")]),s._v(" ")]),s._v("{\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("<boolean> | Observable<boolean> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" request = context.switchToHttp().getRequest();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" validateRequest(request);\n  }\n}\n")])]),t("p",[s._v("validateRequest() 函数中的逻辑可以根据需要变得简单或复杂。本例的主要目的是说明保护如何适应请求/响应周期。")]),t("p",[s._v("每个保护必须实现一个canActivate()函数。此函数应该返回一个布尔值，指示是否允许当前请求。它可以同步或异步地返回响应(通过 Promise 或 Observable)。Nest使用返回值来控制下一个行为:")]),t("ul",[t("li",[s._v("如果返回 true, 将处理用户调用。")]),t("li",[s._v("如果返回 false, 则 Nest 将忽略当前处理的请求。")])]),t("h2",[s._v("执行上下文")]),t("p",[s._v("canActivate() 函数接收单个参数 ExecutionContext 实例。ExecutionContext 继承自 ArgumentsHost 。ArgumentsHost 是传递给原始处理程序的参数的包装器，在上面的示例中，我们只是使用了之前在 ArgumentsHost上定义的帮助器方法来获得对请求对象的引用。有关此主题的更多信息。你可以在这里了解到更多(在异常过滤器章节)。")]),t("p",[s._v("ExecutionContext 提供了更多功能，它扩展了 ArgumentsHost，但是也提供了有关当前执行过程的更多详细信息。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" interface ExecutionContext extends ArgumentsHost {\n  getClass<T = any>(): Type<T>;\n  getHandler(): "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(";\n}\n")])]),t("p",[s._v("getHandler()方法返回对将要调用的处理程序的引用。getClass()方法返回这个特定处理程序所属的 Controller 类的类型。例如，如果当前处理的请求是 POST 请求，目标是 CatsController上的 create() 方法，那么 getHandler() 将返回对 create() 方法的引用，而 getClass()将返回一个CatsControllertype(而不是实例)。")]),t("h2",[s._v("基于角色认证")]),t("p",[s._v("一个更详细的例子是一个 RolesGuard 。这个守卫只允许具有特定角色的用户访问。我们将从一个基本模板开始，并在接下来的部分中构建它。目前，它允许所有请求继续:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, CanActivate, ExecutionContext } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Observable } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("RolesGuard")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CanActivate")]),s._v(" ")]),s._v("{\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("<boolean> | Observable<boolean> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n  }\n}\n")])]),t("h2",[s._v("绑定守卫")]),t("p",[s._v("与管道和异常过滤器一样，守卫可以是控制范围的、方法范围的或全局范围的。下面，我们使用 @UseGuards()装饰器设置了一个控制范围的守卫。这个装饰器可以使用单个参数，也可以使用逗号分隔的参数列表。也就是说，你可以传递几个守卫并用逗号分隔它们。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Controller("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cats'")]),s._v(")\n@UseGuards(RolesGuard)\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsController")]),s._v(" ")]),s._v("{}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// @UseGuards() 装饰器需要从 @nestjs/common 包导入。")]),s._v("\n")])]),t("p",[s._v("上面的构造将守卫附加到此控制器声明的每个处理程序。如果我们决定只限制其中一个, 我们只需要在方法级别设置守卫。为了绑定全局守卫, 我们使用 Nest 应用程序实例的 useGlobalGuards() 方法:")]),t("p",[s._v("为了设置一个全局警卫，使用Nest应用程序实例的 useGlobalGuards() 方法：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" app = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" NestFactory.create(AppModule);\napp.useGlobalGuards("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" RolesGuard());\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 对于混合应用程序，useGlobalGuards() 方法不会为网关和微服务设置守卫。对于“标准”(非混合)微服务应用程序，useGlobalGuards()在全局安装守卫。")]),s._v("\n")])]),t("p",[s._v("全局守卫用于整个应用程序, 每个控制器和每个路由处理程序。在依赖注入方面, 从任何模块外部注册的全局守卫 (如上面的示例中所示) 不能插入依赖项, 因为它们不属于任何模块。为了解决此问题, 您可以使用以下构造直接从任何模块设置一个守卫:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { APP_GUARD } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/core'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [\n    {\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("provide")]),s._v(": APP_GUARD,\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("useClass")]),s._v(": RolesGuard,\n    },\n  ],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AppModule")]),s._v(" ")]),s._v("{}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当使用此方法为守卫程序执行依赖项注入时，请注意，无论使用此构造的模块是什么，守卫程序实际上是全局的。应该在哪里进行?选择定义守卫的模块(上例中的 RolesGuard)。此外，useClass不是处理自定义 providers 注册的唯一方法。")]),s._v("\n")])]),t("hr"),t("h1",[s._v("拦截器")]),t("p",[s._v("拦截器是使用 @Injectable() 装饰器注解的类。拦截器应该实现 NestInterceptor 接口。")]),t("p",[s._v("拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以：")]),t("ul",[t("li",[s._v("在函数执行之前/之后绑定额外的逻辑")]),t("li",[s._v("转换从函数返回的结果")]),t("li",[s._v("转换从函数抛出的异常")]),t("li",[s._v("扩展基本函数行为")]),t("li",[s._v("根据所选条件完全重写函数 (例如, 缓存目的)")])]),t("h2",[s._v("基础")]),t("p",[s._v("每个拦截器都有 intercept() 方法，它接收2个参数。 第一个是 ExecutionContext 实例（与守卫完全相同的对象）。 ExecutionContext 继承自 ArgumentsHost 。 ArgumentsHost 是传递给原始处理程序的参数的一个包装 ，它根据应用程序的类型包含不同的参数数组。")]),t("h2",[s._v("执行上下文")]),t("p",[s._v("ExecutionContext 提供了更多功能，它扩展了 ArgumentsHost，但是也提供了有关当前执行过程的更多详细信息。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" interface ExecutionContext extends ArgumentsHost {\n  getClass<T = any>(): Type<T>;\n  getHandler(): "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(";\n}\n")])]),t("p",[s._v("getHandler() 方法返回对当前处理的处理程序的引用,而 getClass() 返回此特定处理程序所属的 Controller 类的类型。用另外的话来说,如果用户指向在 CatsController 中定义和注册的 create() 方法, getHandler() 将返回对 create() 方法的引用，在这种情况下, getClass() 将只返回一个 CatsController 的类型（不是实例）。")]),t("h2",[s._v("调用处理程序")]),t("p",[s._v("第二个参数是 CallHandler。如果不手动调用 handle() 方法，则主处理程序根本不会进行求值。这是什么意思？基本上，CallHandler是一个包装执行流的对象，因此推迟了最终的处理程序执行。")]),t("p",[s._v("比方说，有人提出了 POST /cats 请求。此请求指向在 CatsController 中定义的 create() 处理程序。如果在此过程中未调用拦截器的 handle() 方法，则 create() 方法不会被计算。只有 handle() 被调用（并且已返回值），最终方法才会被触发。为什么？因为Nest订阅了返回的流，并使用此流生成的值来为最终用户创建单个响应或多个响应。而且，handle() 返回一个 Observable，这意味着它为我们提供了一组非常强大的运算符，可以帮助我们进行例如响应操作。")]),t("h2",[s._v("截取切面")]),t("p",[s._v("第一个用例是使用拦截器在函数执行之前或之后添加额外的逻辑。当我们要记录与应用程序的交互时，它很有用，例如 存储用户调用，异步调度事件或计算时间戳。作为一个例子，我们来创建一个简单的例子 LoggingInterceptor。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// logging.interceptor.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, NestInterceptor, ExecutionContext, CallHandler } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Observable } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { tap } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs/operators'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("LoggingInterceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestInterceptor")]),s._v(" ")]),s._v("{\n  intercept(context: ExecutionContext, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": CallHandler): Observable<any> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Before...'")]),s._v(");\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" now = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v(".now();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" next\n      .handle()\n      .pipe(\n        tap("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`After... "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v(".now() - now}")]),s._v("ms`")]),s._v(")),\n      );\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 拦截器的作用与控制器，提供程序，守卫等相同，这意味着它们可以通过构造函数注入依赖项。")]),s._v("\n")])]),t("p",[s._v("由于 handle() 返回一个RxJS Observable，我们有很多种操作符可以用来操作流。在上面的例子中，我们使用了 tap() 运算符，该运算符在可观察序列的正常或异常终止时调用函数。")]),t("h2",[s._v("绑定拦截器")]),t("p",[s._v("为了设置拦截器, 我们使用从 @nestjs/common 包导入的 @UseInterceptors() 装饰器。与守卫一样, 拦截器可以是控制器范围内的, 方法范围内的或者全局范围内的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cats.controller.ts")]),s._v("\n\n@UseInterceptors(LoggingInterceptor)\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CatsController")]),s._v(" ")]),s._v("{}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// @UseInterceptors() 装饰器从 @nestjs/common 导入。")]),s._v("\n")])]),t("p",[s._v("由此，CatsController 中定义的每个路由处理程序都将使用 LoggingInterceptor。当有人调用 GET /cats 端点时，您将在控制台窗口中看到以下输出：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-shell"}},[s._v("Before...\nAfter... 1ms\n")])]),t("p",[s._v("如上所述, 上面的构造将拦截器附加到此控制器声明的每个处理程序。如果我们决定只限制其中一个, 我们只需在方法级别设置拦截器。为了绑定全局拦截器, 我们使用 Nest 应用程序实例的 useGlobalInterceptors() 方法:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" app = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" NestFactory.create(ApplicationModule);\napp.useGlobalInterceptors("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" LoggingInterceptor());\n")])]),t("p",[s._v("全局拦截器用于整个应用程序、每个控制器和每个路由处理程序。在依赖注入方面, 从任何模块外部注册的全局拦截器 (如上面的示例中所示) 无法插入依赖项, 因为它们不属于任何模块。为了解决此问题, 您可以使用以下构造直接从任何模块设置一个拦截器:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// app.module.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Module } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { APP_INTERCEPTOR } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/core'")]),s._v(";\n\n@Module({\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("providers")]),s._v(": [\n    {\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("provide")]),s._v(": APP_INTERCEPTOR,\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("useClass")]),s._v(": LoggingInterceptor,\n    },\n  ],\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ApplicationModule")]),s._v(" ")]),s._v("{}\n")])]),t("h2",[s._v("响应映射")]),t("p",[s._v("我们已经知道, handle() 返回一个 Observable。此流包含从路由处理程序返回的值, 因此我们可以使用 map() 运算符轻松地对其进行改变。")]),t("blockquote",[t("p",[s._v("响应映射功能不适用于特定于库的响应策略（禁止直接使用 @Res() 对象）。")])]),t("p",[s._v("让我们创建一个 TransformInterceptor, 它将打包响应并将其分配给 data 属性。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// transform.interceptor.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, NestInterceptor, ExecutionContext, CallHandler } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Observable } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { map } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs/operators'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" interface Response<T> {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": T;\n}\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("TransformInterceptor")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v("> "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestInterceptor")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Response")]),s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("T")]),s._v(">> ")]),s._v("{\n  intercept(context: ExecutionContext, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": CallHandler): Observable<Response<T>> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" next.handle().pipe(map("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("data")]),s._v(" =>")]),s._v(" ({ data })));\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Nest 拦截器就像使用异步 intercept() 方法的魅力一样, 意思是, 如果需要，您可以毫不费力地将方法切换为异步。")]),s._v("\n")])]),t("p",[s._v("之后，当有人调用GET /cats端点时，请求将如下所示（我们假设路由处理程序返回一个空 arry []）：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"data"')]),s._v(": []\n}\n")])]),t("p",[s._v("拦截器在创建用于整个应用程序的可重用解决方案时具有巨大的潜力。例如，我们假设我们需要将每个发生的 null 值转换为空字符串 ''。我们可以使用一行代码并将拦截器绑定为全局代码。由于这一点，它会被每个注册的处理程序自动重用。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, NestInterceptor, ExecutionContext, CallHandler } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Observable } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { map } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs/operators'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ExcludeNullInterceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestInterceptor")]),s._v(" ")]),s._v("{\n  intercept(context: ExecutionContext, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": CallHandler): Observable<any> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" next\n      .handle()\n      .pipe(map("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" value === "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" ? "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v(" : value ));\n  }\n}\n")])]),t("h2",[s._v("异常映射")]),t("p",[s._v("另一个有趣的用例是利用 catchError() 操作符来覆盖抛出的异常：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// exception.interceptor.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  BadGatewayException,\n  CallHandler,\n} "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Observable, throwError } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { catchError } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs/operators'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ErrorsInterceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestInterceptor")]),s._v(" ")]),s._v("{\n  intercept(context: ExecutionContext, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": CallHandler): Observable<any> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" next\n      .handle()\n      .pipe(\n        catchError("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("err")]),s._v(" =>")]),s._v(" throwError("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" BadGatewayException())),\n      );\n  }\n}\n")])]),t("h2",[s._v("Stream 重写")]),t("p",[s._v("有时我们可能希望完全阻止调用处理程序并返回不同的值 (例如, 由于性能问题而从缓存中获取), 这是有多种原因的。一个很好的例子是缓存拦截器，它将使用一些TTL存储缓存的响应。不幸的是, 这个功能需要更多的代码并且由于简化, 我们将仅提供简要解释主要概念的基本示例。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cache.interceptor.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, NestInterceptor, ExecutionContext, CallHandler } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Observable, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("CacheInterceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestInterceptor")]),s._v(" ")]),s._v("{\n  intercept(context: ExecutionContext, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": CallHandler): Observable<any> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" isCached = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (isCached) {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v("([]);\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" next.handle();\n  }\n}\n")])]),t("p",[s._v("这是一个 CacheInterceptor，带有硬编码的 isCached 变量和硬编码的响应 [] 。我们在这里通过 of 运算符创建并返回了一个新的流, 因此路由处理程序根本不会被调用。当有人调用使用 CacheInterceptor 的端点时, 响应 (一个硬编码的空数组) 将立即返回。为了创建一个通用解决方案, 您可以利用 Reflector 并创建自定义修饰符。反射器 Reflector 在守卫章节描述的很好。")]),t("h2",[s._v("更多操作者")]),t("p",[s._v("返回流的可能性为我们提供了许多可能性。让我们考虑另一个常见的用例。假设您想处理 timeout 。当端点在一段时间后没有返回任何内容时, 我们希望得到错误响应。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// timeout.interceptor.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Injectable, NestInterceptor, ExecutionContext, CallHandler } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Observable } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { timeout } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rxjs/operators'")]),s._v(";\n\n@Injectable()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("TimeoutInterceptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NestInterceptor")]),s._v(" ")]),s._v("{\n  intercept(context: ExecutionContext, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": CallHandler): Observable<any> {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" next.handle().pipe(timeout("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5000")]),s._v("))\n  }\n}\n")])]),t("p",[s._v("5秒后，请求处理将被取消。")]),t("hr"),t("h1",[s._v("自定义路由参数装饰器")]),t("p",[s._v("Nest 是基于装饰器这种语言特性而创建的。它是许多常用编程语言中众所周知的概念，但在 JavaScript 世界中，这个概念仍然相对较新。所以为了更好地理解装饰器是如何工作的，你应该看看 这篇 文章。下面给出一个简单的定义：")]),t("p",[s._v("ES2016 的装饰器是一个可以将目标对象，名称和属性描述符作为参数的返回函数的表达式。你可以通过装饰器前缀 "),t("strong",[s._v("at")]),s._v(" 来使用它，并将其放置在您想要装饰的最顶端。装饰器可以被定义为一个类或是属性。")]),t("h2",[s._v("参数装饰器")]),t("p",[s._v("Nest 提供了一组有用的参数装饰器，可以和 HTTP 路由处理器（route handlers）一起使用。")]),t("p",[s._v("另外，你还可以创建自定义装饰器。为什么它很有用呢？")]),t("p",[s._v("在 Node.js 的世界中，把属性值附加到 request 对象中是一种很常见的做法。然后你可以在任何时候在路由处理程器（route handlers）中手动取到它们，例如，使用下面这个构造：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" user = req.user;\n")])]),t("p",[s._v("为了使其更具可读性和透明性，我们可以创建 @User() 装饰器并且在所有控制器中重复利用它。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// user.decorator.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { createParamDecorator } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" User = createParamDecorator("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("data, req")]),s._v(") =>")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" req.user;\n});\n")])]),t("p",[s._v("现在你可以在任何你想要的地方很方便地使用它。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Get()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findOne(@User() user: UserEntity) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(user);\n}\n")])]),t("h2",[s._v("传递数据")]),t("p",[s._v("当装饰器的行为取决于某些条件时，可以使用 data 参数将参数传递给装饰器的工厂函数。 一个用例是自定义装饰器，它通过键从请求对象中提取属性。 例如，假设我们的身份验证层验证请求并将用户实体附加到请求对象。 经过身份验证的请求的用户实体可能类似于：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"id"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("101")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"firstName"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Alan"')]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"lastName"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Turing"')]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"email"')]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"alan@email.com"')]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"roles"')]),s._v(": ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"admin"')]),s._v("]\n}\n")])]),t("p",[s._v("让我们定义一个将属性名作为键的装饰器，如果存在则返回关联的值（如果不存在则返回未定义的值，或者如果尚未创建 user 对象，则返回未定义的值）。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// user.decorator.ts")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { createParamDecorator } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'@nestjs/common'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" User = createParamDecorator("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("data: string, req")]),s._v(") =>")]),s._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" data ? req.user && req.user[data] : req.user;\n});\n")])]),t("p",[s._v("然后，您可以通过控制器中的 @User() 装饰器访问以下特定属性：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Get()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findOne(@User("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'firstName'")]),s._v(") firstName: string) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`Hello "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${firstName}")]),s._v("`")]),s._v(");\n}\n")])]),t("h2",[s._v("使用管道")]),t("p",[s._v("Nest 对待自定义的路由参数装饰器和这些内置的装饰器（@Body()，@Param() 和 @Query()）一样。这意味着管道也会因为自定义注释参数（在本例中为 user 参数）而被执行。此外，你还可以直接将管道应用到自定义装饰器上：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s._v("@Get()\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("async")]),s._v(" findOne(@User("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" ValidationPipe()) user: UserEntity) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(user);\n}\n")])])])}],!1,null,null,null);a.default=r.exports},eb2b:function(s,a,t){"use strict";t.r(a);var e=t("e017"),r=t.n(e),n=t("21a1"),l=t.n(n),p=new r.a({id:"icon-404",use:"icon-404-usage",viewBox:"350 447.4 323.9 129.2",content:'<symbol xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="350 447.4 323.9 129.2" id="icon-404"><g><path d="M484.7,570.5c-13.3-13.3-15.7-29.6-16.4-46.3c-0.7-16.1-0.7-32.1,4-47.8c4.4-14.5,13.3-24.6,28.4-27.6c15.5-3.1,30.2-1.5,41.9,10.9c6.2,6.6,9.2,14.8,10.7,23.6c3.8,22.9,4.2,45.8-2.3,68.4c-2,7.1-6.2,12.9-11.3,18.1c-0.4,0.4-0.7,0.6-1.4,0.8c0.4,0.1,4.4,0,4.5,0c6.9,0.1,13.7-0.1,20.6-0.1c2.1,0,3.9,0.4,3.9,3c0,2.4-1.5,3.1-3.8,3.1c-12.2,0-24.4,0-36.5,0c-2,0-3.4-0.4-3.8-2.7c-0.4-2.1,0.9-3,2.6-3.6c9.8-3.2,15.6-10.2,19-19.6c3.2-8.8,4.3-17.9,4.6-27.1c0.5-16.9,1-33.8-5.3-50c-3.6-9.4-10.3-16.2-20.1-18.4c-14-3.2-27.6-2.8-38.3,8.9c-6,6.6-8.3,14.9-9.6,23.3c-2.6,18-2.6,36,0.5,54c0.8,4.6,2.3,9.2,4.3,13.5c3.6,7.5,9.2,12.8,17.2,15.4c1.9,0.6,3.2,1.4,2.9,3.7c-0.4,2.2-1.9,2.5-3.9,2.5c-12.1,0-24.1,0-36.2,0c-2.3,0-4.1-0.4-4.2-3c0-2.8,2-3.1,4.2-3.1C468.4,570.4,476.1,570.5,484.7,570.5z" /></g><g><path d="M433.9,570.6c0-8,0-15,0-22c4,0,8.3,0,12.5,0c2.5,0,3.5-1.5,3.5-4c0-4,0-7.9,0-11.9c0-2.4-1-3.2-3.5-3.3c-1.3-0.1-2.6,0.2-3.9,0.2c-2.8,0-5.6,0-8.4,0c-0.7-1-0.2-2.2-0.2-3c0-23.9,0-47.7,0-71.6c0-0.8,0-1.6,0-2.4c-0.3-2.1-1.3-3-3.3-3c-3.8,0-7.7,0.1-11.5-0.1c-1.6-0.1-2.5,0.6-3.2,1.7c-4,6.6-8.7,12.7-13,19c-3.7,5.4-7.5,10.7-11.3,16c-3.2,4.5-6.3,9.3-9.5,13.8c-2.6,3.7-5.1,7.5-7.8,11.1c-2.8,3.8-5.4,7.7-8.1,11.6c-1.4,2-2.8,4.1-4.3,6c-0.7,0.8-1,1.6-1,2.5c0,4.7,0,9.3,0,14c0,2.8,0.4,3.4,3.2,3.4c15.8,0,31.7,0,47.5,0c0.6,0,1.3,0,2.3,0c0,7,0,14.4,0,22c-2,0-2.7,0-3.9,0c-18.2,0-36.3,0-54.5,0c-0.7,0-1.4,0-2.1,0c-2.3,0.2-3.4,1-3.4,3c0,2.1,1.1,3,3.6,3c19.9,0,39.8,0,59.7,0c1.2,0,2.3,0,3.5,0c2,0,3.1-0.8,3.1-2.9c0-9.4,0-18.9,0-28.3c0-2.2-0.9-3.5-3.1-3.7c-0.8-0.1-1.6-0.1-2.4-0.1c-14.7,0-29.3,0-44,0c-0.9,0-1.5,0-2.5,0c0-1,0-3.1,0-4.7c0-1.7-0.5-3.6,0.1-5.1c0.8-1.9,2.1-3.6,3.5-5.1c2-2.3,3.2-5,5.1-7.4c2.4-3,4.4-6.4,6.7-9.5c3.4-4.5,6.4-9.2,9.5-13.8c2.1-3,4.2-5.9,6.3-8.9c0.9-1.3,1.6-2.6,2.5-3.9c4.2-5.9,8.3-11.9,12.4-17.9c2-2.8,3.7-6,6-8.6c0.3-0.4,0.3-1.1,1-1.1c2.2,0,4,0,7,0c0,2,0,2.9,0,4c0,23.7,0,47.5,0,71.2c0,0.7,0,1.4,0,2.1c0,1.5,1,2.7,2.6,2.7c4.3,0,8.4,0,13.4,0c0,2.1,0,4,0,6c-4,0-7.4,0-10.9,0c-0.7,0-1.4,0-2.1,0c-2.4,1-3,1.5-3,3.9c0,9.3,0,18.6,0,27.9c0,2.5,0.6,3.2,3.2,3.2c9.1,0,18.2,0,27.2,0c1.2,0,2.2,0.1,2.8-1.3c0.8-1.7,0.9-2.1-0.1-3.5c-0.7-0.9-1.6-1.2-2.8-1.2c-1.5,0-3,0-4.5,0C447.1,570.6,440.9,570.6,433.9,570.6z" /></g><g><path d="M590,570.6c0-8,0-15,0-22c-4,0-8.2,0-12.4,0c-2.5,0-3.6-1.5-3.6-4c0-4,0-7.9,0-11.9c0-2.4,1.1-3.2,3.6-3.3c1.3-0.1,2.7,0.2,3.9,0.2c2.8,0,5.6,0,8.4,0c0.7-1,0.1-2.2,0.1-3c0-23.9,0-47.7,0-71.6c0-0.8,0-1.6,0.1-2.4c0.3-2.1,1.3-3,3.3-3c3.8,0,7.7,0.1,11.5-0.1c1.6-0.1,2.5,0.6,3.2,1.7c4,6.6,8.7,12.7,13,19c3.7,5.4,7.5,10.7,11.3,16c3.2,4.5,6.3,9.3,9.5,13.8c2.6,3.7,5.1,7.5,7.8,11.1c2.8,3.8,5.4,7.7,8.1,11.6c1.4,2,2.7,4.1,4.2,6c0.7,0.8,0.9,1.6,0.9,2.5c0,4.7,0,9.3,0,14c0,2.8-0.3,3.4-3.1,3.4c-15.8,0-31.7,0-47.5,0c-0.6,0-1.4,0-2.4,0c0,7,0,14.4,0,22c2,0,2.8,0,4,0c18.2,0,36.3,0,54.5,0c0.7,0,1.4,0,2.1,0c2.3,0.2,3.4,1,3.4,3c0,2.1-1.1,3-3.6,3c-19.9,0-39.8,0-59.7,0c-1.2,0-2.3,0-3.5,0c-2,0-3.2-0.8-3.2-2.9c0-9.4,0-18.9,0-28.3c0-2.2,0.9-3.5,3.1-3.7c0.8-0.1,1.7-0.1,2.5-0.1c14.7,0,29.3,0,44,0c0.9,0,1.4,0,2.4,0c0-1,0-3.1,0-4.7c0-1.7,0.6-3.6,0-5.1c-0.8-1.9-2.1-3.6-3.5-5.1c-2-2.3-3.2-5-5.1-7.4c-2.4-3-4.4-6.4-6.7-9.5c-3.4-4.5-6.4-9.2-9.5-13.8c-2.1-3-4.2-5.9-6.3-8.9c-0.9-1.3-1.6-2.6-2.5-3.9c-4.2-5.9-8.3-11.9-12.4-17.9c-2-2.8-3.7-6-6-8.6c-0.3-0.4-0.3-1.1-1-1.1c-2.2,0-4.1,0-7.1,0c0,2,0,2.9,0,4c0,23.7,0,47.5,0,71.2c0,0.7,0,1.4,0,2.1c0,1.5-0.9,2.7-2.5,2.7c-4.3,0-8.5,0-13.5,0c0,2.1,0,4,0,6c4,0,7.5,0,11,0c0.7,0,1.4,0,2.1,0c2.4,1,2.9,1.5,2.9,3.9c0,9.3,0,18.6,0,27.9c0,2.5-0.5,3.2-3.1,3.2c-9.1,0-18.2,0-27.2,0c-1.2,0-2.2,0.1-2.8-1.3c-0.8-1.7-0.9-2.1,0.1-3.5c0.7-0.9,1.6-1.2,2.8-1.2c1.5,0,3,0,4.5,0C576.8,570.6,583,570.6,590,570.6z" /></g></symbol>'});l.a.add(p),a.default=p},f2b5:function(s,a,t){"use strict";t.r(a);var e=t("2877"),r=Object(e.a)({},function(){this.$createElement;return this._self._c,this._m(0)},[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("hr"),t("h1",[s._v("一、理解 Iterator(遍历器)")]),t("p",[s._v("JavaScript 原有的表示“集合”的数据结构，主要是"),t("strong",[s._v("数组")]),s._v("（Array）和"),t("strong",[s._v("对象")]),s._v("（Object），ES6 又添加了"),t("strong",[s._v("Map")]),s._v("和"),t("strong",[s._v("Set")]),s._v("。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是 Map，Map 的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。")]),t("p",[s._v("遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。")]),t("p",[s._v("Iterator 的作用有三个：")]),t("ul",[t("li",[s._v("为各种数据结构，提供一个统一的、简便的访问接口")]),t("li",[s._v("使得数据结构的成员能够按某种次序排列")]),t("li",[s._v("ES6 创造了一种新的遍历命令 for...of 循环，Iterator 接口主要供 for...of 消费")])]),t("p",[s._v("Iterator 的遍历过程是这样的。")]),t("blockquote",[t("p",[s._v("（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。")]),t("p",[s._v("（2）第一次调用指针对象的 next 方法，可以将指针指向数据结构的第一个成员。")]),t("p",[s._v("（3）第二次调用指针对象的 next 方法，指针就指向数据结构的第二个成员。")]),t("p",[s._v("（4）不断调用指针对象的 next 方法，直到它指向数据结构的结束位置。")])]),t("p",[s._v("每一次调用 "),t("strong",[s._v("next")]),s._v(" 方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含 "),t("strong",[s._v("value")]),s._v(" 和 "),t("strong",[s._v("done")]),s._v(" 两个属性的对象。其中，"),t("strong",[s._v("value")]),s._v(" 属性是当前成员的值，"),t("strong",[s._v("done")]),s._v(" 属性是一个布尔值，表示遍历是否结束。")]),t("p",[s._v("下面是一个模拟 next 方法返回值的例子:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" it = makeIterator(["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v("])\nit.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// { value: "a", done: false }')]),s._v("\nit.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// { value: "b", done: false }')]),s._v("\nit.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: undefined, done: true }")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("makeIterator")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("array")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" nextIndex = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" nextIndex < array.length\n        ? { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": array[nextIndex++], "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(" }\n        : { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" }\n    }\n  }\n}\n")])]),t("p",[s._v("上面代码定义了一个 makeIterator 函数，它是一个遍历器生成函数，作用就是返回一个遍历器对象。对数组['a', 'b']执行这个函数，就会返回该数组的遍历器对象（即指针对象）it。")]),t("p",[s._v("指针对象的 next 方法，用来移动指针。开始时，指针指向数组的开始位置。然后，每次调用 next 方法，指针就会指向数组的下一个成员。第一次调用，指向 a；第二次调用，指向 b。")]),t("p",[s._v("next 方法返回一个对象，表示当前数据成员的信息。这个对象具有 value 和 done 两个属性，value 属性返回当前位置的成员，done 属性是一个布尔值，表示遍历是否结束，即是否还有必要再一次调用 next 方法。")]),t("p",[s._v("总之，调用指针对象的 next 方法，就可以遍历事先给定的数据结构。")]),t("p",[s._v("在 ES6 中，有些数据结构原生具备 Iterator 接口（比如数组），即不用任何处理，就可以被 for...of 循环遍历，有些就不行（比如对象）。原因在于，这些数据结构原生部署了 "),t("strong",[s._v("Symbol.iterator")]),s._v(" 属性，另外一些数据结构没有。凡是部署了 "),t("strong",[s._v("Symbol.iterator")]),s._v(" 属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。")]),t("hr"),t("h1",[s._v("二、数据结构的默认 Iterator 接口")]),t("p",[s._v("Iterator 接口的目的，就是为所有数据结构，提供了一种统一的访问机制，即 for...of 循环。当使用 for...of 循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。")]),t("p",[s._v("ES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性，或者说，一个数据结构只要具有 Symbol.iterator 属性，就可以认为是“可遍历的”（iterable）。调用 Symbol.iterator 方法，就会得到当前数据结构默认的遍历器生成函数。Symbol.iterator 本身是一个表达式，返回 Symbol 对象的 iterator 属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内。")]),t("p",[s._v("在 ES6 中，有三类数据结构原生具备 Iterator 接口：数组、某些类似数组的对象、Set 和 Map 结构。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v("]\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" iter = arr["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]()\n\niter.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 'a', done: false }")]),s._v("\niter.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 'b', done: false }")]),s._v("\niter.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 'c', done: false }")]),s._v("\niter.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: undefined, done: true }")]),s._v("\n")])]),t("p",[s._v("上面代码中，变量 arr 是一个数组，原生就具有遍历器接口，部署在 arr 的 Symbol.iterator 属性上面。所以，调用这个属性，就得到遍历器对象。")]),t("p",[s._v("上面提到，原生就部署 Iterator 接口的数据结构有三类，对于这三类数据结构，不用自己写遍历器生成函数，for...of 循环会自动遍历它们。除此之外，其他数据结构（主要是对象）的 Iterator 接口，都需要自己在 Symbol.iterator 属性上面部署，这样才会被 for...of 循环遍历。")]),t("p",[s._v("对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。本质上，遍历器是一种线性处理，对于任何非线性的数据结构，部署遍历器接口，就等于部署一种线性转换。不过，严格地说，对象部署遍历器接口并不是很必要，因为这时对象实际上被当作 Map 结构使用，ES5 没有 Map 结构，而 ES6 原生提供了。")]),t("p",[s._v("一个对象如果要有可被 for...of 循环调用的 Iterator 接口，就必须在 Symbol.iterator 的属性上部署遍历器生成方法（原型链上的对象具有该方法也可）。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("RangeIterator")]),s._v(" ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(start, stop) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value = start\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".stop = stop\n  }\n\n  ["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]() {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("\n  }\n\n  next() {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (value < "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".stop) {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value++\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": value }\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(" }\n    }\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("range")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("start, stop")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" RangeIterator(start, stop)\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" range("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(")) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(value) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0 , 1 , 2")]),s._v("\n}\n")])]),t("p",[s._v("上面代码是一个类部署 Iterator 接口的写法。Symbol.iterator 属性对应一个函数，执行后返回当前对象的遍历器对象。")]),t("p",[s._v("下面是通过遍历器实现指针结构的例子:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Obj")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value = value\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".next = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n}\n\nObj.prototype["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" iterator = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": next\n  }\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" current = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("next")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (current) {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value = current.value\n      current = current.next\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": value\n      }\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n      }\n    }\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" iterator\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" one = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Obj("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" two = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Obj("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" three = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Obj("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(")\n\none.next = two\ntwo.next = three\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" one) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1 , 2 , 3")]),s._v("\n}\n")])]),t("p",[s._v("上面代码首先在构造函数的原型链上部署 Symbol.iterator 方法，调用该方法会返回遍历器对象 iterator，调用该对象的 next 方法，在返回一个值的同时，自动将内部指针移到下一个实例。")]),t("p",[s._v("为对象添加 Iterator 接口的例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world'")]),s._v("],\n  ["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]() {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" index = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n      next() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (index < self.data.length) {\n          "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": self.data[index++],\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("\n          }\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n          "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" }\n        }\n      }\n    }\n  }\n}\n")])]),t("p",[s._v("对于类似数组的对象（存在"),t("strong",[s._v("数值键名")]),s._v("和 "),t("strong",[s._v("length 属性")]),s._v("），部署 Iterator 接口，有一个简便方法，就是 Symbol.iterator 方法直接引用数组的 Iterator 接口。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("NodeList.prototype["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 或者")]),s._v("\nNodeList.prototype["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = []["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]\n\n[...document.querySelectorAll("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'div'")]),s._v(")] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 可以执行了")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 示例 ↓")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" iterable = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(",\n  ["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]: "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" item "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" iterable) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(item); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a , b , c")]),s._v("\n}\n")])]),t("p",[s._v("但是请记住，这个方法仅仅适用于类数组对象，上面的也可以直接用 Array.from(iterable)转换成数组来遍历，例如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arrayLike = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".from(arrayLike)) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(x) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a , b")]),s._v("\n}\n")])]),t("hr"),t("h1",[s._v("三、调用 Iterator 接口的场合")]),t("h2",[s._v("解构赋值")]),t("p",[s._v("对数组和 Set 结构进行解构赋值时，会默认调用 Symbol.iterator 方法。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("set")]),s._v(" = new Set()\n  .add('a')\n  .add('b')\n  .add('c')\n\nlet [x, y] = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("set")]),s._v("\n// x='a'; y='b'\n\nlet [first, ...rest] = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("set")]),s._v("\n// first='a'; rest=['b','c']\n")])]),t("h2",[s._v("扩展运算符")]),t("p",[s._v("扩展运算符（...）也会调用默认的 iterator 接口。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 例一")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" str = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v("\n[...str] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//  ['h','e','l','l','o']")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 例二")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v("]\n["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", ...arr, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'d'")]),s._v("]\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['a', 'b', 'c', 'd']")]),s._v("\n")])]),t("p",[s._v("也就是说，只要某个数据结构部署了 Iterator 接口，就可以对它使用扩展运算符，将其转为数组。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = [...iterable]\n")])]),t("h2",[s._v("yield*")]),t("p",[s._v("yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" generator = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("*("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v("* ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("]\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" iterator = generator()\n\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 1, done: false }")]),s._v("\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 2, done: false }")]),s._v("\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 3, done: false }")]),s._v("\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 4, done: false }")]),s._v("\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: 5, done: false }")]),s._v("\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: undefined, done: true }")]),s._v("\n")])]),t("h2",[s._v("其他场合")]),t("p",[s._v("由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都调用了遍历器接口。下面是一些例子。")]),t("ul",[t("li",[s._v("for...of")]),t("li",[s._v("Array.from()")]),t("li",[s._v("Map(), Set(), WeakMap(), WeakSet()（比如 new Map([['a',1],['b',2]])）")]),t("li",[s._v("Promise.all()")]),t("li",[s._v("Promise.race()")])]),t("hr"),t("h1",[s._v("四、字符串的 Iterator 接口")]),t("p",[s._v("字符串是一个类似数组的对象，也原生具有 Iterator 接口。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" someString = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hi'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" someString["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "function"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" iterator = someString["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]()\n\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// { value: "h", done: false }')]),s._v("\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// { value: "i", done: false }')]),s._v("\niterator.next() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// { value: undefined, done: true }")]),s._v("\n")])]),t("p",[s._v("上面代码中，调用 Symbol.iterator 方法返回一个遍历器对象，在这个遍历器上可以调用 next 方法，实现对于字符串的遍历。")]),t("p",[s._v("可以覆盖原生的 Symbol.iterator 方法，达到修改遍历器行为的目的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" str = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("String")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hi'")]),s._v(")\n\n[...str] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["h", "i"]')]),s._v("\n\nstr["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("next")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("._first) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("._first = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bye'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(" }\n      } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" }\n      }\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("_first")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n  }\n}\n\n[...str] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// ["bye"]')]),s._v("\nstr "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "hi"')]),s._v("\n")])]),t("p",[s._v("上面代码中，字符串 str 的 Symbol.iterator 方法被修改了，所以扩展运算符（...）返回的值变成了 bye，而字符串本身还是 hi。")]),t("h1",[s._v("五、Iterator 接口与 Generator 函数")]),t("p",[s._v("Symbol.iterator 方法的最简单实现")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myIterable = {}\n\nmyIterable["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("*("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n[...myIterable] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1, 2, 3]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 或者采用下面的简洁写法")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = {\n  *["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]() {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'world'")]),s._v("\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" obj) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(x)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// hello")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// world")]),s._v("\n")])]),t("p",[s._v("上面代码中，Symbol.iterator 方法几乎不用部署任何代码，只要用 yield 命令给出每一步的返回值即可。")]),t("h1",[s._v("六、遍历器对象的 return()，throw()")]),t("p",[s._v("遍历器对象除了具有 next 方法，还可以具有 return 方法和 throw 方法。如果你自己写遍历器对象生成函数，那么 next 方法是必须部署的，return 方法和 throw 方法是否部署是可选的。")]),t("p",[s._v("return 方法的使用场合是，如果 for...of 循环提前退出（通常是因为出错，或者有 break 语句或 continue 语句），就会调用 return 方法。如果一个对象在完成遍历前，需要清理或释放资源，就可以部署 return 方法。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("readLinesSync")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("file")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n    next() {\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (file.isAtEndOfFile()) {\n        file.close()\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" }\n      }\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v("() {\n      file.close()\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("done")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(" }\n    }\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" line "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" readLinesSync(fileName)) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(line)\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n}\n")])]),t("p",[s._v("上面代码中，函数 readLinesSync 接受一个文件对象作为参数，返回一个遍历器对象，其中除了 next 方法，还部署了 return 方法。下面，我们让文件的遍历提前返回，这样就会触发执行 return 方法。")]),t("p",[s._v("注意，return 方法必须返回一个对象，这是 Generator 规格决定的。")]),t("h1",[s._v("七、for...of 循环")]),t("p",[s._v("ES6 借鉴 C++、Java、C#和 Python 语言，引入了 for...of 循环，作为遍历所有数据结构的统一的方法。一个数据结构只要部署了 Symbol.iterator 属性，就被视为具有 iterator 接口，就可以用 for...of 循环遍历它的成员。也就是说，for...of 循环内部调用的是数据结构的 Symbol.iterator 方法。")]),t("p",[s._v("for...of 循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如 arguments 对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。")]),t("h2",[s._v("数组")]),t("p",[s._v("数组原生具备 iterator 接口，for...of 循环本质上就是调用这个接口产生的遍历器，可以用下面的代码证明。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'green'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'blue'")]),s._v("]\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" iterator = arr["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]()\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" arr) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(v) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// red green blue")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" v "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" iterator) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(v) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// red green blue")]),s._v("\n}\n")])]),t("p",[s._v("上面代码的 for...of 循环的两种写法是等价的。")]),t("p",[s._v("for...of 循环可以代替数组实例的 forEach 方法。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'green'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'blue'")]),s._v("]\n\narr.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("element, index")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(element) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// red green blue")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(index) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0 1 2")]),s._v("\n})\n")])]),t("p",[s._v("JavaScript 原有的 for...in 循环，只能获得对象的键名，不能直接获取键值。ES6 提供 for...of 循环，允许遍历获得键值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'d'")]),s._v("]\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" arr) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 0 1 2 3")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" arr) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a b c d")]),s._v("\n}\n")])]),t("p",[s._v("上面代码表明，for...in 循环读取键名，for...of 循环读取键值。如果要通过 for...of 循环，获取数组的索引，可以借助数组实例的 entries 方法和 keys 方法。")]),t("p",[s._v("for...of 循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟 for...in 循环也不一样。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("7")]),s._v("]\narr.foo = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" arr) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "0", "1", "2", "foo"')]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" arr) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('//  "3", "5", "7"')]),s._v("\n}\n")])]),t("p",[s._v("上面代码中，for...of 循环不会返回数组 arr 的 foo 属性。")]),t("h2",[s._v("Set 和 Map 结构")]),t("p",[s._v("Set 和 Map 结构也原生具有 Iterator 接口，可以直接使用 for...of 循环。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" engines = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Set")]),s._v("(["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Gecko'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Trident'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Webkit'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Webkit'")]),s._v("])\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" e "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" engines) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(e)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Gecko")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Trident")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Webkit")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" es6 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Map")]),s._v("()\nes6.set("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'edition'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(")\nes6.set("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'committee'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'TC39'")]),s._v(")\nes6.set("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'standard'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'ECMA-262'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" [name, value] "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" es6) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(name + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("': '")]),s._v(" + value)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// edition: 6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// committee: TC39")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// standard: ECMA-262")]),s._v("\n")])]),t("p",[s._v("上面代码演示了如何遍历 Set 结构和 Map 结构。值得注意的地方有两个，首先，遍历的顺序是按照各个成员被添加进数据结构的顺序。其次，Set 结构遍历时，返回的是一个值，而 Map 结构遍历时，返回的是一个数组，该数组的两个成员分别为当前 Map 成员的键名和键值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" map = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Map")]),s._v("().set("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(").set("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" pair "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" map) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(pair)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['a', 1]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['b', 2]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [key, value] "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" map) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(key + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' : '")]),s._v(" + value)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a : 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// b : 2")]),s._v("\n")])]),t("h2",[s._v("计算生成的数据结构")]),t("p",[s._v("有些数据结构是在现有数据结构的基础上，计算生成的。比如，ES6 的数组、Set、Map 都部署了以下三个方法，调用后都返回遍历器对象。")]),t("ul",[t("li",[t("p",[s._v("entries() 返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。对于数组，键名就是索引值；对于 Set，键名与键值相同。Map 结构的 iterator 接口，默认就是调用 entries 方法。")])]),t("li",[t("p",[s._v("keys() 返回一个遍历器对象，用来遍历所有的键名。")])]),t("li",[t("p",[s._v("values() 返回一个遍历器对象，用来遍历所有的键值。")])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'c'")]),s._v("]\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" pair "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" arr.entries()) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(pair)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [0, 'a']")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [1, 'b']")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [2, 'c']")]),s._v("\n")])]),t("h2",[s._v("类似数组的对象")]),t("p",[s._v("类似数组的对象包括好几类。下面是 for...of 循环用于字符串、DOM NodeList 对象、arguments 对象的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 字符串")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" str = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" str) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(s) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// h e l l o")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// DOM NodeList对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" paras = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".querySelectorAll("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'p'")]),s._v(")\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" paras) {\n  p.classList.add("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'test'")]),s._v(")\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// arguments对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("printArgs")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(x)\n  }\n}\nprintArgs("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'a'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'b'")]),s._v("\n")])]),t("p",[s._v("对于字符串来说，for...of 循环还有一个特点，就是会正确识别 32 位 UTF-16 字符。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a\\uD83D\\uDC0A'")]),s._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(x)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 'a'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// '\\uD83D\\uDC0A'")]),s._v("\n")])]),t("p",[s._v("并不是所有类似数组的对象都具有 iterator 接口，一个简便的解决方法，就是使用 Array.from 方法将其转为数组。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arrayLike = { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'a'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'b'")]),s._v(" }\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" arrayLike) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(x)\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".from(arrayLike)) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(x)\n}\n")])]),t("h2",[s._v("对象")]),t("p",[s._v("对于普通的对象，for...of 结构不能直接使用，会报错，必须部署了 iterator 接口后才能使用。但是，这样情况下，for...in 循环依然可以用来遍历键名。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" es6 = {\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("edition")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("committee")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'TC39'")]),s._v(",\n  "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("standard")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'ECMA-262'")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" (e "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" es6) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(e)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// edition")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// committee")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// standard")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" (e "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" es6) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(e)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// TypeError: es6 is not iterable")]),s._v("\n")])]),t("p",[s._v("上面代码表示，对于普通的对象，for...in 循环可以遍历键名，for...of 循环会报错。")]),t("p",[s._v("一种解决方法是，使用 Object.keys 方法将对象的键名生成一个数组，然后遍历这个数组。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".keys(someObject)) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(key + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("': '")]),s._v(" + someObject[key])\n}\n")])]),t("p",[s._v("在对象上部署 iterator 接口的代码，一个方便的方法是将数组的 Symbol.iterator 属性，直接赋值给其他对象的 Symbol.iterator 属性。比如，想要让 for...of 环遍历 jQuery 对象，只要加上下面这一行就可以了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("jQuery.prototype["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator] = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Symbol")]),s._v(".iterator]\n")])]),t("p",[s._v("另一个方法是使用 Generator 函数将对象重新包装一下。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("entries")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".keys(obj)) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("yield")]),s._v(" [key, obj[key]]\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [key, value] "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" entries(obj)) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(key, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'->'")]),s._v(", value)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a -> 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// b -> 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// c -> 3")]),s._v("\n")])]),t("h2",[s._v("与其他遍历语法的比较")]),t("p",[s._v("以数组为例，JavaScript 提供多种遍历语法。最原始的写法就是 for 循环。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" index = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; index < myArray.length; index++) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(myArray[index])\n}\n")])]),t("p",[s._v("这种写法比较麻烦，因此数组提供内置的 forEach 方法。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("myArray.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(value)\n})\n")])]),t("p",[s._v("这种写法的问题在于，无法中途跳出 forEach 循环，break 命令或 return 命令都不能奏效。")]),t("p",[s._v("for...in 循环可以遍历数组的键名。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" index "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" myArray) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(myArray[index])\n}\n")])]),t("p",[s._v("for...in 循环有几个缺点。")]),t("ul",[t("li",[s._v("数组的键名是数字，但是 for...in 循环是以字符串作为键名“0”、“1”、“2”等等。")]),t("li",[s._v("for...in 循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。")]),t("li",[s._v("某些情况下，for...in 循环会以任意顺序遍历键名。")])]),t("p",[s._v("总之，for...in 循环主要是为遍历对象而设计的，不适用于遍历数组。")]),t("p",[s._v("for...of 循环相比上面几种做法，有一些显著的优点。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" myArray) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(value)\n}\n")])]),t("ul",[t("li",[s._v("有着同 for...in 一样的简洁语法，但是没有 for...in 那些缺点。")]),t("li",[s._v("不同用于 forEach 方法，它可以与 break、continue 和 return 配合使用。")]),t("li",[s._v("提供了遍历所有数据结构的统一操作接口。")])]),t("p",[s._v("下面是一个使用 break 语句，跳出 for...of 循环的例子。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("of")]),s._v(" fibonacci) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (n > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(n)\n}\n")])]),t("p",[s._v("上面的例子，会输出斐波纳契数列小于等于 1000 的项。如果当前项大于 1000，就会使用 break 语句跳出 for...of 循环。")])])}],!1,null,null,null);a.default=r.exports}});